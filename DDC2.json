[
    {
        "id": "092c6e9c32f04760",
        "type": "subflow",
        "name": "TASK_REBOOT",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 40,
                "wires": [
                    {
                        "id": "b7ad54fbd4eea5fc"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1020,
                "y": 40,
                "wires": [
                    {
                        "id": "72399de4e4280bf4",
                        "port": 0
                    }
                ]
            },
            {
                "x": 1000,
                "y": 100,
                "wires": [
                    {
                        "id": "9e682b031280fbf8",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#A6BBCF",
        "outputLabels": [
            "REBOOT",
            "NOTIFICATION"
        ],
        "icon": "font-awesome/fa-power-off",
        "status": {
            "x": 1060,
            "y": 160,
            "wires": [
                {
                    "id": "9c07db136a9d0f8a",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "b7ad54fbd4eea5fc",
        "type": "function",
        "z": "092c6e9c32f04760",
        "name": "INPUT",
        "func": "var Task_Reboot = global.get('DDC2.Tasks.Task_Reboot')\nif (Task_Reboot.TASK_REBOOT) {\n    msg.payload = {\n        offtime: Task_Reboot.Restart_Time,\n        mon: Task_Reboot.Monday,\n        tue: Task_Reboot.Tuesday,\n        wed: Task_Reboot.Wednesday,\n        thu: Task_Reboot.Thursday,\n        fri: Task_Reboot.Friday,\n        sat: Task_Reboot.Saturday,\n        sun: Task_Reboot.Sunday\n    }\n    return [msg,msg]\n} else {\n    return [null,msg]\n}\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 100,
        "wires": [
            [
                "586b9a6322f10233",
                "e732efa88ebfa3bb",
                "7ea6d694f8438d4a",
                "55e1eacbb39a6da7",
                "1d65f00fd72f96be",
                "6a79d562b7a68d4e",
                "85b31e9efb74c34d",
                "0b6f723737d950d6",
                "288539142d776558",
                "3fa09631ba0dabba",
                "84688c59dcd61a57",
                "725a1f0712a5a672",
                "6a24a6d9e9b52a38"
            ],
            [
                "5aba491bc452b3f2"
            ]
        ],
        "inputLabels": [
            "input"
        ],
        "outputLabels": [
            "To Scheduling Nodes",
            "To Notification Node"
        ]
    },
    {
        "id": "288539142d776558",
        "type": "schedex",
        "z": "092c6e9c32f04760",
        "name": "t-30",
        "passthroughunhandled": false,
        "suspended": false,
        "lat": "",
        "lon": "",
        "ontime": "",
        "ontopic": "",
        "onpayload": "",
        "onoffset": 0,
        "onrandomoffset": 0,
        "offtime": "",
        "offtopic": "",
        "offpayload": "30",
        "offoffset": "-30",
        "offrandomoffset": 0,
        "mon": false,
        "tue": false,
        "wed": false,
        "thu": false,
        "fri": false,
        "sat": false,
        "sun": false,
        "x": 390,
        "y": 580,
        "wires": [
            [
                "9e682b031280fbf8"
            ]
        ]
    },
    {
        "id": "0b6f723737d950d6",
        "type": "schedex",
        "z": "092c6e9c32f04760",
        "name": "t-15",
        "passthroughunhandled": false,
        "suspended": false,
        "lat": "",
        "lon": "",
        "ontime": "",
        "ontopic": "",
        "onpayload": "",
        "onoffset": 0,
        "onrandomoffset": 0,
        "offtime": "",
        "offtopic": "",
        "offpayload": "15",
        "offoffset": "-15",
        "offrandomoffset": 0,
        "mon": false,
        "tue": false,
        "wed": false,
        "thu": false,
        "fri": false,
        "sat": false,
        "sun": false,
        "x": 390,
        "y": 520,
        "wires": [
            [
                "9e682b031280fbf8"
            ]
        ]
    },
    {
        "id": "85b31e9efb74c34d",
        "type": "schedex",
        "z": "092c6e9c32f04760",
        "name": "t-10",
        "passthroughunhandled": false,
        "suspended": false,
        "lat": "",
        "lon": "",
        "ontime": "",
        "ontopic": "",
        "onpayload": "",
        "onoffset": 0,
        "onrandomoffset": 0,
        "offtime": "",
        "offtopic": "",
        "offpayload": "10",
        "offoffset": "-10",
        "offrandomoffset": 0,
        "mon": false,
        "tue": false,
        "wed": false,
        "thu": false,
        "fri": false,
        "sat": false,
        "sun": false,
        "x": 390,
        "y": 460,
        "wires": [
            [
                "9e682b031280fbf8"
            ]
        ]
    },
    {
        "id": "6a79d562b7a68d4e",
        "type": "schedex",
        "z": "092c6e9c32f04760",
        "name": "t-5",
        "passthroughunhandled": false,
        "suspended": false,
        "lat": "",
        "lon": "",
        "ontime": "",
        "ontopic": "",
        "onpayload": "",
        "onoffset": 0,
        "onrandomoffset": 0,
        "offtime": "",
        "offtopic": "",
        "offpayload": "5",
        "offoffset": "-5",
        "offrandomoffset": 0,
        "mon": false,
        "tue": false,
        "wed": false,
        "thu": false,
        "fri": false,
        "sat": false,
        "sun": false,
        "x": 390,
        "y": 400,
        "wires": [
            [
                "9e682b031280fbf8"
            ]
        ]
    },
    {
        "id": "1d65f00fd72f96be",
        "type": "schedex",
        "z": "092c6e9c32f04760",
        "name": "t-4",
        "passthroughunhandled": false,
        "suspended": false,
        "lat": "",
        "lon": "",
        "ontime": "",
        "ontopic": "",
        "onpayload": "",
        "onoffset": 0,
        "onrandomoffset": 0,
        "offtime": "",
        "offtopic": "",
        "offpayload": "4",
        "offoffset": "-4",
        "offrandomoffset": 0,
        "mon": false,
        "tue": false,
        "wed": false,
        "thu": false,
        "fri": false,
        "sat": false,
        "sun": false,
        "x": 390,
        "y": 340,
        "wires": [
            [
                "9e682b031280fbf8"
            ]
        ]
    },
    {
        "id": "55e1eacbb39a6da7",
        "type": "schedex",
        "z": "092c6e9c32f04760",
        "name": "t-3",
        "passthroughunhandled": false,
        "suspended": false,
        "lat": "",
        "lon": "",
        "ontime": "",
        "ontopic": "",
        "onpayload": "",
        "onoffset": 0,
        "onrandomoffset": 0,
        "offtime": "",
        "offtopic": "",
        "offpayload": "3",
        "offoffset": "-3",
        "offrandomoffset": 0,
        "mon": false,
        "tue": false,
        "wed": false,
        "thu": false,
        "fri": false,
        "sat": false,
        "sun": false,
        "x": 390,
        "y": 280,
        "wires": [
            [
                "9e682b031280fbf8"
            ]
        ]
    },
    {
        "id": "7ea6d694f8438d4a",
        "type": "schedex",
        "z": "092c6e9c32f04760",
        "name": "t-2",
        "passthroughunhandled": false,
        "suspended": false,
        "lat": "",
        "lon": "",
        "ontime": "",
        "ontopic": "",
        "onpayload": "",
        "onoffset": 0,
        "onrandomoffset": 0,
        "offtime": "",
        "offtopic": "",
        "offpayload": "2",
        "offoffset": "-2",
        "offrandomoffset": 0,
        "mon": false,
        "tue": false,
        "wed": false,
        "thu": false,
        "fri": false,
        "sat": false,
        "sun": false,
        "x": 390,
        "y": 220,
        "wires": [
            [
                "9e682b031280fbf8"
            ]
        ]
    },
    {
        "id": "e732efa88ebfa3bb",
        "type": "schedex",
        "z": "092c6e9c32f04760",
        "name": "t-1",
        "passthroughunhandled": false,
        "suspended": false,
        "lat": "",
        "lon": "",
        "ontime": "",
        "ontopic": "",
        "onpayload": "",
        "onoffset": 0,
        "onrandomoffset": 0,
        "offtime": "",
        "offtopic": "",
        "offpayload": "1",
        "offoffset": "-1",
        "offrandomoffset": 0,
        "mon": false,
        "tue": false,
        "wed": false,
        "thu": false,
        "fri": false,
        "sat": false,
        "sun": false,
        "x": 390,
        "y": 160,
        "wires": [
            [
                "9e682b031280fbf8"
            ]
        ]
    },
    {
        "id": "725a1f0712a5a672",
        "type": "schedex",
        "z": "092c6e9c32f04760",
        "name": "t-45",
        "passthroughunhandled": false,
        "suspended": false,
        "lat": "",
        "lon": "",
        "ontime": "",
        "ontopic": "",
        "onpayload": "",
        "onoffset": 0,
        "onrandomoffset": 0,
        "offtime": "",
        "offtopic": "",
        "offpayload": "45",
        "offoffset": "-45",
        "offrandomoffset": 0,
        "mon": false,
        "tue": false,
        "wed": false,
        "thu": false,
        "fri": false,
        "sat": false,
        "sun": false,
        "x": 390,
        "y": 640,
        "wires": [
            [
                "9e682b031280fbf8"
            ]
        ]
    },
    {
        "id": "84688c59dcd61a57",
        "type": "schedex",
        "z": "092c6e9c32f04760",
        "name": "t-60",
        "passthroughunhandled": false,
        "suspended": false,
        "lat": "",
        "lon": "",
        "ontime": "",
        "ontopic": "",
        "onpayload": "",
        "onoffset": 0,
        "onrandomoffset": 0,
        "offtime": "",
        "offtopic": "",
        "offpayload": "60",
        "offoffset": "-60",
        "offrandomoffset": 0,
        "mon": false,
        "tue": false,
        "wed": false,
        "thu": false,
        "fri": false,
        "sat": false,
        "sun": false,
        "x": 390,
        "y": 700,
        "wires": [
            [
                "9e682b031280fbf8"
            ]
        ]
    },
    {
        "id": "3fa09631ba0dabba",
        "type": "schedex",
        "z": "092c6e9c32f04760",
        "name": "t-90",
        "passthroughunhandled": false,
        "suspended": false,
        "lat": "",
        "lon": "",
        "ontime": "",
        "ontopic": "",
        "onpayload": "",
        "onoffset": 0,
        "onrandomoffset": 0,
        "offtime": "",
        "offtopic": "",
        "offpayload": "90",
        "offoffset": "-90",
        "offrandomoffset": 0,
        "mon": false,
        "tue": false,
        "wed": false,
        "thu": false,
        "fri": false,
        "sat": false,
        "sun": false,
        "x": 390,
        "y": 760,
        "wires": [
            [
                "9e682b031280fbf8"
            ]
        ]
    },
    {
        "id": "586b9a6322f10233",
        "type": "schedex",
        "z": "092c6e9c32f04760",
        "name": "EXECUTE REBOOT",
        "passthroughunhandled": false,
        "suspended": false,
        "lat": "",
        "lon": "",
        "ontime": "",
        "ontopic": "",
        "onpayload": "",
        "onoffset": 0,
        "onrandomoffset": 0,
        "offtime": "",
        "offtopic": "",
        "offpayload": "0",
        "offoffset": 0,
        "offrandomoffset": 0,
        "mon": false,
        "tue": false,
        "wed": false,
        "thu": false,
        "fri": false,
        "sat": false,
        "sun": false,
        "x": 440,
        "y": 100,
        "wires": [
            [
                "9e682b031280fbf8",
                "49c76149e2de1e5e"
            ]
        ]
    },
    {
        "id": "9e682b031280fbf8",
        "type": "function",
        "z": "092c6e9c32f04760",
        "name": "",
        "func": "return msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 775,
        "y": 100,
        "wires": [
            []
        ],
        "inputLabels": [
            "From Timer"
        ],
        "outputLabels": [
            "NOTIFICATIONS"
        ],
        "icon": "node-red/arrow-in.svg",
        "l": false
    },
    {
        "id": "72399de4e4280bf4",
        "type": "function",
        "z": "092c6e9c32f04760",
        "name": "Exec Reboot",
        "func": "var DDC2 = flow.get(\"$parent.DDC2\")\nif (DDC2.ServerInfo.DDC2_MASTER) { return msg }",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 40,
        "wires": [
            []
        ],
        "inputLabels": [
            "From Shutdown Timer"
        ],
        "outputLabels": [
            "Shutdown Command"
        ]
    },
    {
        "id": "49c76149e2de1e5e",
        "type": "delay",
        "z": "092c6e9c32f04760",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 675,
        "y": 40,
        "wires": [
            [
                "72399de4e4280bf4"
            ]
        ],
        "l": false
    },
    {
        "id": "6a24a6d9e9b52a38",
        "type": "schedex",
        "z": "092c6e9c32f04760",
        "name": "REPORT REBOOT TIME",
        "passthroughunhandled": false,
        "suspended": false,
        "lat": "",
        "lon": "",
        "ontime": "",
        "ontopic": "",
        "onpayload": "",
        "onoffset": 0,
        "onrandomoffset": 0,
        "offtime": "",
        "offtopic": "",
        "offpayload": "0",
        "offoffset": 0,
        "offrandomoffset": 0,
        "mon": false,
        "tue": false,
        "wed": false,
        "thu": false,
        "fri": false,
        "sat": false,
        "sun": false,
        "x": 450,
        "y": 820,
        "wires": [
            [
                "9c07db136a9d0f8a"
            ]
        ]
    },
    {
        "id": "9c07db136a9d0f8a",
        "type": "function",
        "z": "092c6e9c32f04760",
        "name": "SET_STATUS",
        "func": "var DDC2 = flow.get(\"$parent.DDC2\")\n//var DDC2 = flow.get(\"DDC2\")\nvar Task_Reboot = global.get('DDC2.Tasks.Task_Reboot')\nvar status_colour = \"grey\"\nvar status_shape = \"dot\"\nvar status_text = \"NO SCHEDULED REBOOT SET\"\nif (DDC2.ServerInfo.ServerID == Task_Reboot.DDC2_MASTER) {\n    //Means this flow is master\n    status_colour = \"green\"\n    status_text = 'MASTER: '\n} else {\n    //Means this flow is a slave\n    status_colour = \"yellow\"\n    status_text = 'SLAVE: '\n}\nif (msg.payload.off == \"suspended\") {\n    status_colour = \"grey\"\n    status_text = status_text + 'NO REBOOT SET'\n} else {\n    var next_reboot_raw = Date.parse(msg.payload.off)\n    var formatted_reboot = new Date(next_reboot_raw).toLocaleString(DDC2.ServerInfo.Language, { hour12: false })\n    //node.warn(\"formatted_reboot: \" + formatted_reboot);\n    status_text = status_text + formatted_reboot\n}\n\n//node.status({ fill: status_colour, shape: status_shape, text: status_text });\nmsg.payload = {\n    fill: status_colour,\n    shape: status_shape,\n    text: status_text\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "8cea73c00e404361",
        "type": "delay",
        "z": "092c6e9c32f04760",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 275,
        "y": 820,
        "wires": [
            [
                "6a24a6d9e9b52a38"
            ]
        ],
        "l": false
    },
    {
        "id": "5aba491bc452b3f2",
        "type": "function",
        "z": "092c6e9c32f04760",
        "name": "info_local",
        "func": "msg.payload = 'info_local'\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 820,
        "wires": [
            [
                "8cea73c00e404361"
            ]
        ]
    },
    {
        "id": "ef6fcb72f5ddd39c",
        "type": "tab",
        "label": "DDC2 v2.2 Hotel",
        "disabled": false,
        "info": ""
    },
    {
        "id": "60cd9cfb10b3449f",
        "type": "json",
        "z": "ef6fcb72f5ddd39c",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": true,
        "x": 895,
        "y": 200,
        "wires": [
            [
                "3af69027f8f21536"
            ]
        ],
        "l": false
    },
    {
        "id": "5ccb66a47348e20f",
        "type": "inject",
        "z": "ef6fcb72f5ddd39c",
        "name": "Initialize Server",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.1",
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 500,
        "y": 480,
        "wires": [
            [
                "61a5a3cb9b0516ea",
                "2cc63499c3c72f16"
            ]
        ]
    },
    {
        "id": "61a5a3cb9b0516ea",
        "type": "function",
        "z": "ef6fcb72f5ddd39c",
        "name": "Initialize",
        "func": "// This bit of code requests data from powershell to populate \n// the configuration items that were previously in Node-Red.\nvar payload = \"-init\";  \nmsg.payload = payload;\nvar command = \"!init\";\nvar requesttype = command.replace('!','')\nvar access = \"GRANTED\";\nmsg.data = {\n    \"createdTimestamp\": Date.now()\n    }\nvar tmstmp = msg.data.createdTimestamp;\nvar localdatetime = (new Date(tmstmp)).toLocaleString();\n\nmsg.ddc2 = {\n          \"request\" : command,\n    \"FormattedTime\" : localdatetime,\n   \"RequestChannel\" : \"\",\n \"RequestChannelID\" : \"\",\n      \"requesttype\" : requesttype,\n           \"access\" : access,\n       \"authorized\" : true,\n            \"valid\" : true,\n          \"comment\" : \"\",\n     \"Notification\" : \"\",\n              \"TTC\" : \"\", //Time To Completion, This measures the time the system recieved the request through to the time the request was completed. This item is used in further down in the flow\n              \"raw\" : msg.payload\n}\nnode.status({fill:\"green\",shape:\"dot\",text:\"DDC2 Initialized\"});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "\n",
        "x": 700,
        "y": 420,
        "wires": [
            [
                "7967b79de75d2d39"
            ]
        ],
        "inputLabels": [
            "Post-Whitelist-Check"
        ],
        "outputLabels": [
            "Process Request"
        ]
    },
    {
        "id": "3af69027f8f21536",
        "type": "change",
        "z": "ef6fcb72f5ddd39c",
        "name": "MovePS Output",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "PS",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 939,
        "y": 200,
        "wires": [
            [
                "27fc621b665a3c24"
            ]
        ],
        "icon": "node-red/alert.svg",
        "l": false
    },
    {
        "id": "60a338c477371fe6",
        "type": "function",
        "z": "ef6fcb72f5ddd39c",
        "name": "AutoStart",
        "func": "var payload = \"-AutoStart\"; //Changed while testing (Switch between -status or -doupdate)\nmsg.payload = payload;\nvar DDC2 = flow.get('DDC2');\nmsg.author = {\n        \"username\": DDC2.ServerInfo.ServerID,\n        \"id\": DDC2.ServerInfo.ServerID\n    }\n\nmsg.data = {\n    \"createdTimestamp\": Date.now()\n    }\nmsg.channel = {\n    \"id\": DDC2.Channel.Admin\n    }\n\nvar tmstmp = msg.data.createdTimestamp;\nvar localdatetime = (new Date(tmstmp)).toLocaleString();\nvar command = \"!autostart\";\nvar requesttype = command.replace('!','')\nvar access = \"GRANTED\";\n\nmsg.ddc2 = {\n          \"request\" : command,\n    \"FormattedTime\" : localdatetime,\n   \"RequestChannel\" : \"NOT APPLICABLE\",\n \"RequestChannelID\" : \"NOT APPLICABLE\",\n      \"requesttype\" : requesttype,\n           \"access\" : access,\n       \"authorized\" : true,\n            \"valid\" : true,\n          \"comment\" : \"Server AutoStart\",\n     \"Notification\" : DDC2.ServerInfo.ServerID+ ` has initialized its ` +requesttype+ ` sequence on the ` +localdatetime,\n              \"raw\" : msg.payload\n}\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "\n",
        "x": 800,
        "y": 480,
        "wires": [
            [
                "7967b79de75d2d39",
                "f72d0f6cfdae76e0"
            ]
        ],
        "inputLabels": [
            "Post-Whitelist-Check"
        ],
        "outputLabels": [
            "Process Request"
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "13065ea0c2e52969",
        "type": "function",
        "z": "ef6fcb72f5ddd39c",
        "name": "Config Refreshed",
        "func": "//DO NOT MODIFY THIS DATA!!\nvar Func = flow.get('Func'); //Loads Flow Functions into memory\n//This sets the entire DDC2 variable structure from the ddc2_config.ps1, dont remove it!\nflow.set('DDC2', 0);\nmsg.PS.TMP = {\n    'GuildIDPwd' : Func.genPassword(7),\n  'SrvStatusPwd' : Func.genPassword(7)\n}\nflow.set('DDC2', msg.PS);\n\nif ((msg.PS.ServerInfo.DDC2_MASTER) && (msg.PS.ServerInfo.Task_Reboot.TASK_REBOOT)){\n  global.set('DDC2.Tasks.Task_Reboot', 0)\n  global.set('DDC2.Tasks.Task_Reboot', msg.PS.ServerInfo.Task_Reboot)\n}\n\nvar TimeDate = new Date(msg.data.createdTimestamp).toLocaleString();\nnode.status({fill:\"green\",shape:\"dot\",text:TimeDate});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 40,
        "wires": [
            [
                "543ba4fa32cf4725",
                "154f4ad0c4db4acc",
                "202e698cc2e168d5",
                "3e31ab70dd7adad3",
                "827125c48505845a"
            ]
        ],
        "icon": "node-red/cog.svg"
    },
    {
        "id": "9febfad9f862f21f",
        "type": "link in",
        "z": "ef6fcb72f5ddd39c",
        "name": "Set-Config",
        "links": [
            "365342ea2d11ab5a",
            "2acac9d6d8835fbc"
        ],
        "x": 55,
        "y": 40,
        "wires": [
            [
                "13065ea0c2e52969"
            ]
        ]
    },
    {
        "id": "365342ea2d11ab5a",
        "type": "link out",
        "z": "ef6fcb72f5ddd39c",
        "name": "To Set-Config",
        "links": [
            "9febfad9f862f21f"
        ],
        "x": 1115,
        "y": 80,
        "wires": []
    },
    {
        "id": "543ba4fa32cf4725",
        "type": "function",
        "z": "ef6fcb72f5ddd39c",
        "name": "Server Status",
        "func": "flow.set('DDC2.Ready', true);\nnode.status({fill:\"green\",shape:\"dot\",text:\"SERVER READY!\"});\n\n//This line checks if the refresh command has been called, if so it does not execute the Autostart sequence.\nif(msg.ddc2.requesttype == \"refresh\") {} else {return msg}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 220,
        "wires": [
            [
                "8132fc3dbf95b4e8"
            ]
        ],
        "outputLabels": [
            "To AutoStart"
        ],
        "icon": "node-red/status.svg"
    },
    {
        "id": "99889f9d46bd9c75",
        "type": "function",
        "z": "ef6fcb72f5ddd39c",
        "name": "Task Authorization",
        "func": "/*\nChecks the Discord Message User groups against the specific command being run and either passes the message onto Pre-Processing or sends an \naccess denied message and logs the access denied request. Note, Access Granted is assumed from this point so the Pre-Processing section needs \nto take care of the task notification after the command in questions syntax is checked.\n*/\n\n\n////////////////////////////////////////////////////////////////////////////////////////////////////\n////Initialize Variables\nvar MsgSent = context.get('MsgSent') || 1;\n\n//Get Flow Variables\nvar Func = flow.get('Func');\nvar DDC2 = flow.get('DDC2');\nvar CommandPermissions = flow.get('DDC2.Permissions.'+msg.ddc2.requesttype)\n\n\nif (typeof CommandPermissions === 'undefined') {\n    msg.ddc2.authorized = false;\n    msg.ddc2.Notification = `Attention: ` + msg.author.username + `, your ` + (Func.Capitalize(msg.ddc2.requesttype)) + ` on ` + DDC2.ServerInfo.ServerID +  ` is not a valid command, for further assistance please consult the help command by typing ` + DDC2.ServerInfo.CommandPrefix + `help`\n    msg.ddc2.access = \"INVALID\"\n    node.status({ fill: \"red\", shape: \"ring\", text: \"INVALID:::\" + MsgSent });\n    context.set('MsgSent', (MsgSent + 1));\n} else {\n    if (Func.GrantAccess(CommandPermissions,msg.member.roles)) {\n        msg.ddc2.authorized = true;\n        msg.ddc2.access = \"GRANTED\"\n        }\n    else {\n        msg.ddc2.authorized = false;\n        msg.ddc2.Notification = `!!ACCESS DENIED!! ` +msg.author.username+ ` you do not have access to the `+(Func.Capitalize(msg.ddc2.requesttype))+` command on server ` +DDC2.ServerInfo.ServerID+ `, message ignored on the `+msg.ddc2.FormattedTime\n        msg.ddc2.access = \"DENIED\"\n        node.status({fill:\"red\",shape:\"dot\",text: \"DENIED:::\"+MsgSent});\n        context.set('MsgSent', (MsgSent + 1));\n    }\n}\nif(msg.ddc2.authorized) {return [null,msg]} else {return [msg,null]}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 720,
        "wires": [
            [
                "f72d0f6cfdae76e0"
            ],
            [
                "74e5fd8b292d6511"
            ]
        ],
        "inputLabels": [
            "Post-Request-Filter"
        ],
        "outputLabels": [
            "Access Denied Notification and Access Denied Log",
            "To Pre-Processing Filter"
        ],
        "icon": "font-awesome/fa-shield"
    },
    {
        "id": "abe5c7990a1f6278",
        "type": "exec",
        "z": "ef6fcb72f5ddd39c",
        "command": "\"C:\\Program Files\\PowerShell\\7\\pwsh.exe\" -ExecutionPolicy Bypass -NoProfile -File \"G:\\DDC2\\ddc2.ps1\"",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "PowerShell",
        "x": 784,
        "y": 200,
        "wires": [
            [
                "60cd9cfb10b3449f"
            ],
            [],
            []
        ],
        "inputLabels": [
            "Input"
        ],
        "outputLabels": [
            "DDC2.ps1 Output",
            "Error",
            "Return"
        ],
        "icon": "font-awesome/fa-file-powerpoint-o"
    },
    {
        "id": "bbed42bd9246a46b",
        "type": "link in",
        "z": "ef6fcb72f5ddd39c",
        "name": "Discord SEND",
        "links": [
            "c6d0f8143b48e89b",
            "18a377639c43dbe3",
            "9bbfa74c597067d3",
            "046135a94a52429f",
            "2478b8801eab2c19",
            "d6fad1fb0f8c96a8",
            "04b6f38879e6301a",
            "cd81780492d1575a"
        ],
        "x": 205,
        "y": 320,
        "wires": [
            [
                "f6ef943f99d66949"
            ]
        ]
    },
    {
        "id": "27fc621b665a3c24",
        "type": "switch",
        "z": "ef6fcb72f5ddd39c",
        "name": "Post-Processing Filter",
        "property": "ddc2.requesttype",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "init",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "radio",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "stop",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "autostart",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "status",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "update",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "updating",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "access",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "secure",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "start",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "restart",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "refresh",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "reboot",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 13,
        "x": 983,
        "y": 200,
        "wires": [
            [
                "365342ea2d11ab5a"
            ],
            [
                "fc0dd516b7f71fef"
            ],
            [
                "605520efe80639b7"
            ],
            [
                "b7b7be8c472944ef"
            ],
            [
                "b7b7be8c472944ef"
            ],
            [
                "27e965ce1d77758c"
            ],
            [
                "27e965ce1d77758c"
            ],
            [
                "d6d37b9a5ea9ea86"
            ],
            [
                "d6d37b9a5ea9ea86"
            ],
            [
                "4a44171a48c91d48"
            ],
            [
                "4a44171a48c91d48"
            ],
            [
                "3f4183c299090b5d"
            ],
            [
                "2eed2ba9d161ded1"
            ]
        ],
        "inputLabels": [
            "From Powershell"
        ],
        "outputLabels": [
            "!init",
            "!radio",
            "!stop",
            "",
            "!status",
            "!update",
            "",
            "!access",
            "",
            "!start",
            "!restart",
            "!refresh",
            "!reboot"
        ],
        "icon": "font-awesome/fa-map-signs",
        "l": false
    },
    {
        "id": "4a44171a48c91d48",
        "type": "function",
        "z": "ef6fcb72f5ddd39c",
        "name": "Start / Restart................",
        "func": "////Initialize Variables\nvar Func = flow.get('Func');\nvar DDC2 = flow.get('DDC2');\n////////////////////////////////////////////////////////////////////////////////////////////////////\nvar ttc = Func.DaysBetween((new Date(msg.data.createdTimestamp)), new Date());\nmsg.ddc2.TTC = ttc\nmsg.ddc2.comment = \"Request Actioned\"\nvar extraP = 'p'\nif(msg.ddc2.requesttype != 'stop') {extraP = ''}\n\nmsg.PS.Server.UpTimeStr = Func.pad(msg.PS.Server.UpTime.Days,2)+ `:`+Func.pad(msg.PS.Server.UpTime.Hours,2)+`:`+Func.pad(msg.PS.Server.UpTime.Minutes,2)+`:`+Func.pad(msg.PS.Server.UpTime.Seconds,2)\n\nif(msg.PS.DCS.IsActive === true) {\n    msg.PS.DCS.RunTimeStr = Func.pad(msg.PS.DCS.RunTime.Days,2)+ `:`+Func.pad(msg.PS.DCS.RunTime.Hours,2)+`:`+Func.pad(msg.PS.DCS.RunTime.Minutes,2)+`:`+Func.pad(msg.PS.DCS.RunTime.Seconds,2)\n    msg.PS.DCS.PriorityStr = Func.GetPriority(msg.PS.DCS.PriorityClass)\n}\nif(msg.PS.SRS.IsActive === true) {\n    msg.PS.SRS.RunTimeStr = Func.pad(msg.PS.SRS.RunTime.Days,2)+ `:`+Func.pad(msg.PS.SRS.RunTime.Hours,2)+`:`+Func.pad(msg.PS.SRS.RunTime.Minutes,2)+`:`+Func.pad(msg.PS.SRS.RunTime.Seconds,2)\n    msg.PS.SRS.PriorityStr = Func.GetPriority(msg.PS.SRS.PriorityClass)\n}\nmsg.ddc2.Notification = DDC2.ServerInfo.ServerID+ ` has `+(Func.Capitalize(msg.ddc2.requesttype))+extraP+`ed the server. The task took `+msg.ddc2.TTC+` to complete.`\n////////////////////////////////////////////////////////////////////////////////////////////////////\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1210,
        "y": 320,
        "wires": [
            [
                "913331e05f9777a8",
                "8bb1acf564135cb3"
            ]
        ],
        "inputLabels": [
            "Post-Whitelist-Check"
        ],
        "outputLabels": [
            "To Powershell"
        ],
        "icon": "node-red/inject.svg"
    },
    {
        "id": "2eed2ba9d161ded1",
        "type": "function",
        "z": "ef6fcb72f5ddd39c",
        "name": "Reboot Post-Processing",
        "func": "////Initialize Variables\nvar Func = flow.get('Func');\nvar DDC2 = flow.get('DDC2');\n////////////////////////////////////////////////////////////////////////////////////////////////////\nvar ttc = Func.DaysBetween((new Date(msg.data.createdTimestamp)), new Date());\nmsg.ddc2.TTC = ttc\nmsg.ddc2.comment = \"Request Actioned\"\nmsg.ddc2.Notification = DDC2.ServerInfo.ServerID+ ` is wondering how you are seeing this message if the server just restarted before it had a chance to send this message. Will wonders never cease! The task took `+msg.ddc2.TTC+` to complete.`\n////////////////////////////////////////////////////////////////////////////////////////////////////\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1210,
        "y": 400,
        "wires": [
            [
                "21ca69177a14da42"
            ]
        ],
        "inputLabels": [
            "Post-Whitelist-Check"
        ],
        "outputLabels": [
            "To Powershell"
        ],
        "icon": "node-red/inject.svg"
    },
    {
        "id": "16d5fa43aaa4e7b0",
        "type": "function",
        "z": "ef6fcb72f5ddd39c",
        "name": "Info Pre-Processing......",
        "func": "var MsgSent = context.get('MsgSent') || 1;\nvar DDC2 = flow.get('DDC2');\nvar Func = flow.get('Func');\nmsg.ddc2.Notification = \"\" //Stops the Notification system from sending out a message.\nmsg.ddc2.comment = \"Cached Response\"\nmsg.ddc2.info = {\n    \"ShowBluPWD\" : DDC2.ServerInfo.ShowBluPWD,\n    \"ShowRedPWD\" : DDC2.ServerInfo.ShowRedPWD,\n    \"ShowSrvPWD\" : DDC2.ServerInfo.ShowSrvPWD,\n    \"ShowLotATC\" : DDC2.ServerInfo.ShowLotATC,\n    \"ShowTACView\" : DDC2.ServerInfo.ShowTACView\n    }\n\nnode.status({fill:\"green\",shape:\"ring\",text: \"IP's misplaced: \"+MsgSent});\nif(msg.channel.id == DDC2.Channel.Admin) {\n//Show everything\n\n//DDC2.AppConfig.DCS.password = \"chickenFucker\"\nmsg.ddc2.info.ShowBluPWD = true\nmsg.ddc2.info.ShowRedPWD = true\nmsg.ddc2.info.ShowSrvPWD = true\nmsg.ddc2.info.ShowLotATC = true\nmsg.ddc2.info.ShowTACView = true\ncontext.set('MsgSent', (MsgSent + 1));\nreturn msg;\n}\n\nif(msg.channel.id == DDC2.Channel.Red) {\n//Set Password to RED\nmsg.ddc2.info.ShowBluPWD = false\ncontext.set('MsgSent', (MsgSent + 1));\nreturn msg;\n}\n\nif(msg.channel.id == DDC2.Channel.Blue) {\n//Set Password to RED\nmsg.ddc2.info.ShowRedPWD = false\ncontext.set('MsgSent', (MsgSent + 1));\nreturn msg;\n}\n\nif(msg.channel.id == DDC2.Channel.Support) {\nmsg.ddc2.info.ShowBluPWD = false\nmsg.ddc2.info.ShowRedPWD = false\ncontext.set('MsgSent', (MsgSent + 1));\nreturn msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1210,
        "y": 1120,
        "wires": [
            [
                "6a9f20cde2467a1d",
                "3ee76f85c91e7444"
            ]
        ],
        "inputLabels": [
            "Post-Whitelist-Check"
        ],
        "outputLabels": [
            "To Discord"
        ],
        "icon": "node-red/inject.svg"
    },
    {
        "id": "154f4ad0c4db4acc",
        "type": "function",
        "z": "ef6fcb72f5ddd39c",
        "name": "Help Enabled",
        "func": "var HelpEnabled = flow.get('DDC2.ServerInfo.ENABLE_HELP');\nif (HelpEnabled) {\n    node.status({fill:\"green\",shape:\"dot\",text:\"Help Enabled\"});\n    }\nelse {\n    node.status({fill:\"green\",shape:\"ring\",text:\"Help Disabled\"});\n    }",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 160,
        "wires": [],
        "icon": "font-awesome/fa-question"
    },
    {
        "id": "8437f3c0ca4b4947",
        "type": "template",
        "z": "ef6fcb72f5ddd39c",
        "name": "Logging",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "```\n         TimeStamp: {{{ddc2.FormattedTime}}}\n         Requestor: {{{author.username}}}\n      Request Type: {{{ddc2.request}}}\n         Responder: {{{flow.DDC2.ServerInfo.ServerID}}}\n           Raw Msg: {{{ddc2.raw}}}\n    RequestChannel: {{{ddc2.RequestChannel}}}\nRequest Channel ID: {{{ddc2.RequestChannelID}}}\n        Request ID: {{{_msgid}}}\n     Authorization: {{{ddc2.access}}}\n          Comments: {{{ddc2.comment}}}{{#ddc2.TTC}}. Time To Complete = {{{ddc2.TTC}}}{{/ddc2.TTC}}\n```",
        "output": "str",
        "x": 216,
        "y": 380,
        "wires": [
            [
                "dac986fcca69bc61"
            ]
        ]
    },
    {
        "id": "1bfc94b90ee1b4cc",
        "type": "function",
        "z": "ef6fcb72f5ddd39c",
        "name": "Log Prep",
        "func": "var DDC2 = flow.get('DDC2');\n//do check if channel.id exisits if not, create it and set to log\nmsg.channel.id = DDC2.Channel.Log;\nmsg.user = null\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 111,
        "y": 380,
        "wires": [
            [
                "8437f3c0ca4b4947"
            ]
        ],
        "icon": "node-red/file-out.svg",
        "l": false
    },
    {
        "id": "9780be32e8f054d4",
        "type": "template",
        "z": "ef6fcb72f5ddd39c",
        "name": "Notifications",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{#TASK_REBOOT}}```{{{TASK_REBOOT}}}```{{/TASK_REBOOT}}\n{{#ddc2.Notification}}```{{{ddc2.Notification}}}```\n{{#ddc2.TCC}}Request completed in {{{ddc2.TCC}}}{{/ddc2.TCC}}{{/ddc2.Notification}}",
        "output": "str",
        "x": 166,
        "y": 260,
        "wires": [
            [
                "368bb9f7209faf5e"
            ]
        ]
    },
    {
        "id": "2cc63499c3c72f16",
        "type": "function",
        "z": "ef6fcb72f5ddd39c",
        "name": "Functions",
        "func": "// @ts-nocheck\nFunc = {\n    Sleep: function (sec) {\n        //To use type \" await Func.Sleep(time in seconds to sleep)\n        return new Promise(resolve => setTimeout(resolve, sec * 1000))\n    },\n    GetWeatherName: function (PresetSTR) {\n        var returnSTR = PresetSTR\n        if (PresetSTR == \"Preset1\") { returnSTR = \"Light Scattered Cloud\" }\n        if (PresetSTR == \"Preset2\") { returnSTR = \"Light Scattered Cloud\" }\n        if (PresetSTR == \"Preset3\") { returnSTR = \"High Scattered Cloud\" }\n        if (PresetSTR == \"Preset4\") { returnSTR = \"High Scattered Cloud\" }\n        if (PresetSTR == \"Preset5\") { returnSTR = \"Scattered Cloud\" }\n        if (PresetSTR == \"Preset6\") { returnSTR = \"Scattered Cloud\" }\n        if (PresetSTR == \"Preset7\") { returnSTR = \"Scattered Cloud\" }\n        if (PresetSTR == \"Preset8\") { returnSTR = \"High Scattered Cloud\" }\n        if (PresetSTR == \"Preset9\") { returnSTR = \"Scattered Cloud\" }\n        if (PresetSTR == \"Preset10\") { returnSTR = \"Scattered Cloud\" }\n        if (PresetSTR == \"Preset11\") { returnSTR = \"Scattered Cloud\" }\n        if (PresetSTR == \"Preset12\") { returnSTR = \"Scattered Cloud\" }\n        if (PresetSTR == \"Preset13\") { returnSTR = \"Broken Cloud\" }\n        if (PresetSTR == \"Preset14\") { returnSTR = \"Broken Cloud\" }\n        if (PresetSTR == \"Preset15\") { returnSTR = \"Broken Cloud\" }\n        if (PresetSTR == \"Preset16\") { returnSTR = \"Broken Cloud\" }\n        if (PresetSTR == \"Preset17\") { returnSTR = \"Broken Cloud\" }\n        if (PresetSTR == \"Preset18\") { returnSTR = \"Broken Cloud\" }\n        if (PresetSTR == \"Preset19\") { returnSTR = \"Broken Cloud\" }\n        if (PresetSTR == \"Preset20\") { returnSTR = \"Broken Cloud\" }\n        if (PresetSTR == \"Preset21\") { returnSTR = \"Overcast\" }\n        if (PresetSTR == \"Preset22\") { returnSTR = \"Overcast\" }\n        if (PresetSTR == \"Preset23\") { returnSTR = \"Overcast\" }\n        if (PresetSTR == \"Preset24\") { returnSTR = \"Overcast\" }\n        if (PresetSTR == \"Preset25\") { returnSTR = \"Overcast\" }\n        if (PresetSTR == \"Preset26\") { returnSTR = \"Overcast\" }\n        if (PresetSTR == \"RainyPreset1\") { returnSTR = \"Overcast with Rain\" }\n        if (PresetSTR == \"RainyPreset2\") { returnSTR = \"Overcast with Rain\" }\n        if (PresetSTR == \"RainyPreset3\") { returnSTR = \"Overcast with Rain\" }\n        return returnSTR\n    },\n    DeathNotice: function () {\n        const deathnotice = [\n            \"is dead\",  \t\t\t\t\t\t\t\t\t//00\n            \"has left this mortal coil\",                    //01\n            \"has given up the ghost\",                       //02\n            \"has misplaced his everything\",                 //03\n            \"didn`t want this life anyway\",                 //04\n            \"succumbed to their lack of flying ability\",    //05\n            \"bought it\",\t\t\t\t\t                //06\n            \"bought the farm\",\t\t\t                    //07\n            \"clusterbomb... probably\",                      //08\n            \"gave up the Ghost\",\t\t\t                //09\n            \"cashed in their chips\",\t                    //10\n            \"no longer with us\",                    \t\t//11\n            \"kicked the bucket\",\t\t                    //12\n            \"has become immortally challenged\",             //13\n            \"has quit the Barbershop quartet\",\t\t\t\t//14\n            \"has become worm food\",             \t\t\t//15\n            \"has carked it\",        \t\t\t\t\t\t//16\n            \"has bitten the dust\",\t                        //17\n            \"ended their flying career with a bang\",        //18\n            \"now resembles a pink mist\", \t\t\t\t\t//19\n            \"will not be able to clear his bar tab\",\t\t//20\n            \"has fallen victim to lack of flying ability\",  //21\n            \"is now taking a dirt nap\",\t\t\t\t\t\t//22\n            \"has finally written a cheque they cant cash\",  //23\n            \"has been put to bed with a shovel\", \t\t\t//24\n            \"is now pushing up daisies\", \t\t\t\t\t//25\n            \"has become one with the local country side\",\t//26\n            \"will miss their next dentists appointment\", \t//27\n            \"is going home in a pine box, well bits of them will be\",\t\t//28\n            \"has failed the parking of his aircraft part of the assessment\"\t//29\n        ]\n        var RandomlySelected = Math.floor(Math.random() * deathnotice.length)\n        return deathnotice[RandomlySelected];\n    },\n    WreckNotice: function () {\n        const wrecknotice = [\n            \"is a smoldering wreck\",\t\t                //00\n            \"resembles your mothers cooking, a hot mess..\", //01\n            \"resembles something my son drew..\",\t\t\t//02\n            \"is now a fine example of rapid hole digging \", //03\n            \"is now a beacon of hope for the enemy\", \t\t//04\n            \"shows where their skill ended\", \t\t\t\t//05\n            \"is going to take some explaining to the CO\",   //06\n            \"has flown its last flight\",\t                //07\n            \"is now scrap metal\",\t                \t\t//09\n            \"is now a bonfire\",\t                \t\t\t//10\n            \"is a smoking hole\",\t\t\t\t\t\t\t//11\n            \"is now little more than bits of aircraft in a field\"  //LAST\n        ]\n        var RandomlySelected = Math.floor(Math.random() * wrecknotice.length)\n        return wrecknotice[RandomlySelected];\n    },\n    MagicalWeaponNameGenerator: function () {\n        const weaponNameArray = [\n            \"piece of Lego in the shape of a ducks penis\",  //00\n            \"angry words from a step parent\",               //01\n            \"hammer to the testicles\",                      //02\n            \"piece of unicorn shit\",                        //03\n            \"lopsided paper aeroplane\",                     //04\n            \"partial set of dirty Bob the Builder cutlery\", //05\n            \"heshen bag fill of rusty nails\",               //06\n            \"cat suffering from diarrhea\",                  //07\n            \"clusterbomb... probably\",                      //08\n            \"promise of a poor Yelp review\",                //09\n            \"spate of vicious rhetoric\",                    //10\n            \"middle-aged postal worker\",                    //11\n            \"Twitter rant from their mum\",                  //12\n            \"swift kick to the balls\",                      //13\n            \"Vicar who prefers to go by the name of Veronica McButtocks on the weekend\",   //14\n            \"12 hour spectacle of a German pornstar naming peoples arseholes\",             //15\n            \"musical number from Sound of Music translated and sung by Wookies\",           //16\n            \"poem written by Hitlers mum before she had given birth\",                      //17\n            \"4 hour recital of their grandmothers 50 Shades of Grey fan-fiction\",          //18\n            \"tutorial on how to code in LUA\",                                              //19\n            \"head first rectal exam\",                                                      //20\n            \"something, DCS has NFI what it was\",                                          //21\n            \"Bronie\",                                                                      //22\n            \"Trekkie who actually likes Star Trek Discovery\",                              //23\n            \"Twighlight fan who was mortified that Bella didnt end up with Edward\"         //24\n        ]\n        var RandomlySelected = Math.floor(Math.random() * weaponNameArray.length)\n        return weaponNameArray[RandomlySelected];\n    },\n    GetAircraftName: function (aircraftstring) {\n        var returnSTR = aircraftstring\n        if (returnSTR == \"A-10A\") { returnSTR = \"A-10A Thunderbolt II\" }\n        if (returnSTR == \"A-10C\") { returnSTR = \"A-10C Warthog\" }\n        if (returnSTR == \"A-10C_2\") { returnSTR = \"A-10C II Tank Killer\" }\n        if (returnSTR == \"AH-64D_BLK_II\") { returnSTR = \"AH-64D Apache\" }\n        if (returnSTR == \"AJS37\") { returnSTR = \"AJS37 Viggen\" }\n        if (returnSTR == \"AV8BNA\") { returnSTR = \"AV-8B Harrier\" }\n        if (returnSTR == \"F-5E\") { returnSTR = \"F-5E Tiger II\" }\n        if (returnSTR == \"F-14B\") { returnSTR = \"F-14B Tomcat\" }\n        if (returnSTR == \"F-16C_50\") { returnSTR = \"F-16C Viper\" }\n        if (returnSTR == \"FA-18C_hornet\") { returnSTR = \"FA-18C Hornet\" }\n        if (returnSTR == \"Ka-50\") { returnSTR = \"Uh-1H Blackshark\" }\n        if (returnSTR == \"M-2000C\") { returnSTR = \"Mirage 2000C\" }\n        if (returnSTR == \"Mi-8MTV2\") { returnSTR = \"Mi-8MTV2 Hip\" }\n        if (returnSTR == \"Mi-24P\") { returnSTR = \"Mi-24P Hind\" }\n        if (returnSTR == \"MiG-15bis\") { returnSTR = \"MiG-15bis Fagot\" }\n        if (returnSTR == \"MIG-21bis\") { returnSTR = \"MIG-21bis Fishbed\" }\n        if (returnSTR == \"Uh-1H\") { returnSTR = \"Uh-1H Huey\" }\n        return returnSTR\n    },\n    GrantAccess: function (haystack, arr) {\n        return arr.some(function (v) {\n            return haystack.indexOf(v) >= 0;\n        })\n    },\n    pad: function (num, size) {\n        var s = num + \"\";\n        while (s.length < size) s = \"0\" + s;\n        return s;\n    },\n    FormatDateTime: function (local_dateVar, langCode) {\n        var date = new Date(local_dateVar * 1000)\n        var day = date.toLocaleString(langCode, { day: '2-digit' });   // DD\n        day = Func.pad(day, 2)\n        var month = date.toLocaleString(langCode, { month: 'short' }); // MMM\n        var year = date.toLocaleString(langCode, { year: 'numeric' }); // YYYY\n        var hour = date.toLocaleString(langCode, { hour: '2-digit', hour12: false }); // HH)\n        if (hour == 24) { hour = 0 }\n        hour = Func.pad(hour, 2)\n        var minute = date.toLocaleString(langCode, { minute: '2-digit' }); // MM)\n        minute = Func.pad(minute, 2)\n        var second = date.toLocaleString(langCode, { second: '2-digit' }); // SS)\n        second = Func.pad(second, 2)\n        return `${day} ${month} ${year}, ${hour}:${minute}:${second}`;\n    },\n    DaysBetween: function (date1, date2) {\n        var one_day = 1000 * 60 * 60 * 24;\n        var date1_ms = date1.getTime();\n        var date2_ms = date2.getTime();\n        var difference_ms = date2_ms - date1_ms;\n        difference_ms = Math.round(difference_ms / 1000, 3);\n        var mseconds = difference_ms % 1000;\n        var seconds = Math.floor(difference_ms % 60);\n        difference_ms = difference_ms / 60;\n        var minutes = Math.floor(difference_ms % 60);\n        difference_ms = difference_ms / 60;\n        var hours = Math.floor(difference_ms % 24);\n        var days = Math.floor(difference_ms / 24);\n        return Func.pad(minutes, 2) + ':' + Func.pad(seconds, 2) + '.' + Func.pad(mseconds, 3);\n    },\n    GetPriority: function (priority) {\n        var PriorityTable = {\n            64: \"Low\",\n            16384: \"Below Normal\",\n            32: \"Normal\",\n            32768: \"Above Normal\",\n            128: \"High\",\n            256: \"Realtime\"\n        };\n        return (PriorityTable[priority])\n    },\n    Capitalize: function (str) {\n        const capitalized = str.charAt(0).toUpperCase() + str.slice(1);\n        return capitalized;\n    },\n    GetCoalition: function (coal) {\n        var CoalitionTable = {\n            0: \"Spectators\",\n            1: \"Red Forces\",\n            2: \"Blue Forces\"\n        };\n        return (CoalitionTable[coal])\n    },\n    ValidateIPaddress: function (IPAddr) {\n        return /^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$|^(([a-zA-Z]|[a-zA-Z][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z]|[A-Za-z][A-Za-z0-9\\-]*[A-Za-z0-9])$|^\\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(%.+)?\\s*$/.test(IPAddr);\n    },\n    TimeOfDay: function (seconds) {\n        const DaySeconds = seconds % 86400\n        const format = val => `0${Math.floor(val)}`.slice(-2)\n        const hours = DaySeconds / 3600\n        const minutes = (DaySeconds % 3600) / 60\n        return [hours, minutes, DaySeconds % 60].map(format).join(':')\n    },\n    FormatTime: function (seconds) {\n        const format = val => `0${Math.floor(val)}`.slice(-2)\n        const hours = seconds / 3600\n        const minutes = (seconds % 3600) / 60\n        return [hours, minutes, seconds % 60].map(format).join(':')\n    },\n    TimeDelta: function (d1, d2, OutputWords, ShowMS) {\n        // TimeDelta(<date1>,<date2>,<output words true/false> , <show milliseconds true/false>)\n        // Example: var td = TimeDelta(<date1>,<date2>,<output words true/false> , <show milliseconds true/false>)\n        // Options for OutputType are \"WORDS\" and \"NUMB\" (Technically anything other than \"WORDS\" will yield the numbers output)\n        // WORDS will output something like 12 hours 53 minutes 02 seconds\n        // NUMBERS will output 12:53:02\n        // The output is smart, it will only output the values it needs, so you will not get 00:00:00:01 for 1 second.\n        const d = \" day \"\n        const d_s = \" days \"\n        const h = \" hour \"\n        const h_s = \" hours \"\n        const m = \" minute \"\n        const m_s = \" minutes \"\n        const s = \" second \"\n        const s_s = \" seconds \"\n        const ms = \" millisecond \"\n        const ms_s = \" milliseconds \"\n        const day_ms = 86400000 // Milliseconds in 1 day\n        const hour_ms = 3600000 // Milliseconds in 1 hour\n        const min_ms = 60000 // Milliseconds in 1 minute\n        const sec_ms = 1000 // Milliseconds in 1 second\n        //////////////////////////////////////////////////////////////\n        var d1_ms = new Date(d1).getTime(); //Less recent time\n        var d2_ms = new Date(d2).getTime(); //More recent time\n        var OutputWords = OutputWords\n        var ShowMS = ShowMS\n        //////////////////////////////////////////////////////////////\n        var delta_ms = Math.abs(d2_ms - d1_ms);  //Delta in ms\n        //////////////////////////////////////////////////////////////\n        var days = Func.pad(Math.floor(delta_ms / day_ms), 2)\n        var hours = Func.pad(Math.floor((delta_ms % day_ms) / hour_ms), 2)\n        var mins = Func.pad(Math.floor((delta_ms % hour_ms) / min_ms), 2)\n        var secs = Func.pad(Math.floor((delta_ms % min_ms) / sec_ms), 2)\n        var mils = Func.pad(Math.floor(delta_ms % sec_ms), 3)\n        //////////////////////////////////////////////////////////////\n        var rtn = \"\"\n        if (OutputWords) {\n            if (days <= 0) { days = 0 } else {\n                if (days == 1) {\n                    rtn = days + d\n                } else {\n                    rtn = days + d_s\n                }\n            }\n            if (hours <= 0) { hours = 0 } else {\n                if (hours == 1) {\n                    rtn = rtn + hours + h\n                } else {\n                    rtn = rtn + hours + h_s\n                }\n            }\n            if (mins <= 0) { mins = 0 } else {\n                if (mins == 1) {\n                    rtn = rtn + mins + m\n                } else {\n                    rtn = rtn + mins + m_s\n                }\n            }\n            if (secs <= 0) { secs = 0 } else {\n                if (secs == 1) {\n                    rtn = rtn + secs + s\n                } else {\n                    rtn = rtn + secs + s_s\n                }\n            }\n            if (ShowMS) {\n                if (mils <= 0) { mils = 0 } else {\n                    if (mils == 1) {\n                        rtn = rtn + mils + ms\n                    } else {\n                        rtn = rtn + mils + ms_s\n                    }\n                }\n            }\n        } else {\n            rtn = [days, hours, mins, secs].join(':')\n            if (days <= 0) { rtn = [hours, mins, secs].join(':') }\n            if (hours <= 0) { rtn = [mins, secs].join(':') }\n            if (ShowMS) { rtn = [rtn, mils].join('.') }\n        }\n        return rtn\n    },\n    genPassword: function (passwordLength) {\n        //var chars = \"0123456789abcdefghijklmnopqrstuvwxyz!@#$%^&*()ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n        var chars = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n        if (typeof passwordLength === 'undefined') {\n            passwordLength = 8;\n        }\n        passwordLength--;\n        var password = \"\";\n        for (var i = 0; i <= passwordLength; i++) {\n            var randomNumber = Math.floor(Math.random() * chars.length);\n            password += chars.substring(randomNumber, randomNumber + 1);\n        }\n        return password\n    }\n}\nflow.set('Func', Func);\n//global.set('Func', Func);\nnode.status({\n    fill: \"green\",\n    shape: \"dot\",\n    text: \"Functions Loaded\"\n});",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 540,
        "wires": []
    },
    {
        "id": "74e5fd8b292d6511",
        "type": "switch",
        "z": "ef6fcb72f5ddd39c",
        "name": "Pre-Processing Filter",
        "property": "ddc2.requesttype",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "start",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "stop",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "restart",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "status",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "update",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "access",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "reboot",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "refresh",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "radio",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ports",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "config",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "version",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "info",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "support",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "help",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "test",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "acclink",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "chat",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 18,
        "x": 945,
        "y": 740,
        "wires": [
            [
                "7bf199a9c3a90add"
            ],
            [
                "4164c9e8b336f140"
            ],
            [
                "7bf199a9c3a90add"
            ],
            [
                "7bf199a9c3a90add"
            ],
            [
                "f4b8b4c23bc0bac0"
            ],
            [
                "6dc4f89edae24f43"
            ],
            [
                "b7dd224c32232af5"
            ],
            [
                "c2cfda94142ef7bc"
            ],
            [
                "b3b64344821f82f0"
            ],
            [
                "ef2c63f069d29e65"
            ],
            [
                "6db715ef21ba58d0"
            ],
            [
                "d9abe225f1df2565"
            ],
            [
                "16d5fa43aaa4e7b0"
            ],
            [
                "b659314cecec8927"
            ],
            [
                "bf2e1f4ce3c3d24b"
            ],
            [
                "0e7f40e86d8a4f30"
            ],
            [
                "1d36b4e74fe844ce"
            ],
            [
                "54475636810ad346"
            ]
        ],
        "inputLabels": [
            "Discord Message"
        ],
        "outputLabels": [
            "!start",
            "!stop",
            "!restart",
            "!status",
            "!update",
            "!access",
            "!reboot",
            "!refresh",
            "!radio",
            "!ports",
            "!config",
            "!version",
            "!info",
            "!support",
            "!help",
            "",
            "",
            ""
        ],
        "icon": "font-awesome/fa-map-signs",
        "l": false
    },
    {
        "id": "6a9f20cde2467a1d",
        "type": "template",
        "z": "ef6fcb72f5ddd39c",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "```\n         -=:# DCS Server Connection Information #:=-\n       \n           InGame Server Name : {{{flow.DDC2.AppConfig.DCS.name}}}\n           \n    DCS Direct Connect String : {{{flow.DDC2.ServerInfo.ConnectionAdrr}}}:{{{flow.DDC2.AppConfig.DCS.Port}}}{{#ddc2.info.ShowSrvPWD}}{{#flow.DDC2.AppConfig.DCS.password}}\n          DCS Server Password : {{{flow.DDC2.AppConfig.DCS.password}}}{{/flow.DDC2.AppConfig.DCS.password}}{{/ddc2.info.ShowSrvPWD}}{{#flow.DDC2.AppConfig.LotATC.Installed}}{{#ddc2.info.ShowLotATC}}\n \n     LotATC Connection String : {{{flow.DDC2.ServerInfo.ConnectionAdrr}}}:{{{flow.DDC2.AppConfig.LotATC.Port}}}{{#ddc2.info.ShowBluPWD}}{{#flow.DDC2.AppConfig.LotATC.blue_password}}\n       BluFOR LotATC Password : {{{flow.DDC2.AppConfig.LotATC.blue_password}}}{{/flow.DDC2.AppConfig.LotATC.blue_password}}{{/ddc2.info.ShowBluPWD}}{{#ddc2.info.ShowRedPWD}}{{#flow.DDC2.AppConfig.LotATC.red_password}}\n       RedFOR LotATC Password : {{{flow.DDC2.AppConfig.LotATC.red_password}}}{{/flow.DDC2.AppConfig.LotATC.red_password}}{{/ddc2.info.ShowRedPWD}}{{/ddc2.info.ShowLotATC}}{{/flow.DDC2.AppConfig.LotATC.Installed}}{{#flow.DDC2.AppConfig.SRS.Installed}}\n                  \n        SRS Connection String : {{{flow.DDC2.ServerInfo.ConnectionAdrr}}}:{{{flow.DDC2.AppConfig.SRS.Port}}}{{#ddc2.info.ShowBluPWD}}{{#flow.DDC2.AppConfig.SRS.EXTERNAL_AWACS_MODE_BLUE_PASSWORD}}\n         BluFOR AWACS Password: {{{flow.DDC2.AppConfig.SRS.EXTERNAL_AWACS_MODE_BLUE_PASSWORD}}}{{/flow.DDC2.AppConfig.SRS.EXTERNAL_AWACS_MODE_BLUE_PASSWORD}}{{/ddc2.info.ShowBluPWD}}{{#ddc2.info.ShowRedPWD}}{{#flow.DDC2.AppConfig.SRS.EXTERNAL_AWACS_MODE_RED_PASSWORD}}\n         RedFOR AWACS Password: {{{flow.DDC2.AppConfig.SRS.EXTERNAL_AWACS_MODE_RED_PASSWORD}}}{{/flow.DDC2.AppConfig.SRS.EXTERNAL_AWACS_MODE_RED_PASSWORD}}{{/ddc2.info.ShowRedPWD}}{{/flow.DDC2.AppConfig.SRS.Installed}}{{#flow.DDC2.AppConfig.Tacview.Installed}}{{#ddc2.info.ShowTACView}}\n    \n    TACView Connection String : {{{flow.DDC2.ServerInfo.ConnectionAdrr}}}:{{{flow.DDC2.AppConfig.Tacview.tacviewRealTimeTelemetryPort}}}{{#ddc2.info.ShowSrvPWD}}{{#flow.DDC2.AppConfig.Tacview.tacviewClientTelemetryPassword}}\n   TACView Telemetry Password : {{{flow.DDC2.AppConfig.Tacview.tacviewClientTelemetryPassword}}}{{/flow.DDC2.AppConfig.Tacview.tacviewClientTelemetryPassword}}{{/ddc2.info.ShowSrvPWD}}{{/ddc2.info.ShowTACView}}{{/flow.DDC2.AppConfig.Tacview.Installed}}\n                  \n                 -=:# Software Versions #:=-\n\n                  DCS Version : {{{flow.DDC2.AppConfig.DCS.Version}}}{{#flow.DDC2.AppConfig.LotATC.Installed}}\n               LotATC Version : {{{flow.DDC2.AppConfig.LotATC.Version}}}{{/flow.DDC2.AppConfig.LotATC.Installed}}{{#flow.DDC2.AppConfig.SRS.Installed}}\n                  SRS Version : {{{flow.DDC2.AppConfig.SRS.Version}}}{{/flow.DDC2.AppConfig.SRS.Installed}}{{#flow.DDC2.AppConfig.Tacview.Installed}}\n              TACView Version : {{{flow.DDC2.AppConfig.Tacview.Version}}}{{/flow.DDC2.AppConfig.Tacview.Installed}}\n                  \n```",
        "output": "str",
        "x": 1461,
        "y": 1120,
        "wires": [
            [
                "c6d0f8143b48e89b"
            ]
        ],
        "l": false
    },
    {
        "id": "b659314cecec8927",
        "type": "function",
        "z": "ef6fcb72f5ddd39c",
        "name": "Support Pre-Processing",
        "func": "var MsgSent = context.get('MsgSent') || 1;\nvar DDC2 = flow.get('DDC2');\nvar Func = flow.get('Func');\nmsg.ddc2.Notification = \"\" //Stops the Notification system from sending out a message.\nmsg.ddc2.comment = \"Cached Response\"\nmsg.ddc2.support = {\n\n    \"RightPlace\"        : false,\n    \"WrongPlace\"        : true\n    }\n    \nif(msg.channel.id == DDC2.Channel.Support) {\n    msg.ddc2.support.RightPlace = true\n    msg.ddc2.support.WrongPlace = false\n}\n\nnode.status({fill:\"green\",shape:\"ring\",text: \"Sent: \"+MsgSent});\ncontext.set('MsgSent', (MsgSent + 1));\nreturn msg;\n\n/*\n    \"SupportByMember\"   : DDC2.ServerInfo.Support.SupportByMember,\n    \"SupportBy\"         : DDC2.ServerInfo.Support.SupportBy,\n    \"SupportContactID\"  : DDC2.ServerInfo.Support.SupportContactID,\n    \"SupportContactTXT\" : DDC2.ServerInfo.Support.SupportContactTXT,\n    \"SupportTimeTXT\"    : DDC2.ServerInfo.Support.SupportTimeTXT,\n*/\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1210,
        "y": 1180,
        "wires": [
            [
                "a81b8852e5021b70",
                "3ee76f85c91e7444"
            ]
        ],
        "inputLabels": [
            "Post-Whitelist-Check"
        ],
        "outputLabels": [
            "To Discord"
        ],
        "icon": "node-red/inject.svg"
    },
    {
        "id": "5d4f30f66b3bac0e",
        "type": "link in",
        "z": "ef6fcb72f5ddd39c",
        "name": "LOG & NOTIFICATION",
        "links": [
            "3ee76f85c91e7444",
            "f72d0f6cfdae76e0",
            "21ca69177a14da42"
        ],
        "x": 51,
        "y": 320,
        "wires": [
            [
                "9780be32e8f054d4",
                "1bfc94b90ee1b4cc"
            ]
        ]
    },
    {
        "id": "7967b79de75d2d39",
        "type": "link out",
        "z": "ef6fcb72f5ddd39c",
        "name": "Load-Config",
        "links": [
            "91edae5067fc2fa6"
        ],
        "x": 905,
        "y": 420,
        "wires": []
    },
    {
        "id": "91edae5067fc2fa6",
        "type": "link in",
        "z": "ef6fcb72f5ddd39c",
        "name": "PowerShell Execution",
        "links": [
            "7967b79de75d2d39",
            "386b275656409728",
            "06d43204b6bbaf6f",
            "a0a68dd84ed276e7",
            "8e014b1b73adaf60"
        ],
        "x": 684,
        "y": 200,
        "wires": [
            [
                "abe5c7990a1f6278"
            ]
        ]
    },
    {
        "id": "1eec40505b266e42",
        "type": "link in",
        "z": "ef6fcb72f5ddd39c",
        "name": "LOG ONLY",
        "links": [
            "171fd89ac834f41f",
            "8bb1acf564135cb3",
            "d6fad1fb0f8c96a8"
        ],
        "x": 51,
        "y": 380,
        "wires": [
            [
                "1bfc94b90ee1b4cc"
            ]
        ]
    },
    {
        "id": "bf2e1f4ce3c3d24b",
        "type": "function",
        "z": "ef6fcb72f5ddd39c",
        "name": "Help Pre-Processing....",
        "func": "var MsgSent = context.get('MsgSent') || 1;\nvar DDC2 = flow.get('DDC2');\nvar Func = flow.get('Func');\nmsg.ddc2.Notification = \"\" //Stops the Notification system from sending out a message.\nmsg.ddc2.comment = \"Cached Response\"\nvar msglow = msg.ddc2.raw.toLowerCase();\nvar splitmsg = msglow.split(\" \",3);\nvar HelpCommand = splitmsg[1];\nif (HelpCommand == DDC2.ServerInfo.ServerID.toLowerCase()) {HelpCommand = splitmsg[2]}\nvar Test   = false\nvar Radio   = false\nvar Start   = false\nvar Stop    = false\nvar Restart = false\nvar Status  = false\nvar Update  = false\nvar Access  = false\nvar Reboot  = false\nvar Refresh = false\nvar Ports   = false\nvar Config  = false\nvar Version = false\nvar Info    = false\nvar Support = false\nvar Help    = false\n\nif (HelpCommand == \"test\") {Test = true}\nif (HelpCommand == \"radio\") {Radio = true}\nif (HelpCommand == \"start\") {Start = true}\nif (HelpCommand == \"stop\") {Stop = true}\nif (HelpCommand == \"restart\") {Restart = true}\nif (HelpCommand == \"status\") {Status = true}\nif (HelpCommand == \"update\") {Update = true}\nif (HelpCommand == \"access\") {Access = true}\nif (HelpCommand == \"reboot\") {Reboot = true}\nif (HelpCommand == \"refresh\") {Refresh = true}\nif (HelpCommand == \"ports\") {Ports = true}\nif (HelpCommand == \"config\") {Config = true}\nif (HelpCommand == \"version\") {Version = true}\nif (HelpCommand == \"info\") {Info = true}\nif (HelpCommand == \"support\") {Support = true}\nif (HelpCommand == \"help\") {Help = true}\n\nmsg.ddc2.Help = {\n    \"HelpCommand\" : HelpCommand,\n           \"Test\" : Test,\n          \"Radio\" : Radio,\n          \"Start\" : Start,\n           \"Stop\" : Stop,\n        \"Restart\" : Restart,\n         \"Status\" : Status,\n         \"Update\" : Update,\n         \"Access\" : Access,\n         \"Reboot\" : Reboot,\n        \"Refresh\" : Refresh,\n          \"Ports\" : Ports,\n         \"Config\" : Config,\n        \"Version\" : Version,\n           \"Info\" : Info,\n        \"Support\" : Support,\n           \"Help\" : Help\n    }\n\nnode.status({fill:\"green\",shape:\"ring\",text: \"N00bs empowered: \"+MsgSent});\ncontext.set('MsgSent', (MsgSent + 1));\n\nif(msg.ddc2.Help.Test) {return msg}\nif(msg.ddc2.Help.Radio) {return msg}\nif(msg.ddc2.Help.Start) {return msg}\nif(msg.ddc2.Help.Stop) {return msg}\nif(msg.ddc2.Help.Restart) {return msg}\nif(msg.ddc2.Help.Status) {return msg}\nif(msg.ddc2.Help.Update) {return msg}\nif(msg.ddc2.Help.Access) {return msg}\nif(msg.ddc2.Help.Reboot) {return msg}\nif(msg.ddc2.Help.Refresh) {return msg}\nif(msg.ddc2.Help.Ports) {return msg}\nif(msg.ddc2.Help.Config) {return msg}\nif(msg.ddc2.Help.Version) {return msg}\nif(msg.ddc2.Help.Info) {return msg}\nif(msg.ddc2.Help.Support) {return msg}\nif(msg.ddc2.Help.Help) {return msg}\nif (typeof msg.ddc2.Help.HelpCommand === 'undefined') {    \n    msg.ddc2.Help.HelpCommand = \"help\"\n    msg.ddc2.Help.Help = true\n    return msg\n}\nmsg.ddc2.Help.HelpCommand = \"help\"\nmsg.ddc2.Help.Help = true\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1210,
        "y": 1240,
        "wires": [
            [
                "1143af05eb96b73b",
                "3ee76f85c91e7444"
            ]
        ],
        "inputLabels": [
            "Post-Whitelist-Check"
        ],
        "outputLabels": [
            "To Discord"
        ],
        "icon": "node-red/inject.svg"
    },
    {
        "id": "a81b8852e5021b70",
        "type": "template",
        "z": "ef6fcb72f5ddd39c",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "\n{{#ddc2.support.RightPlace}}\n{{#flow.DDC2.ServerInfo.Support.SupportByMember}}<@{{{flow.DDC2.ServerInfo.Support.SupportContactID}}}>{{/flow.DDC2.ServerInfo.Support.SupportByMember}}\n```\nHi {{author.username}}, looks like you are in the right place for some support for our DCS server {{flow.DDC2.ServerInfo.ServerID}}. Please post a detailed description of the issue you are experiencing here and someone will get back to you. {{flow.DDC2.ServerInfo.Support.SupportContactTXT}} {{flow.DDC2.ServerInfo.Support.SupportTimeTXT}}\n```\n{{/ddc2.support.RightPlace}}\n{{#ddc2.support.WrongPlace}}\n```\nHi {{author.username}}, looks like you are looking for some support for our DCS server {{flow.DDC2.ServerInfo.ServerID}}. {{flow.DDC2.ServerInfo.Support.SupportContactTXT}} {{flow.DDC2.ServerInfo.Support.SupportTimeTXT}}\n```\n{{/ddc2.support.WrongPlace}}\n\n",
        "output": "str",
        "x": 1461,
        "y": 1180,
        "wires": [
            [
                "c6d0f8143b48e89b"
            ]
        ],
        "l": false
    },
    {
        "id": "1143af05eb96b73b",
        "type": "template",
        "z": "ef6fcb72f5ddd39c",
        "name": "Info Formatting",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Your help request is being actioned by {{{flow.DDC2.ServerInfo.ServerID}}}...\n```\n{{#ddc2.Help.Help}}\nWelcome to the DDC2 help system. This version of DDC2 has the following command available:\n\n       help        : Will display this dialogue\n       test        : All DDC2 servers listening in a channel respond to show connectivity.\n       start       : Starts DCS and supporting applications\n       stop        : Stops DCS and supporting applications\n       restart     : Restarts DCS and supporting applications\n       status      : Returns information on the status of the server\n       update      : Updates DCS and supporting applications (excluding TacView currently)\n       access      : Enables Console access to the server by modifying firewall rules\n       reboot      : Reboots the Operating system DDC2 and DCS reside on\n       refresh     : Refreshs the configuration from the DDC2 config files\n       radio       : Converts discord messages to audio and transmits them through SRS\n       ports       : Displays all the ports set in the configuration files for DCS and supporting applications\n       config      : Displays configuration data for the server and applications\n       version     : Displays the versions of DCS and supporting applications\n       info        : Displays connection information and passwords for the server\n       support     : Displays support information for your server / community\n\nData will be displayed in a similar way as below.\n#############################################\n           Command : Help\n\n       Description : Shows Help Dialogue, make sure you exclude the '!' when specifying the command you need help with.\n\nExecution Duration : Instant, Cached Response\n\n            Useage : {{{flow.DDC2.ServerInfo.CommandPrefix}}}help\n\t\t\tUseage : {{{flow.DDC2.ServerInfo.CommandPrefix}}}help command\n\n         Example 1 : {{{flow.DDC2.ServerInfo.CommandPrefix}}}help\n         Example 2 : {{{flow.DDC2.ServerInfo.CommandPrefix}}}help start\n         Example 3 : {{{flow.DDC2.ServerInfo.CommandPrefix}}}help access\n#############################################\n{{/ddc2.Help.Help}}{{#ddc2.Help.Test}}\n#############################################\n           Command : Test\n   \n       Description : Test is used to validate communications between DDC2 instances and Discord. \n\nExecution Duration : Instant, Cached Response\n \n            Useage : {{{flow.DDC2.ServerInfo.CommandPrefix}}}test\n            \n           Example : {{{flow.DDC2.ServerInfo.CommandPrefix}}}test\n#############################################\n{{/ddc2.Help.Test}}{{#ddc2.Help.Start}}\n#############################################\n           Command : Start\n   \n       Description : Start command is used to start DCS and the supporting application processes. \n\nExecution Duration : Approximately 90 seconds depending on your server specifications.\n \n            Useage : {{{flow.DDC2.ServerInfo.CommandPrefix}}}start servername\n        \n           Example : {{{flow.DDC2.ServerInfo.CommandPrefix}}}start ddc2-dev\n#############################################\n{{/ddc2.Help.Start}}{{#ddc2.Help.Stop}}\n#############################################\n           Command : Stop\n   \n       Description : Stop command is used to stop DCS and the supporting application processes. \n\nExecution Duration : Approximately 15 seconds depending on your server specifications.\n\n            Useage : {{{flow.DDC2.ServerInfo.CommandPrefix}}}stop servername process\n\n         Example 1 : {{{flow.DDC2.ServerInfo.CommandPrefix}}}stop ddc2-dev         #Stops DCS & SRS Processes (Default Action)\n         Example 2 : {{{flow.DDC2.ServerInfo.CommandPrefix}}}stop ddc2-dev -dcs    #Stops DCS Process Only\n         Example 3 : {{{flow.DDC2.ServerInfo.CommandPrefix}}}stop ddc2-dev -srs    #Stops SRS Process Only\n         Example 4 : {{{flow.DDC2.ServerInfo.CommandPrefix}}}stop ddc2-dev -game   #Stops DCS & SRS Processes\n         Example 5 : {{{flow.DDC2.ServerInfo.CommandPrefix}}}stop ddc2-dev -update #Stops DCS & SRS & LotATC Update Processes\n         Example 6 : {{{flow.DDC2.ServerInfo.CommandPrefix}}}stop ddc2-dev -all    #Stops All Game and Update Processes\n#############################################\n{{/ddc2.Help.Stop}}{{#ddc2.Help.Restart}}\n#############################################\n           Command : Restart\n   \n       Description : Restart command is used to stop and then start DCS and the supporting application processes. \n\nExecution Duration : Approximately 90 seconds depending on your server specifications.\n \n            Useage : {{{flow.DDC2.ServerInfo.CommandPrefix}}}restart servername\n            \n           Example : {{{flow.DDC2.ServerInfo.CommandPrefix}}}restart ddc2-dev\n#############################################\n{{/ddc2.Help.Restart}}{{#ddc2.Help.Status}}\n#############################################\n           Command : Status\n   \n       Description : Status command returns a message showing the current server system state, data including CPU load, RAM load, Process duration, Process health check and other details.\n\nExecution Duration : Approximately 15 seconds depending on your server specifications.\n \n            Useage : {{{flow.DDC2.ServerInfo.CommandPrefix}}}status servername\n            \n           Example : {{{flow.DDC2.ServerInfo.CommandPrefix}}}status ddc2-dev\n#############################################            \n{{/ddc2.Help.Status}}{{#ddc2.Help.Update}}\n#############################################\n           Command : Update\n   \n       Description : Update command will check if their are DCS or supporting application processes running, if processes are found to be running update will not execute. This was done to stop accidental updating taking place on servers with multiple DCS instances running on them. The update command will respond every 60 seconds with an update on the progress on the updates. \n\nExecution Duration : Time can vary due to internet speed, etc. Responses should begin within 60 seconds.\n \n             Useage: {{{flow.DDC2.ServerInfo.CommandPrefix}}}update servername\n            \n            Example: {{{flow.DDC2.ServerInfo.CommandPrefix}}}update ddc2-dev\n#############################################\n{{/ddc2.Help.Update}}{{#ddc2.Help.Access}}\n#############################################\n           Command : Access\n   \n       Description : Grants Console Access to the Server through modification of firewall rules. If no connection is achieved to the specific IP address within an allotted time the server will remove the firewall rule.\n\nExecution Duration : Less than 15 seconds but will remove the firewall within an alloted time after the connection is no longer detected. (Note, you must know your internet IP address to enter into this command, not your local interface address). Note: Output only displayed in Admin Channel\n \n            Useage : {{{flow.DDC2.ServerInfo.CommandPrefix}}}access servername IPv4Address\n            \n           Example : {{{flow.DDC2.ServerInfo.CommandPrefix}}}access ddc2-dev 254.254.254.254\n#############################################\n{{/ddc2.Help.Access}}{{#ddc2.Help.Reboot}}\n#############################################\n           Command : Reboot\n   \n       Description : Reboot will restart the servers operating system. The server will respond during the DDC2 AutoStart (enabled by default) sequence on successful reboot event.\n\nExecution Duration : It's Windows, could be 20 seconds, could be 30 minutes. Best to go get a cuppa tea and a few cookies.\n \n             Useage : {{{flow.DDC2.ServerInfo.CommandPrefix}}}reboot servername\n            \n            Example : {{{flow.DDC2.ServerInfo.CommandPrefix}}}reboot ddc2-dev\n#############################################\n{{/ddc2.Help.Reboot}}{{#ddc2.Help.Refresh}}\n#############################################\n           Command : Refresh\n   \n       Description : Refresh re-reads the ddc2 configuration files and loads the new configuration into Node-Red for use by the DDC2 flow. Great command for tweaking your server configuration without the need to re-deploy the Node-Red Flow.\n\nExecution Duration : Approximately 3 seconds\n \n            Useage : {{{flow.DDC2.ServerInfo.CommandPrefix}}}refresh servername\n            \n           Example : {{{flow.DDC2.ServerInfo.CommandPrefix}}}refresh ddc2-dev\n#############################################\n{{/ddc2.Help.Refresh}}{{#ddc2.Help.Ports}}\n#############################################\n           Command : Ports\n   \n       Description : Ports displays all the server ports from DCS and supporting application configuration files.\n       \n              Note : Output only displayed in Admin Channel due to the sensitivity of the data provided.\n\nExecution Duration : Instant, Cached Response\n \n            Useage : {{{flow.DDC2.ServerInfo.CommandPrefix}}}ports servername\n            \n           Example : {{{flow.DDC2.ServerInfo.CommandPrefix}}}ports ddc2-dev\n#############################################\n{{/ddc2.Help.Ports}}{{#ddc2.Help.Config}}\n#############################################\n           Command : Config\n   \n       Description : Config displays configuration settings in . \n \nValid Applications : dcs  # DCS\n                     srs  # SRS\n                     lot  # LotATC\n                     tac  # TacView\n                     ddc2 # DDC2\n \n              Note : Output only displayed in Admin Channel due to the sensitivity of the data provided.\n\nExecution Duration : Instant, Cached Response\n \n            Useage : {{{flow.DDC2.ServerInfo.CommandPrefix}}}config servername application\n            \n         Example 1 : {{{flow.DDC2.ServerInfo.CommandPrefix}}}config ddc2-dev -dcs\n         Example 2 : {{{flow.DDC2.ServerInfo.CommandPrefix}}}config ddc2-dev -lot\n         Example 3 : {{{flow.DDC2.ServerInfo.CommandPrefix}}}config ddc2-dev -tac\n         Example 4 : {{{flow.DDC2.ServerInfo.CommandPrefix}}}config ddc2-dev -ddc2\n         Example 5 : {{{flow.DDC2.ServerInfo.CommandPrefix}}}config ddc2-dev           #This will also display the DDC2 Configuration\n#############################################\n{{/ddc2.Help.Config}}{{#ddc2.Help.Version}}\n#############################################\n           Command : Version\n   \n       Description : Version displays the versions of DCS and supporting applications installed on the server. (Including DDC2)\n       \nExecution Duration : Instant, Cached Response\n \n            Useage : {{{flow.DDC2.ServerInfo.CommandPrefix}}}version servername\n            \n           Example : {{{flow.DDC2.ServerInfo.CommandPrefix}}}version ddc2-dev\n#############################################\n{{/ddc2.Help.Version}}{{#ddc2.Help.Info}}\n#############################################\n           Command : Info\n   \n       Description : Info displays connection information (including passwords). This command produces different output depending on where the command is executed. DDC2 settings also change the output of this command, they are listed below.\n     DDC2 Settings : ShowLotATC         # Boolean to allow LotATC connection information to be displayed in non-Admin Channels\n                     ShowTACView        # Boolean to allow TacView connection information to be displayed in non-Admin Channels    \n                     ShowSrvPWD         # Boolean to allow Server Passwords to be displayed in non-Admin Channels (good setting for Private Servers managed publicly)\n                     \n Channel Execution : Admin Channel      # Disregards DDC2 Settings and displays all connection information\n                     Blue Force Channel # Considers DDC2 Settings and only displays Blue Force passwords                     \n                     Red Force Channel  # Considers DDC2 Settings and only displays Red Force passwords\n                     Support / Other    # Considers DDC2 Settings but does not display any Red or Blue passwords\n\nExecution Duration : Instant, Cached Response\n \n            Useage : {{{flow.DDC2.ServerInfo.CommandPrefix}}}info servername\n            \n           Example : {{{flow.DDC2.ServerInfo.CommandPrefix}}}info ddc2-dev \n#############################################\n{{/ddc2.Help.Info}}{{#ddc2.Help.Support}}\n#############################################\n           Command : Support\n   \n       Description : Support displays information on how, where and when to best contact the server support team. Message will change when request is used within the DDC2 designated support channel.\n       \nExecution Duration : Instant, Cached Response\n \n            Useage : {{{flow.DDC2.ServerInfo.CommandPrefix}}}support servername\n            \n           Example : {{{flow.DDC2.ServerInfo.CommandPrefix}}}support ddc2-dev\n#############################################\n{{/ddc2.Help.Support}}{{#ddc2.Help.Radio}}\n#############################################\n           Command : Radio\n   \n       Description : Radio command converts Discord text messages to Voice Radio messages on SRS. If no data other than the message is given it will use the server default settings.\n DDC2 SRS Defaults : Frequency  = {{{flow.DDC2.AppConfig.SRS.DDC2_FREQ}}}   # GLOBAL_LOBBY_FREQUENCIES setting in the SRS config file server.cfg\n                     Freq High  = {{{flow.DDC2.AppConfig.SRS.DDC2_HIGH}}}  # Highest frequency supported by DDC2 Text to Radio\n                     Freq Low   = {{{flow.DDC2.AppConfig.SRS.DDC2_LOW}}}   # Lowest frequency supported by DDC2 Text to Radio\n                     Modulation = {{{flow.DDC2.AppConfig.SRS.DDC2_MOD}}}    # Hard set in DDC2 Settings, Currently only AM is supported, not changable at present\n                     Volume     = {{{flow.DDC2.AppConfig.SRS.DDC2_VOL}}}    # Hard set in DDC2 Settings, not changable at present\n                     Coalition  = {{{flow.DDC2.AppConfig.SRS.DDC2_COAL}}}    # Options are : 0 = Neutral / Spectators ; 1 = Red force ; 2 = Blue force\n\nExecution Duration : Approximately 10 seconds depending on the length of your ddc2.\n\n            Useage : {{{flow.DDC2.ServerInfo.CommandPrefix}}}radio servername -freq frequency -coal coalition -msg \"message\"\n        \n         Example 1 : {{{flow.DDC2.ServerInfo.CommandPrefix}}}radio servername -freq 122.5 -coal 1 -msg \"This is a message for Red Force on 122.5 A M\"\n         Example 2 : {{{flow.DDC2.ServerInfo.CommandPrefix}}}radio servername -msg \"This is a message using the servers default frequency of {{{flow.DDC2.AppConfig.SRS.DDC2_FREQ}}} A M to the default coalition setting of {{{flow.DDC2.AppConfig.SRS.DDC2_COAL}}}\"\n         Example 3 : {{{flow.DDC2.ServerInfo.CommandPrefix}}}radio servername -coal 2 -msg \"This is a message using the servers default frequency of {{{flow.DDC2.AppConfig.SRS.DDC2_FREQ}}} A M to the Blue Forces\"\n         Example 4 : {{{flow.DDC2.ServerInfo.CommandPrefix}}}radio servername -freq -5000 -coal 2 -msg \"This message will not transmit because the frequency is not between {{{flow.DDC2.AppConfig.SRS.DDC2_LOW}}} and {{{flow.DDC2.AppConfig.SRS.DDC2_HIGH}}} Mhz.\"\n#############################################\n{{/ddc2.Help.Radio}}\n```",
        "output": "str",
        "x": 1461,
        "y": 1240,
        "wires": [
            [
                "c6d0f8143b48e89b"
            ]
        ],
        "l": false
    },
    {
        "id": "27a503a17a85ea06",
        "type": "rbe",
        "z": "ef6fcb72f5ddd39c",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "PS.Status",
        "topi": "topic",
        "x": 1475,
        "y": 280,
        "wires": [
            [
                "011457100c4b40e3",
                "171fd89ac834f41f"
            ]
        ],
        "icon": "node-red/alert.svg",
        "l": false
    },
    {
        "id": "c2cfda94142ef7bc",
        "type": "function",
        "z": "ef6fcb72f5ddd39c",
        "name": "Refresh Pre-Processing",
        "func": "////Initialize Variables\nvar Func = flow.get('Func');\nvar DDC2 = flow.get('DDC2');\n////////////////////////////////////////////////////////////////////////////////////////////////////\nmsg.ddc2.valid = true;\nmsg.ddc2.Notification = DDC2.ServerInfo.ServerID+ ` has received your request `+msg.author.username+ ` and has begun processing your `+(Func.Capitalize(msg.ddc2.requesttype))+` request, please wait....`\nmsg.payload = '-'+msg.ddc2.requesttype\n////////////////////////////////////////////////////////////////////////////////////////////////////\nvar MsgSent = context.get('MsgSent') || 1;\nnode.status({fill:\"green\",shape:\"ring\",text: \"Settings tweaked: \"+MsgSent});\ncontext.set('MsgSent', (MsgSent + 1));\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1210,
        "y": 820,
        "wires": [
            [
                "386b275656409728",
                "3ee76f85c91e7444"
            ]
        ],
        "inputLabels": [
            "Post-Whitelist-Check"
        ],
        "outputLabels": [
            "To Powershell"
        ],
        "icon": "node-red/inject.svg"
    },
    {
        "id": "386b275656409728",
        "type": "link out",
        "z": "ef6fcb72f5ddd39c",
        "name": "To PowerShell",
        "links": [
            "91edae5067fc2fa6"
        ],
        "x": 1555,
        "y": 700,
        "wires": []
    },
    {
        "id": "c6d0f8143b48e89b",
        "type": "link out",
        "z": "ef6fcb72f5ddd39c",
        "name": "To Discord SEND",
        "links": [
            "bbed42bd9246a46b"
        ],
        "x": 1555,
        "y": 1060,
        "wires": []
    },
    {
        "id": "3f4183c299090b5d",
        "type": "function",
        "z": "ef6fcb72f5ddd39c",
        "name": "Refresh Post-Processing",
        "func": "////Initialize Variables\nvar Func = flow.get('Func');\nvar DDC2 = flow.get('DDC2');\n////////////////////////////////////////////////////////////////////////////////////////////////////\nvar ttc = Func.DaysBetween((new Date(msg.data.createdTimestamp)), new Date());\nmsg.ddc2.TTC = ttc\nmsg.ddc2.comment = \"Request Actioned\"\nmsg.ddc2.Notification = DDC2.ServerInfo.ServerID+ ` has updated its settings from the DDC2 configuration files. The task took `+msg.ddc2.TTC+` to complete.`\n////////////////////////////////////////////////////////////////////////////////////////////////////\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1210,
        "y": 360,
        "wires": [
            [
                "21ca69177a14da42",
                "2acac9d6d8835fbc"
            ]
        ],
        "inputLabels": [
            "Post-Whitelist-Check"
        ],
        "outputLabels": [
            "To Powershell"
        ],
        "icon": "node-red/inject.svg"
    },
    {
        "id": "3ee76f85c91e7444",
        "type": "link out",
        "z": "ef6fcb72f5ddd39c",
        "name": "TO LOG & NOTIFICATION",
        "links": [
            "5d4f30f66b3bac0e"
        ],
        "x": 1461,
        "y": 1300,
        "wires": []
    },
    {
        "id": "0e7f40e86d8a4f30",
        "type": "function",
        "z": "ef6fcb72f5ddd39c",
        "name": "!test Pre-Processing......",
        "func": "var MsgSent = context.get('MsgSent') || 1;\nvar Func = flow.get('Func'); //Needed for Notification\nvar DDC2 = flow.get('DDC2'); //Needed for Notification\nmsg.ddc2.comments = \"Request Actioned\"\nmsg.ddc2.Notification = DDC2.ServerInfo.ServerID+\" successfully recieved a \"+(Func.Capitalize(msg.ddc2.requesttype))+\" message request from \"+msg.author.username+ \" in the \"+msg.ddc2.RequestChannel+\" channel on the \" +msg.ddc2.FormattedTime;\nmsg.ddc2.comment = \"Cached Response\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 1300,
        "wires": [
            [
                "3ee76f85c91e7444"
            ]
        ],
        "inputLabels": [
            "Get Message"
        ],
        "outputLabels": [
            "Process Request"
        ],
        "icon": "node-red/bridge.svg"
    },
    {
        "id": "f72d0f6cfdae76e0",
        "type": "link out",
        "z": "ef6fcb72f5ddd39c",
        "name": "TO LOG & NOTIFICATION",
        "links": [
            "5d4f30f66b3bac0e"
        ],
        "x": 905,
        "y": 480,
        "wires": []
    },
    {
        "id": "21ca69177a14da42",
        "type": "link out",
        "z": "ef6fcb72f5ddd39c",
        "name": "TO LOG & NOTIFICATION",
        "links": [
            "5d4f30f66b3bac0e"
        ],
        "x": 1475,
        "y": 400,
        "wires": []
    },
    {
        "id": "b7b7be8c472944ef",
        "type": "function",
        "z": "ef6fcb72f5ddd39c",
        "name": "Status Post-Processing",
        "func": "////Initialize Variables\nvar Func = flow.get('Func');\nvar DDC2 = flow.get('DDC2');\n\nflow.set('DDC2.Status', msg.PS);\n////////////////////////////////////////////////////////////////////////////////////////////////////\nvar ttc = Func.DaysBetween((new Date(msg.data.createdTimestamp)), new Date());\nmsg.ddc2.TTC = ttc\nmsg.ddc2.comment = \"Request Actioned\"\n\nmsg.PS.Server.UpTimeStr = Func.pad(msg.PS.Server.UpTime.Days,2)+ `:`+Func.pad(msg.PS.Server.UpTime.Hours,2)+`:`+Func.pad(msg.PS.Server.UpTime.Minutes,2)+`:`+Func.pad(msg.PS.Server.UpTime.Seconds,2)\n\nif(msg.PS.DCS.IsActive === true) {\n    msg.PS.DCS.RunTimeStr = Func.pad(msg.PS.DCS.RunTime.Days,2)+ `:`+Func.pad(msg.PS.DCS.RunTime.Hours,2)+`:`+Func.pad(msg.PS.DCS.RunTime.Minutes,2)+`:`+Func.pad(msg.PS.DCS.RunTime.Seconds,2)\n    msg.PS.DCS.PriorityStr = Func.GetPriority(msg.PS.DCS.PriorityClass)\n}\nif(msg.PS.SRS.IsActive === true) {\n    msg.PS.SRS.RunTimeStr = Func.pad(msg.PS.SRS.RunTime.Days,2)+ `:`+Func.pad(msg.PS.SRS.RunTime.Hours,2)+`:`+Func.pad(msg.PS.SRS.RunTime.Minutes,2)+`:`+Func.pad(msg.PS.SRS.RunTime.Seconds,2)\n    msg.PS.SRS.PriorityStr = Func.GetPriority(msg.PS.SRS.PriorityClass)\n}\n\n\nif(msg.PS.Updating) {\n\nif (typeof msg.ddc2.Update === 'undefined') {\n    //First Run\n    msg.delay = (DDC2.ServerInfo.UpdateLoop * 1000)\n    msg.ddc2.Update = {\n            \"Status\" : \"Initializing\",\n          \"FirstRun\" : true,\n           \"LOT_Upd\" : \"Update not started\",\n           \"SRS_Upd\" : \"Update not started\",\n           \"DCS_Upd\" : \"Update not started\",\n          \"Finished\" : false\n    }\n} else {\n    if(msg.PS.Updating) {\n        msg.ddc2.Update.Status = \"Updating\"\n        msg.ddc2.Update.FirstRun = false\n        msg.ddc2.Update.Finished = false\n    } else {\n        msg.ddc2.Update.Status = \"Done\"\n        msg.ddc2.Update.FirstRun = false\n        msg.ddc2.Update.Finished = true\n    }\n}\nif(msg.PS.DCS.IsActive) {msg.ddc2.Update.Finished = true}\nif(msg.PS.SRS.IsActive) {msg.ddc2.Update.Finished = true}\n\nif(msg.PS.LOT_Updater.IsActive) {\n    msg.ddc2.Update.LOT_Upd = \"Updating to current \"+DDC2.ServerInfo.LotBuild+\" Build\"\n}\nif(msg.PS.SRS_Updater.IsActive) {\n    msg.ddc2.Update.LOT_Upd = \"Update Complete (\"+DDC2.ServerInfo.LotBuild+\")\"\n    msg.ddc2.Update.SRS_Upd = \"Updating to current \"+DDC2.ServerInfo.SRSBuild+\" Build\"\n}\nif(msg.PS.DCS_Updater.IsActive) {\n    msg.ddc2.Update.LOT_Upd = \"Update Complete (\"+DDC2.ServerInfo.LotBuild+\")\"\n    msg.ddc2.Update.SRS_Upd = \"Update Complete (\"+DDC2.ServerInfo.SRSBuild+\")\"\n    msg.ddc2.Update.DCS_Upd = \"Updating to current \"+DDC2.ServerInfo.DCSBuild+\" Build\"\n}\nif(msg.ddc2.Update.DCS_Upd == \"Updating\") {\n    if (msg.PS.DCS_Updater.Offline) {\n        msg.ddc2.Update.DCS_Upd = \"Update Complete (\"+DDC2.ServerInfo.DCSBuild+\")\"\n    }\n}\nif(msg.PS.DCS.Version != \"\") {\n    if(DDC2.AppConfig.DCS.Version != msg.PS.DCS.Version) {\n        flow.set('DDC2.AppConfig.DCS.Version', msg.PS.DCS.Lot_Version)\n    }\n}\nif(msg.PS.DCS.Lot_Version != \"\") {\n    if(DDC2.AppConfig.LotATC.Version != msg.PS.DCS.Lot_Version) {\n        flow.set('DDC2.AppConfig.LotATC.Version', msg.PS.DCS.Lot_Version)\n    }\n}\nif(DDC2.AppConfig.SRS.Version != msg.PS.SRS.Version) {\n    flow.set('DDC2.AppConfig.SRS.Version', msg.PS.SRS.Version)\n}\n\n}\n\nmsg.ddc2.Notification = \"\"\nif(!(msg.ddc2.silent)) {return msg}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1210,
        "y": 200,
        "wires": [
            [
                "c41ecf52059cd163",
                "8bb1acf564135cb3"
            ]
        ],
        "inputLabels": [
            "Post-Whitelist-Check"
        ],
        "outputLabels": [
            "To Powershell"
        ],
        "icon": "node-red/inject.svg"
    },
    {
        "id": "c41ecf52059cd163",
        "type": "template",
        "z": "ef6fcb72f5ddd39c",
        "name": "Status Formatting",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "```\n                  -=:# DCS Server Status #:=-\n           \n                      DDC2 ID : {{{flow.DDC2.ServerInfo.ServerID}}}\n              CPU Utilization : {{{PS.Server.ProcessorLoad}}} %\n              RAM Utilization : {{{PS.Server.UsedMemPC}}} % - ({{{PS.Server.UsedMemGB}}} GB / {{{PS.Server.TotalMemGB}}} GB)\n                Server Uptime : {{{PS.Server.UpTimeStr}}}\n          Last Server Restart : {{{PS.Server.LastBootUpString}}}\n            DCS Server Status : {{#PS.DCS.Offline}}DCS Offline [{{PS.DCS.Version}}]{{/PS.DCS.Offline}}{{#PS.DCS.IsActive}}{{{PS.DCS.Status}}}\n\n           InGame Server Name : {{{flow.DDC2.AppConfig.DCS.name}}}\n           DCS Server Version : {{{PS.DCS.ProductVersion}}}\n            DCS Server Uptime : {{{PS.DCS.RunTimeStr}}}\n             DCS Server Ports : {{{PS.DCS.Ports}}}\n       DCS Server Memory (GB) : {{{PS.DCS.MemGB}}} Used\n          DCS Server Priority : {{{PS.DCS.PriorityStr}}}\n             DCS Server Ticks : {{{PS.DCS.Ticks}}}\n    DCS Server Active Threads : {{{PS.DCS.Threads}}}\n    DCS Server Active Handles : {{{PS.DCS.Handles}}}\n   DCS Server CPU Utilization : {{{PS.DCS.CPULoad}}} %{{/PS.DCS.IsActive}}\n            SRS Server Status : {{#PS.SRS.Offline}}SRS Offline [{{PS.SRS.Version}}]{{/PS.SRS.Offline}}{{{PS.SRS.Status}}}{{#PS.SRS.IsActive}}\n           SRS Server Version : {{{PS.SRS.ProductVersion}}}\n            SRS Server Uptime : {{{PS.SRS.RunTimeStr}}}\n             SRS Server Ports : {{{PS.SRS.Ports}}}\n       SRS Server Memory (GB) : {{{PS.SRS.MemGB}}} Used\n          SRS Server Priority : {{{PS.SRS.PriorityStr}}}\n             SRS Server Ticks : {{{PS.SRS.Ticks}}}\n    SRS Server Active Threads : {{{PS.SRS.Threads}}}\n    SRS Server Active Handles : {{{PS.SRS.Handles}}}\n   SRS Server CPU Utilization : {{{PS.SRS.CPULoad}}} %\n       SRS Current User Count : {{{PS.SRS.ClientCount}}}{{/PS.SRS.IsActive}}{{#PS.SRS.ClientsPresent}}\n                        \n                        SRS Active Users\n{{#PS.SRS.ClientTable.0.Name}}                              - {{{PS.SRS.ClientTable.0.Name}}}{{/PS.SRS.ClientTable.0.Name}}\n{{#PS.SRS.ClientTable.1.Name}}                              - {{{PS.SRS.ClientTable.1.Name}}}{{/PS.SRS.ClientTable.1.Name}}\n{{#PS.SRS.ClientTable.2.Name}}                              - {{{PS.SRS.ClientTable.2.Name}}}{{/PS.SRS.ClientTable.2.Name}}\n{{#PS.SRS.ClientTable.3.Name}}                              - {{{PS.SRS.ClientTable.3.Name}}}{{/PS.SRS.ClientTable.3.Name}}\n{{#PS.SRS.ClientTable.4.Name}}                              - {{{PS.SRS.ClientTable.4.Name}}}{{/PS.SRS.ClientTable.4.Name}}{{/PS.SRS.ClientsPresent}}\n\n{{#PS.Updating}}\n               -=:# Server Update Status #:=-\n              \n              LotATC Updater : {{#ddc2.Update.LOT_Upd}}{{ddc2.Update.LOT_Upd}}{{/ddc2.Update.LOT_Upd}}{{#PS.LOT_Updater.Offline}} [{{PS.DCS.Lot_Version}}]{{/PS.LOT_Updater.Offline}}{{#PS.LOT_Updater.IsActive}}\n                       Ticks : {{PS.LOT_Updater.RunTime.Ticks}}\n            Process CPU Load : {{PS.LOT_Updater.CPULoad}} %\n         Process Memory Load : {{PS.LOT_Updater.MemGB}} GB\n             Process Threads : {{PS.LOT_Updater.Threads}}\n             Process Handles : {{PS.LOT_Updater.Threads}}{{/PS.LOT_Updater.IsActive}}\n             \n\t\t\t\t SRS Updater : {{#ddc2.Update.SRS_Upd}}{{ddc2.Update.SRS_Upd}}{{/ddc2.Update.SRS_Upd}}{{#PS.SRS_Updater.Offline}} [{{PS.SRS.Version}}]{{/PS.SRS_Updater.Offline}}{{#PS.SRS_Updater.IsActive}}\n                       Ticks : {{PS.SRS_Updater.RunTime.Ticks}}\n            Process CPU Load : {{PS.SRS_Updater.CPULoad}} %\n         Process Memory Load : {{PS.SRS_Updater.MemGB}} GB\n             Process Threads : {{PS.SRS_Updater.Threads}}\n             Process Handles : {{PS.SRS_Updater.Threads}}{{/PS.SRS_Updater.IsActive}}\n             \n                 DCS Updater : {{#ddc2.Update.DCS_Upd}}{{ddc2.Update.DCS_Upd}}{{/ddc2.Update.DCS_Upd}}{{#PS.DCS_Updater.Offline}} [{{PS.DCS.Version}}]{{/PS.DCS_Updater.Offline}}{{#PS.DCS_Updater.IsActive}}\n                       Ticks : {{PS.DCS_Updater.RunTime.Ticks}}\n            Process CPU Load : {{PS.DCS_Updater.CPULoad}} %\n         Process Memory Load : {{PS.DCS_Updater.MemGB}} GB\n             Process Threads : {{PS.DCS_Updater.Threads}}\n             Process Handles : {{PS.DCS_Updater.Threads}}{{/PS.DCS_Updater.IsActive}}\n{{/PS.Updating}}\n```\nRequest completed in {{ddc2.TTC}}",
        "output": "str",
        "x": 1595,
        "y": 200,
        "wires": [
            [
                "18a377639c43dbe3"
            ]
        ],
        "l": false
    },
    {
        "id": "368bb9f7209faf5e",
        "type": "switch",
        "z": "ef6fcb72f5ddd39c",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 271,
        "y": 260,
        "wires": [
            [
                "dac986fcca69bc61"
            ]
        ],
        "l": false
    },
    {
        "id": "d9abe225f1df2565",
        "type": "function",
        "z": "ef6fcb72f5ddd39c",
        "name": "Version Pre-Processing",
        "func": "////Initialize Variables\nvar Func = flow.get('Func');\nvar DDC2 = flow.get('DDC2');\n////////////////////////////////////////////////////////////////////////////////////////////////////\nmsg.ddc2.valid = true;\nmsg.ddc2.Notification = \"\"\nmsg.ddc2.comment = \"Cached Response\"\n////////////////////////////////////////////////////////////////////////////////////////////////////\nvar MsgSent = context.get('MsgSent') || 1;\nnode.status({fill:\"green\",shape:\"ring\",text: \"Versions checked: \"+MsgSent});\ncontext.set('MsgSent', (MsgSent + 1));\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1210,
        "y": 1060,
        "wires": [
            [
                "d994936ce524644b",
                "3ee76f85c91e7444"
            ]
        ],
        "inputLabels": [
            "Post-Whitelist-Check"
        ],
        "outputLabels": [
            "To Powershell"
        ],
        "icon": "node-red/inject.svg"
    },
    {
        "id": "d994936ce524644b",
        "type": "template",
        "z": "ef6fcb72f5ddd39c",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "```\n          -=:# DCS Server Application Versions #:=-\n                    \n                  DCS Version : {{{flow.DDC2.AppConfig.DCS.Version}}}{{#flow.DDC2.AppConfig.LotATC.Installed}}\n               LotATC Version : {{{flow.DDC2.AppConfig.LotATC.Version}}}{{/flow.DDC2.AppConfig.LotATC.Installed}}{{#flow.DDC2.AppConfig.SRS.Installed}}\n                  SRS Version : {{{flow.DDC2.AppConfig.SRS.Version}}}{{/flow.DDC2.AppConfig.SRS.Installed}}{{#flow.DDC2.AppConfig.Tacview.Installed}}\n              TACView Version : {{{flow.DDC2.AppConfig.Tacview.Version}}}{{/flow.DDC2.AppConfig.Tacview.Installed}}\n            DDC2 Core Version : {{{flow.DDC2.ServerInfo.DDC2_PSCore}}}\n          DDC2 Config Version : {{{flow.DDC2.ServerInfo.DDC2_PSConfig}}}\n   DDC2 Node-Red Flow Version : {{{flow.DDC2.ServerInfo.DDC2_FLOW}}}\n                  \n```",
        "output": "str",
        "x": 1461,
        "y": 1060,
        "wires": [
            [
                "c6d0f8143b48e89b"
            ]
        ],
        "l": false
    },
    {
        "id": "ef2c63f069d29e65",
        "type": "function",
        "z": "ef6fcb72f5ddd39c",
        "name": "Port Pre-Processing......",
        "func": "var MsgSent = context.get('MsgSent') || 1;\nvar DDC2 = flow.get('DDC2');\nvar Func = flow.get('Func');\nmsg.ddc2.Notification = \"\" //Stops the Notification system from sending out a message.\nmsg.ddc2.AdminONLY = {\"AdminChannel\" : false}\nmsg.ddc2.comment = \"Cached Response\"\nvar adminMSG = RED.util.cloneMessage(msg)\nadminMSG.ddc2.AdminONLY.AdminChannel = true\n\nif(msg.channel.id == DDC2.Channel.Admin) {\n    msg.ddc2.Notification = \"\"\n} else {\n    msg.ddc2.Notification = DDC2.ServerInfo.ServerID+` acknowledges your `+(Func.Capitalize(msg.ddc2.requesttype))+` command, due to the sensitive nature of the information the reply contains, DDC2 will post the information to your administration channel instead.`\n    adminMSG.channel.id = DDC2.Channel.Admin\n}\nnode.status({fill:\"green\",shape:\"ring\",text: \"Configs forgotten: \"+MsgSent});\ncontext.set('MsgSent', (MsgSent + 1));\nreturn [adminMSG,msg];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 940,
        "wires": [
            [
                "0178e9eb2cb05b6a"
            ],
            [
                "3ee76f85c91e7444"
            ]
        ],
        "inputLabels": [
            "Post-Whitelist-Check"
        ],
        "outputLabels": [
            "To Discord",
            ""
        ],
        "icon": "node-red/inject.svg"
    },
    {
        "id": "6db715ef21ba58d0",
        "type": "function",
        "z": "ef6fcb72f5ddd39c",
        "name": "Config Pre-Processing......",
        "func": "var MsgSent = context.get('MsgSent') || 1;\nvar DDC2 = flow.get('DDC2');\nvar Func = flow.get('Func');\nmsg.ddc2.Notification = \"\" //Stops the Notification system from sending out a message.\nmsg.ddc2.comment = \"Cached Response\"\nvar msglow = msg.ddc2.raw.toLowerCase();\nvar splitmsg = msglow.split(\" \",3);\nvar Config = splitmsg[2];\nvar DCS_Config = false\nvar SRS_Config = false\nvar LOT_Config = false\nvar TAC_Config = false\nvar DDC2_Config = false\n\nif (Config == \"-dcs\") {DCS_Config = true}\nif (Config == \"-srs\") {SRS_Config = true}\nif (Config == \"-lot\") {LOT_Config = true}\nif (Config == \"-tac\") {TAC_Config = true}\nif (Config == \"-ddc2\") {DDC2_Config = true}\nif (typeof Config == 'undefined') {DDC2_Config = true}\n\nmsg.ddc2.AdminONLY = {\n        \"AdminChannel\" : false,\n          \"DCS_Config\" : DCS_Config,\n          \"SRS_Config\" : SRS_Config,\n          \"LOT_Config\" : LOT_Config,\n          \"TAC_Config\" : TAC_Config,\n         \"DDC2_Config\" : DDC2_Config,\n       \"App_Installed\" : true\n    }\nmsg.ddc2.Notification = \"\"\n\nvar adminMSG = RED.util.cloneMessage(msg)\nadminMSG.ddc2.AdminONLY.AdminChannel = true\n\nif(msg.channel.id == DDC2.Channel.Admin) {\n    msg.ddc2.Notification = \"\"\n    if ((DDC2.AppConfig.DCS.Installed != true) && (msg.ddc2.AdminONLY.DCS_Config == true)) {\n        msg.ddc2.Notification = DDC2.ServerInfo.ServerID+` regrets to inform you that SRS does not appear to be installed on this server so no config can be displayed.`\n        msg.ddc2.AdminONLY.App_Installed = false\n        adminMSG.ddc2.AdminONLY.App_Installed = false;\n    }    \n    if ((DDC2.AppConfig.SRS.Installed != true) && (msg.ddc2.AdminONLY.SRS_Config == true)) {\n        msg.ddc2.Notification = DDC2.ServerInfo.ServerID+` regrets to inform you that SRS does not appear to be installed on this server so no config can be displayed.`\n        msg.ddc2.AdminONLY.App_Installed = false\n        adminMSG.ddc2.AdminONLY.App_Installed = false\n    }\n    if ((DDC2.AppConfig.LotATC.Installed != true) && (msg.ddc2.AdminONLY.LOT_Config == true)) {\n        msg.ddc2.Notification = DDC2.ServerInfo.ServerID+` regrets to inform you that LotATC does not appear to be installed on this server so no config can be displayed`\n        msg.ddc2.AdminONLY.App_Installed = false\n        adminMSG.ddc2.AdminONLY.App_Installed = false\n    }\n    if ((DDC2.AppConfig.Tacview.Installed != true) && (msg.ddc2.AdminONLY.TAC_Config == true)) {\n        msg.ddc2.Notification = DDC2.ServerInfo.ServerID+` regrets to inform you that TacView does not appear to be installed on this server so no config can be displayed`\n        msg.ddc2.AdminONLY.App_Installed = false\n        adminMSG.ddc2.AdminONLY.App_Installed = false\n    }\n} else {\n    msg.ddc2.Notification = DDC2.ServerInfo.ServerID+` acknowledges your `+(Func.Capitalize(msg.ddc2.requesttype))+` command, due to the sensitive nature of the information the reply contains, DDC2 will post the information to your administration channel instead.`\n    adminMSG.channel.id = DDC2.Channel.Admin\n        if ((DDC2.AppConfig.DCS.Installed != true) && (msg.ddc2.AdminONLY.DCS_Config == true)) {\n        msg.ddc2.Notification = DDC2.ServerInfo.ServerID+` regrets to inform you that SRS does not appear to be installed on this server so no config can be displayed.`\n        msg.ddc2.AdminONLY.App_Installed = false\n        adminMSG.ddc2.AdminONLY.App_Installed = false;\n    }    \n    if ((DDC2.AppConfig.SRS.Installed != true) && (msg.ddc2.AdminONLY.SRS_Config == true)) {\n        msg.ddc2.Notification = DDC2.ServerInfo.ServerID+` regrets to inform you that SRS does not appear to be installed on this server so no config can be displayed.`\n        msg.ddc2.AdminONLY.App_Installed = false\n        adminMSG.ddc2.AdminONLY.App_Installed = false\n    }\n    if ((DDC2.AppConfig.LotATC.Installed != true) && (msg.ddc2.AdminONLY.LOT_Config == true)) {\n        msg.ddc2.Notification = DDC2.ServerInfo.ServerID+` regrets to inform you that LotATC does not appear to be installed on this server so no config can be displayed`\n        msg.ddc2.AdminONLY.App_Installed = false\n        adminMSG.ddc2.AdminONLY.App_Installed = false\n    }\n    if ((DDC2.AppConfig.Tacview.Installed != true) && (msg.ddc2.AdminONLY.TAC_Config == true)) {\n        msg.ddc2.Notification = DDC2.ServerInfo.ServerID+` regrets to inform you that TacView does not appear to be installed on this server so no config can be displayed`\n        msg.ddc2.AdminONLY.App_Installed = false\n        adminMSG.ddc2.AdminONLY.App_Installed = false\n    }\n}\nnode.status({ fill: \"green\", shape: \"ring\", text: \"Configs forgotten: \" + MsgSent });\ncontext.set('MsgSent', (MsgSent + 1));\nreturn [adminMSG,msg];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 1000,
        "wires": [
            [
                "a1df32cd2f3f7e06"
            ],
            [
                "3ee76f85c91e7444"
            ]
        ],
        "inputLabels": [
            "Post-Whitelist-Check"
        ],
        "outputLabels": [
            "To Discord",
            "To Log / Task Notification"
        ],
        "icon": "node-red/inject.svg"
    },
    {
        "id": "0178e9eb2cb05b6a",
        "type": "template",
        "z": "ef6fcb72f5ddd39c",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{#ddc2.AdminONLY.AdminChannel}}\n```\n         -=:# DCS Server Configured Network Ports #:=-\n       \n          Server Console Port : {{{flow.DDC2.ServerInfo.ConsolePort}}}\n           \n              DCS Server Port : {{{flow.DDC2.AppConfig.DCS.Port}}}\n               DCS Webui Port : {{{flow.DDC2.AppConfig.DCS.webui_port}}}{{#flow.DDC2.AppConfig.LotATC.Installed}}\n \n           LotATC Server Port : {{{flow.DDC2.AppConfig.LotATC.Port}}}\n  LotATC SRS Transponder Port : {{{flow.DDC2.AppConfig.LotATC.srs_transponder_port}}}\n      LotATC JSON Server Port : {{{flow.DDC2.AppConfig.LotATC.jsonserver_port}}}{{/flow.DDC2.AppConfig.LotATC.Installed}}{{#flow.DDC2.AppConfig.SRS.Installed}}\n                  \n              SRS Server Port : {{{flow.DDC2.AppConfig.SRS.Port}}}\n         SRS AutoConnect Port : {{{flow.DDC2.AppConfig.SRS.SERVER_SRS_PORT}}}\n       SRS LotATC Export Port : {{{flow.DDC2.AppConfig.SRS.LOTATC_EXPORT_PORT}}}{{/flow.DDC2.AppConfig.SRS.Installed}}{{#flow.DDC2.AppConfig.Tacview.Installed}}\n    \nTACView Server Telemetry Port : {{{flow.DDC2.AppConfig.Tacview.tacviewRealTimeTelemetryPort}}}\n       TACView Server RC Port : {{{flow.DDC2.AppConfig.Tacview.tacviewRemoteControlPort}}}{{/flow.DDC2.AppConfig.Tacview.Installed}}\n\n```\n{{/ddc2.AdminONLY.AdminChannel}}",
        "output": "str",
        "x": 1461,
        "y": 940,
        "wires": [
            [
                "c6d0f8143b48e89b"
            ]
        ],
        "l": false
    },
    {
        "id": "f6ef943f99d66949",
        "type": "switch",
        "z": "ef6fcb72f5ddd39c",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 271,
        "y": 320,
        "wires": [
            [
                "dac986fcca69bc61"
            ]
        ],
        "l": false
    },
    {
        "id": "a1df32cd2f3f7e06",
        "type": "template",
        "z": "ef6fcb72f5ddd39c",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{#ddc2.AdminONLY.App_Installed}}{{#ddc2.AdminONLY.AdminChannel}}\n```\nConfiguration Information for Server {{{flow.DDC2.ServerInfo.ServerID}}}...\n\n{{#ddc2.AdminONLY.DCS_Config}}\n              -=:# DCS Server Configuration #:=-\n\n           InGame Server Name : {{{flow.DDC2.AppConfig.DCS.name}}}\n                  DCS Version : {{{flow.DDC2.AppConfig.DCS.Version}}}\n        DCS Connection String : {{{flow.DDC2.ServerInfo.ConnectionAdrr}}}:{{{flow.DDC2.AppConfig.DCS.Port}}}\n                 UPnP Enabled : {{{flow.DDC2.AppConfig.DCS.use_upnp}}}\n              Server Password : {{{flow.DDC2.AppConfig.DCS.password}}}\n              Server isPublic : {{{flow.DDC2.AppConfig.DCS.isPublic}}}\n                  Max Players : {{{flow.DDC2.AppConfig.DCS.maxPlayers}}}\n                     Max Ping : {{{flow.DDC2.AppConfig.DCS.maxPing}}}\n                   WebUI Port : {{{flow.DDC2.AppConfig.DCS.webui_port}}}\n          Server Bind Address : {{{flow.DDC2.AppConfig.DCS.bind_address}}}\n       Server Mission Shuffle : {{{flow.DDC2.AppConfig.DCS.listShuffle}}}\n          Server Mission Loop : {{{flow.DDC2.AppConfig.DCS.listLoop}}}\n           Server Resume Mode : {{{flow.DDC2.AppConfig.DCS.resume_mode}}}\n  DCS Server Install Location : {{{flow.DDC2.AppConfig.DCS.InstallDIR}}}\n  DCS Server Profile Location : {{{flow.DDC2.AppConfig.DCS.ProfileDIR}}}\nDCS Server Configuration File : {{{flow.DDC2.AppConfig.DCS.Config}}}\n                Pause on Load : {{{flow.DDC2.AppConfig.DCS.pause_on_load}}}\n        Pause without Clients : {{{flow.DDC2.AppConfig.DCS.pause_without_clients}}}\n         Require Pure Clients : {{{flow.DDC2.AppConfig.DCS.require_pure_clients}}}\n          Require Pure Models : {{{flow.DDC2.AppConfig.DCS.require_pure_models}}}\n        Require Pure Textures : {{{flow.DDC2.AppConfig.DCS.require_pure_textures}}}\n          Allow Tail # Change : {{{flow.DDC2.AppConfig.DCS.allow_change_tailno}}}\n            Allow Change Skin : {{{flow.DDC2.AppConfig.DCS.allow_change_skin}}}\n               Disable Events : {{{flow.DDC2.AppConfig.DCS.disable_events}}}\n               Takeoff Events : {{{flow.DDC2.AppConfig.DCS.event_Takeoff}}}\n               Connect Events : {{{flow.DDC2.AppConfig.DCS.event_Connect}}}\n              Ejecting Events : {{{flow.DDC2.AppConfig.DCS.event_Ejecting}}}\n                  Kill Events : {{{flow.DDC2.AppConfig.DCS.event_Kill}}}\n                 Crash Events : {{{flow.DDC2.AppConfig.DCS.event_Crash}}}\n        Role Selection Events : {{{flow.DDC2.AppConfig.DCS.event_Role}}}\n             Ownership Export : {{{flow.DDC2.AppConfig.DCS.ownship_export}}}\n                Object Export : {{{flow.DDC2.AppConfig.DCS.object_export}}}\n                Sensor Export : {{{flow.DDC2.AppConfig.DCS.allow_sensor_export}}}\n        Client Outbound Limit : {{{flow.DDC2.AppConfig.DCS.client_outbound_limit}}}\n         Client Inbound Limit : {{{flow.DDC2.AppConfig.DCS.client_inbound_limit}}}\n           Server Screenshots : {{{flow.DDC2.AppConfig.DCS.server_can_screenshot}}}\n             Server VoIP Chat : {{{flow.DDC2.AppConfig.DCS.voice_chat_server}}}\n\n{{/ddc2.AdminONLY.DCS_Config}}{{#flow.DDC2.AppConfig.SRS.Installed}}{{#ddc2.AdminONLY.SRS_Config}}\n              -=:# SRS Server Configuration #:=-\n\n                  SRS Version : {{{flow.DDC2.AppConfig.SRS.Version}}}\n        SRS Connection String : {{{flow.DDC2.ServerInfo.ConnectionAdrr}}}:{{{flow.DDC2.AppConfig.SRS.SERVER_PORT}}}\n                 UPnP Enabled : {{{flow.DDC2.AppConfig.SRS.UPNP_ENABLED}}}\n             Global Frequency : {{{flow.DDC2.AppConfig.SRS.GLOBAL_LOBBY_FREQUENCIES}}}                     \n  External AWACS Mode Enabled : {{{flow.DDC2.AppConfig.SRS.EXTERNAL_AWACS_MODE}}}\n        BLUFOR AWACS Password : {{{flow.DDC2.AppConfig.SRS.EXTERNAL_AWACS_MODE_BLUE_PASSWORD}}}\n        REDFOR AWACS Password : {{{flow.DDC2.AppConfig.SRS.EXTERNAL_AWACS_MODE_RED_PASSWORD}}}\n  SRS Server Install Location : {{{flow.DDC2.AppConfig.SRS.InstallDIR}}}\n   SRS Server Config Location : {{{flow.DDC2.AppConfig.SRS.Config}}}\n             Test Frequencies : {{{flow.DDC2.AppConfig.SRS.TEST_FREQUENCIES}}}\n                Client Export : {{{flow.DDC2.AppConfig.SRS.CLIENT_EXPORT_ENABLED}}}\n           Client Export File : {{{flow.DDC2.AppConfig.SRS.CLIENT_EXPORT_FILE_PATH}}}\n       Coalition Secure Comms : {{{flow.DDC2.AppConfig.SRS.COALITION_AUDIO_SECURITY}}}\n      Disable Spectator Comms : {{{flow.DDC2.AppConfig.SRS.SPECTATORS_AUDIO_DISABLED}}}\n        Line of Sight Enabled : {{{flow.DDC2.AppConfig.SRS.LOS_ENABLED}}}\n             Distance Enabled : {{{flow.DDC2.AppConfig.SRS.DISTANCE_ENABLED}}}\n       Coalition Secure Comms : {{{flow.DDC2.AppConfig.SRS.COALITION_AUDIO_SECURITY}}}\n                 IRL Radio TX : {{{flow.DDC2.AppConfig.SRS.IRL_RADIO_TX}}}\n    IRL Radio RX Interference : {{{flow.DDC2.AppConfig.SRS.IRL_RADIO_RX_INTERFERENCE}}}\n              Radio Expansion : {{{flow.DDC2.AppConfig.SRS.RADIO_EXPANSION}}}\n       Allow Radio Encryption : {{{flow.DDC2.AppConfig.SRS.ALLOW_RADIO_ENCRYPTION}}}\n             Show Tuned Count : {{{flow.DDC2.AppConfig.SRS.SHOW_TUNED_COUNT}}}\n        Show Transmitter Name : {{{flow.DDC2.AppConfig.SRS.SHOW_TRANSMITTER_NAME}}}\n                LotATC Export : {{{flow.DDC2.AppConfig.SRS.LOTATC_EXPORT_ENABLED}}}              \n             LotATC Export IP : {{{flow.DDC2.AppConfig.SRS.LOTATC_EXPORT_IP}}}\n           LotATC Export Port : {{{flow.DDC2.AppConfig.SRS.LOTATC_EXPORT_PORT}}}\n       Check for Beta Updates : {{{flow.DDC2.AppConfig.SRS.CHECK_FOR_BETA_UPDATES}}}\n         SRS AutoConnect Port : {{{flow.DDC2.AppConfig.SRS.CHECK_FOR_BETA_UPDATES}}}\n      SRS AutoConnect Enabled : {{{flow.DDC2.AppConfig.SRS.SERVER_SEND_AUTO_CONNECT}}}\n      SRS AutoConnect Address : {{{flow.DDC2.AppConfig.SRS.SERVER_SRS_HOST}}}\n         SRS AutoConnect Port : {{{flow.DDC2.AppConfig.SRS.SERVER_SRS_PORT}}}\n\n{{/ddc2.AdminONLY.SRS_Config}}{{/flow.DDC2.AppConfig.SRS.Installed}}{{#flow.DDC2.AppConfig.LotATC.Installed}}{{#ddc2.AdminONLY.LOT_Config}}\n            -=:# LotATC Server Configuration #:=-\n\n               LotATC Version : {{{flow.DDC2.AppConfig.LotATC.Version}}}\n     LotATC Connection String : {{{flow.DDC2.ServerInfo.ConnectionAdrr}}}:{{{flow.DDC2.AppConfig.LotATC.Port}}}\n              BLUFOR Password : {{{flow.DDC2.AppConfig.LotATC.blue_password}}}\n              REDFOR Password : {{{flow.DDC2.AppConfig.LotATC.red_password}}}\n           Virtual AWACS Name : {{{flow.DDC2.AppConfig.LotATC.virtual_awacs_name}}}\n         SRS Transponder Port : {{{flow.DDC2.AppConfig.LotATC.srs_transponder_port}}}\n             JSON Server Port : {{{flow.DDC2.AppConfig.LotATC.jsonserver_port}}}\n      Group IGNORE radar name : {{{flow.DDC2.AppConfig.LotATC.ignore_radar_name}}}\n        Update Search for New : {{{flow.DDC2.AppConfig.LotATC.update_search_for_new}}}\n                  Update Time : {{{flow.DDC2.AppConfig.LotATC.update_time}}}\n         Minimum Frame Update : {{{flow.DDC2.AppConfig.LotATC.minimum_frame_update}}}\n LotATC Installation Location : {{{flow.DDC2.AppConfig.LotATC.InstallDIR}}}\n    LotATC Configuration File : {{{flow.DDC2.AppConfig.LotATC.Config}}}\n\n{{/ddc2.AdminONLY.LOT_Config}}{{/flow.DDC2.AppConfig.LotATC.Installed}}{{#flow.DDC2.AppConfig.Tacview.Installed}}{{#ddc2.AdminONLY.TAC_Config}}\n           -=:# TacView Server Configuration #:=-\n\n               TacView Verion : {{{flow.DDC2.AppConfig.Tacview.Version}}}\n  Telemetry Connection String : {{{flow.DDC2.ServerInfo.ConnectionAdrr}}}:{{{flow.DDC2.AppConfig.Tacview.tacviewRealTimeTelemetryPort}}}\n    Client Telemetry Password : {{{flow.DDC2.AppConfig.Tacview.tacviewClientTelemetryPassword}}}\n      Host Telemetry Password : {{{flow.DDC2.AppConfig.Tacview.tacviewHostTelemetryPassword}}}\n       TacView Playback Delay : {{{flow.DDC2.AppConfig.Tacview.tacviewPlaybackDelay}}} \nTacView Installation Location : {{{flow.DDC2.AppConfig.Tacview.InstallDIR}}}\n   TacView Configuration File : {{{flow.DDC2.AppConfig.Tacview.ConfigFile}}}\n       Data Compression Level : {{{flow.DDC2.AppConfig.Tacview.tacviewCompressionLevel}}}\n           Debug Mode Enabled : {{{flow.DDC2.AppConfig.Tacview.tacviewDebugModeEnabled}}}\n      Client Sessions Enabled : {{{flow.DDC2.AppConfig.Tacview.tacviewRecordClientsSessionsEnabled}}}\n               Terrain Export : {{{flow.DDC2.AppConfig.Tacview.tacviewTerrainExport}}}       \n     TacView Profiling Period : {{{flow.DDC2.AppConfig.Tacview.tacviewProfilingPeriod}}}\n TacView RC Connection String : {{{flow.DDC2.ServerInfo.ConnectionAdrr}}}:{{{flow.DDC2.AppConfig.Tacview.tacviewRemoteControlPort}}}\n          TacView RC Password : {{{flow.DDC2.AppConfig.Tacview.tacviewRemoteControlPassword}}}\n       TacView Telemetry Port : {{{flow.DDC2.AppConfig.Tacview.tacviewRealTimeTelemetryPort}}}\n  TacView Remote Control Port : {{{flow.DDC2.AppConfig.Tacview.tacviewRemoteControlPort}}}\n\n{{/ddc2.AdminONLY.TAC_Config}}{{/flow.DDC2.AppConfig.Tacview.Installed}}{{#ddc2.AdminONLY.DDC2_Config}}\n                 -=:# DDC2 Configuration #:=-             \n\n               DDC2 Server ID : {{{flow.DDC2.ServerInfo.ServerID}}}\n           DDC2 Master Server : {{{flow.DDC2.ServerInfo.DDC2_MASTER}}}\n            DDC2 Core Version : {{{flow.DDC2.ServerInfo.DDC2_PSCore}}}\n          DDC2 Config Version : {{{flow.DDC2.ServerInfo.DDC2_PSConfig}}}\n   DDC2 Node-Red Flow Version : {{{flow.DDC2.ServerInfo.DDC2_FLOW}}}\n     Auto Start DCS on Update : {{{flow.DDC2.ServerInfo.AutoStartonUpdate}}}\n          DDC2 Command Prefix : {{{flow.DDC2.ServerInfo.CommandPrefix}}}\n        Auto Update Moose.lua : {{{flow.DDC2.ServerInfo.AutoUpdateMoose}}}\n              Auto Update DCS : {{{flow.DDC2.ServerInfo.AutoUpdateDCS}}} ({{{flow.DDC2.ServerInfo.DCSBuild}}})\n              Auto Update SRS : {{{flow.DDC2.ServerInfo.AutoUpdateSRS}}} ({{{flow.DDC2.ServerInfo.SRSBuild}}})\n           Auto Update LotATC : {{{flow.DDC2.ServerInfo.AutoUpdateLoT}}} ({{{flow.DDC2.ServerInfo.LotBuild}}})\n             Auto Start Delay : {{{flow.DDC2.ServerInfo.AutoStartonUpdate}}} ##Ignored if DCC2 Master##\n        Show Server Passwords : {{{flow.DDC2.ServerInfo.ShowSrvPWD}}}   ##Shows Server Passwords in non-Admin Channels##\n             Show LotATC Info : {{{flow.DDC2.ServerInfo.ShowLotATC}}}   ##Shows LotATC information in non-Admin Channels## \n              Server Password : {{{flow.DDC2.ServerInfo.ShowTACView}}}   ##Shows TacView information in non-Admin Channels## \n            DDC2 Help Enabled : {{{flow.DDC2.ServerInfo.ENABLE_HELP}}}   ##Enables Help for this server (removes need to specify server ID)## \n          Password Randomizer : {{{flow.DDC2.ServerInfo.PwdRandomizer.EnableRandomizer}}}{{{#flow.DDC2.ServerInfo.PwdRandomizer.EnableRandomizer}}}\n      DCS Password Randomizer : {{{flow.DDC2.ServerInfo.PwdRandomizer.ServerPassword}}}\n      SRS Password Randomizer : {{{flow.DDC2.ServerInfo.PwdRandomizer.SRSPassword}}}\n     Separate LotATC Password : {{{flow.DDC2.ServerInfo.PwdRandomizer.SeperateLOT}}}\n    Separate TacView Password : {{{flow.DDC2.ServerInfo.PwdRandomizer.SeperateTAC}}}{{{/flow.DDC2.ServerInfo.PwdRandomizer.EnableRandomizer}}}\n    DCS & SRS Screen Position : {{{flow.DDC2.ServerInfo.DesktopPosition}}}\n   DDC2 Installation Location : {{{flow.DDC2.ServerInfo.DDC2_Path}}}\n                 \n                 \n                 -=:# Server Configuration #:=-\n                 \n              Server Hostname : {{{flow.DDC2.ServerInfo.ComputerName}}}\n              Windows Version : {{{flow.DDC2.ServerInfo.WinVer}}}\n    Server Connection Address : {{{flow.DDC2.ServerInfo.ConnectionAdrr}}}\n             Server Processor : {{{flow.DDC2.ServerInfo.CPUType}}}\n               Server RAM(GB) : {{{flow.DDC2.ServerInfo.TotalMem}}}\n      Console Connection Type : {{{flow.DDC2.ServerInfo.ConsoleType}}}\n    Console Connection String : {{{flow.DDC2.ServerInfo.ConnectionAdrr}}}:{{{flow.DDC2.ServerInfo.ConsolePort}}}    \n                     TimeZone : {{{flow.DDC2.ServerInfo.TZ}}}\n              Server Downtime : {{{flow.DDC2.ServerInfo.ServerDT}}}\n                   UTC Offset : {{{flow.DDC2.ServerInfo.UTCOffset}}}\n\n{{/ddc2.AdminONLY.DDC2_Config}}\n\n```\n{{/ddc2.AdminONLY.AdminChannel}}{{/ddc2.AdminONLY.App_Installed}}",
        "output": "str",
        "x": 1461,
        "y": 1000,
        "wires": [
            [
                "c6d0f8143b48e89b"
            ]
        ],
        "l": false
    },
    {
        "id": "b7dd224c32232af5",
        "type": "function",
        "z": "ef6fcb72f5ddd39c",
        "name": "Reboot Pre-Processing",
        "func": "////Initialize Variables\nvar Func = flow.get('Func');\nvar DDC2 = flow.get('DDC2');\n////////////////////////////////////////////////////////////////////////////////////////////////////\nmsg.ddc2.valid = true;\nmsg.ddc2.Notification = DDC2.ServerInfo.ServerID+ ` has received your request `+msg.author.username+ ` and has begun processing your `+(Func.Capitalize(msg.ddc2.requesttype))+` request, please wait as Reboot commands can take some time to complete, the Autostart sequence will notify you when the server is coming back online....`\nmsg.payload = '-'+msg.ddc2.requesttype\n////////////////////////////////////////////////////////////////////////////////////////////////////\nvar MsgSent = context.get('MsgSent') || 1;\nnode.status({fill:\"green\",shape:\"ring\",text: \"Tea's made: \"+MsgSent});\ncontext.set('MsgSent', (MsgSent + 1));\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1210,
        "y": 760,
        "wires": [
            [
                "3ee76f85c91e7444",
                "386b275656409728"
            ]
        ],
        "inputLabels": [
            "Post-Whitelist-Check"
        ],
        "outputLabels": [
            "To Powershell"
        ],
        "icon": "node-red/inject.svg"
    },
    {
        "id": "6dc4f89edae24f43",
        "type": "function",
        "z": "ef6fcb72f5ddd39c",
        "name": "Access Pre-Processing",
        "func": "////Initialize Variables\nvar Func = flow.get('Func');\nvar DDC2 = flow.get('DDC2');\n////////////////////////////////////////////////////////////////////////////////////////////////////\nmsg.ddc2.Notification = \"\" //Stops the Notification system from sending out a message.\nvar msglow = msg.ddc2.raw.toLowerCase();\nvar splitmsg = msglow.split(\" \",3);\n\nvar IPAddr = splitmsg[2];\nif (typeof IPAddr === 'undefined') {IPAddr = \"\"}\nelse {\n    msg.ddc2.access = {\n                'IPAddr' : IPAddr,\n             'FirstLoop' : true,\n               'Payload' : \"\"\n    }\n}\n\n\nif(Func.ValidateIPaddress(IPAddr) === false) {\n    msg.ddc2.valid = false;\n    msg.ddc2.Notification = DDC2.ServerInfo.ServerID+ ` has detected the IP Address provided is not valid (`+IPAddr+`). Please enter a valid IPv4 or IPv6 IP address to use the `+(Func.Capitalize(msg.ddc2.requesttype))+`. For help with this command please type \" !help access \", to get your Internet IP address you can visit https://ipinfo.io/`\n} else {\n    msg.ddc2.valid = true;\n    msg.ddc2.Notification = DDC2.ServerInfo.ServerID+ ` has verified your `+(Func.Capitalize(msg.ddc2.requesttype))+` command and has begun processing it. Please wait.....`\n    if (DDC2.ServerInfo.VNCEnabled) {\n        msg.payload = `-access -IP `+IPAddr+` -USER `+msg.author.username+` -ID `+msg.author.id+ ` -VNC`;\n        }\n    else {\n        msg.payload = `-access -IP `+IPAddr+` -USER `+msg.author.username+` -ID `+msg.author.id;\n    }\n}\nif(msg.channel.id != DDC2.Channel.Admin) {\n    msg.ddc2.valid = false;\n    msg.ddc2.Notification = DDC2.ServerInfo.ServerID+` acknowledges your `+(Func.Capitalize(msg.ddc2.requesttype))+` command, due to the sensitive nature of the information the reply contains, DDC2 has aborted this request, please use the admin channel.`\n}\n////////////////////////////////////////////////////////////////////////////////////////////////////\nvar MsgSent = context.get('MsgSent') || 1;\nnode.status({ fill: \"green\", shape: \"ring\", text: \"Passwords misplaced: \" + MsgSent });\ncontext.set('MsgSent', (MsgSent + 1));\n////////////////////////////////////////////////////////////////////////////////////////////////////\nif(msg.ddc2.valid) {\n    return [msg,msg]\n} else {\n    return [null,msg]\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 700,
        "wires": [
            [
                "386b275656409728"
            ],
            [
                "3ee76f85c91e7444"
            ]
        ],
        "inputLabels": [
            "Post-Whitelist-Check"
        ],
        "outputLabels": [
            "To Powershell",
            ""
        ],
        "icon": "node-red/inject.svg"
    },
    {
        "id": "f4b8b4c23bc0bac0",
        "type": "function",
        "z": "ef6fcb72f5ddd39c",
        "name": "Update Pre-Processing",
        "func": "////Initialize Variables\nvar Func = flow.get('Func');\nvar DDC2 = flow.get('DDC2');\n////////////////////////////////////////////////////////////////////////////////////////////////////\nmsg.ddc2.valid = true;\nmsg.ddc2.Notification = DDC2.ServerInfo.ServerID+ ` has received your request `+msg.author.username+ ` and has begun processing your `+(Func.Capitalize(msg.ddc2.requesttype))+` request, to check the status of the update command run the !status command....`\nmsg.payload = '-'+msg.ddc2.requesttype\n////////////////////////////////////////////////////////////////////////////////////////////////////\nvar MsgSent = context.get('MsgSent') || 1;\ncontext.set('MsgSent', (MsgSent + 1));\nreturn msg",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1210,
        "y": 640,
        "wires": [
            [
                "386b275656409728",
                "3ee76f85c91e7444"
            ],
            []
        ],
        "inputLabels": [
            "Post-Whitelist-Check"
        ],
        "outputLabels": [
            "To Powershell",
            ""
        ],
        "icon": "node-red/inject.svg"
    },
    {
        "id": "7bf199a9c3a90add",
        "type": "function",
        "z": "ef6fcb72f5ddd39c",
        "name": "PS Pre-Execution Notice",
        "func": "/*\nGeneralized PS Pre Execution Notification for simple commands \ncommands that do not require a task specific customized response\n*/\n////Initialize Variables\nvar Func = flow.get('Func');\nvar DDC2 = flow.get('DDC2');\n////////////////////////////////////////////////////////////////////////////////////////////////////\nmsg.ddc2.valid = true;\nmsg.ddc2.Notification = DDC2.ServerInfo.ServerID+ ` has recieved a `+(Func.Capitalize(msg.ddc2.requesttype))+ ` command request from `+msg.author.username+ `. Please wait while this task is processed....`\n\nmsg.payload = '-'+msg.ddc2.requesttype\n////////////////////////////////////////////////////////////////////////////////////////////////////\nvar MsgSent = context.get('MsgSent') || 1;\ncontext.set('MsgSent', (MsgSent + 1));\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1210,
        "y": 520,
        "wires": [
            [
                "3ee76f85c91e7444",
                "386b275656409728"
            ]
        ],
        "inputLabels": [
            "Post-Whitelist-Check"
        ],
        "outputLabels": [
            "To Powershell"
        ],
        "icon": "node-red/inject.svg"
    },
    {
        "id": "b3b64344821f82f0",
        "type": "function",
        "z": "ef6fcb72f5ddd39c",
        "name": "Radio Pre-Processing...",
        "func": "// @ts-nocheck\n////Initialize Variables\nvar Func = flow.get('Func');\nvar DDC2 = flow.get('DDC2');\nvar MsgSent = context.get('MsgSent') || 1;\n////////////////////////////////////////////////////////////////////////////////////////////////////\nmsg.ddc2.Notification = \"\"\nvar msglow = msg.ddc2.raw.toLowerCase();\nvar InvalidFreq = false\nvar InvalidCoal = false\nvar InvalidMsg = false\nvar MessageFailed = false\nvar RadioRequest = \"\"\n////Frequency\nvar Freq = \"\"\nvar FreqStart = msglow.indexOf('-freq ')\nif(FreqStart == -1) {\n    Freq = parseFloat(DDC2.AppConfig.SRS.DDC2_FREQ)\n} else {\n    var FreqAdd = FreqStart + 6\n    var FreqStr = msglow.slice(FreqAdd)\n    var FreqEnd = FreqStr.indexOf(' ')\n    Freq = parseFloat(FreqStr.slice(0, FreqEnd))\n    if((Freq < parseFloat(DDC2.AppConfig.SRS.DDC2_LOW)) || (Freq > parseFloat(DDC2.AppConfig.SRS.DDC2_HIGH))) {\n        InvalidFreq = true\n    }\n}\n////Coalition\nvar Coal = \"\"\nvar CoalStart = msglow.indexOf('-coal ')\n\nif(CoalStart == -1) {\n    Coal = parseInt(DDC2.AppConfig.SRS.DDC2_COAL)\n    if(msg.data.channel.id == DDC2.Channel.Blue) {Coal = 2}\n    if(msg.data.channel.id == DDC2.Channel.Red) {Coal = 1}\n} else {\n    var CoalAdd = CoalStart + 6\n    var CoalStr = msglow.slice(CoalAdd)\n    var CoalEnd = CoalStr.indexOf(' ')\n    Coal = parseInt(CoalStr.slice(0, CoalEnd))\n    if((Coal < 0) || (Coal > 2)) {\n        InvalidCoal = true\n    }\n}\n////Message\nvar Text2Radio = \"\"\nvar T2RStart = msglow.indexOf('-msg \"')\nif(T2RStart == -1) {\n    InvalidMsg = true\n} else {\n    var T2RAdd = T2RStart + 6\n    var T2RStr = msglow.slice(T2RAdd)\n    var T2REnd = T2RStr.indexOf('\"')\n    var Unclean = T2RStr.slice(0, T2REnd)\n    var cleanString = Unclean.replace(/[|&;$%@\"<>*^-_=+;\\\\()+]/g, \"\");\n    var WordCount = cleanString.split(' ').length\n    var SpacesRemoved = cleanString.replace(/\\s/g, '').length\n    if((WordCount > 0) && (SpacesRemoved > 0)) {\n        Text2Radio = cleanString\n    } else {\n        InvalidMsg = true\n    }\n}\n\nvar CoalitionName = Func.GetCoalition(Coal)\n\n////Powershell Payload Prep\nif((InvalidFreq) || (InvalidCoal) || (InvalidMsg)) {\n    msg.ddc2.valid = false;\n    MessageFailed = true\n} else {\n    msg.payload = `-radio -RadioFrq `+Freq+` -RadioUser `+msg.member.user.username+` -RadioSide `+Coal+` -RadioMSG \"`+Text2Radio+`\"`\n    msg.ddc2.comment = \"Passed to PS: \"+msg.payload\n    msg.ddc2.valid = true;\n}\n\nmsg.ddc2.Radio = {\n     \"RadioUpper\" : Func.Capitalize(msg.ddc2.requesttype),\n           \"Freq\" : Freq,\n           \"Coal\" : Coal,\n  \"CoalitionName\" : CoalitionName,\n     \"Test2Radio\" : Text2Radio,\n    \"InvalidFreq\" : InvalidFreq,\n    \"InvalidCoal\" : InvalidCoal,\n     \"InvalidMsg\" : InvalidMsg,\n  \"MessageFailed\" : MessageFailed\n}\n\n\n////////////////////////////////////////////////////////////////////////////////////////////////////\nnode.status({fill:\"green\",shape:\"ring\",text: \"Ear holes molested: \"+MsgSent});\ncontext.set('MsgSent', (MsgSent + 1));\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 880,
        "wires": [
            [
                "386b275656409728",
                "3ee76f85c91e7444",
                "0abcf859b16dfe78"
            ]
        ],
        "inputLabels": [
            "Post-Whitelist-Check"
        ],
        "outputLabels": [
            "To Powershell"
        ],
        "icon": "node-red/inject.svg"
    },
    {
        "id": "0abcf859b16dfe78",
        "type": "template",
        "z": "ef6fcb72f5ddd39c",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "```\nMessage from {{{flow.DDC2.ServerInfo.ServerID}}}....\n\n{{#ddc2.valid}}\n{{{member.user.username}}}, your {{{ddc2.Radio.RadioUpper}}} command has been verified as valid. The parameters passed onto SRS for transmission are:\n\n                    Coalition : {{{ddc2.Radio.CoalitionName}}}\n                    Frequency : {{{ddc2.Radio.Freq}}} {{{flow.DDC2.AppConfig.SRS.DDC2_MOD}}}\n                      Message : {{{ddc2.Radio.Test2Radio}}}\n{{/ddc2.valid}}{{#ddc2.Radio.MessageFailed}}\n\n\n{{/ddc2.Radio.MessageFailed}}\n\n```",
        "output": "str",
        "x": 1461,
        "y": 880,
        "wires": [
            [
                "c6d0f8143b48e89b"
            ]
        ],
        "l": false
    },
    {
        "id": "18a377639c43dbe3",
        "type": "link out",
        "z": "ef6fcb72f5ddd39c",
        "name": "To Discord SEND",
        "links": [
            "bbed42bd9246a46b"
        ],
        "x": 1695,
        "y": 200,
        "wires": []
    },
    {
        "id": "fc0dd516b7f71fef",
        "type": "function",
        "z": "ef6fcb72f5ddd39c",
        "name": "Radio Post-Processing...",
        "func": "////Initialize Variables\nvar Func = flow.get('Func');\nvar DDC2 = flow.get('DDC2');\n////////////////////////////////////////////////////////////////////////////////////////////////////\nvar ttc = Func.DaysBetween((new Date(msg.data.createdTimestamp)), new Date());\nmsg.ddc2.TTC = ttc\nmsg.ddc2.comment = \"Request Actioned\"\nmsg.ddc2.Notification = DDC2.ServerInfo.ServerID+ ` reports your radio transmission was completed in `+msg.ddc2.TTC+` `+msg.member.user.username+`.`\n////////////////////////////////////////////////////////////////////////////////////////////////////\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1210,
        "y": 120,
        "wires": [
            [
                "21ca69177a14da42"
            ]
        ],
        "inputLabels": [
            "Post-Whitelist-Check"
        ],
        "outputLabels": [
            "To Powershell"
        ],
        "icon": "node-red/inject.svg"
    },
    {
        "id": "27e965ce1d77758c",
        "type": "function",
        "z": "ef6fcb72f5ddd39c",
        "name": "Update Post-Processing",
        "func": "//TEMP PLACE HOLDER\n//TEMP PLACE HOLDER\n//TEMP PLACE HOLDER\n//TEMP PLACE HOLDER\n//TEMP PLACE HOLDER\n\n////Initialize Variables\nvar Func = flow.get('Func');\nvar DDC2 = flow.get('DDC2');\n\n////////////////////////////////////////////////////////////////////////////////////////////////////\nvar ttc = Func.DaysBetween((new Date(msg.data.createdTimestamp)), new Date());\nmsg.ddc2.TTC = ttc\nmsg.ddc2.comment = \"Request Actioned\"\n\n\nif (typeof msg.ddc2.Update === 'undefined') {\n    //First Run\n    msg.delay = (DDC2.ServerInfo.UpdateLoop * 1000)\n    msg.ddc2.Update = {\n            \"Status\" : \"Initializing\",\n          \"FirstRun\" : true,\n           \"LOT_Upd\" : \"Update not started\",\n           \"SRS_Upd\" : \"Update not started\",\n           \"DCS_Upd\" : \"Update not started\",\n          \"Finished\" : false\n    }\n} else {\n    if(msg.PS.Updating) {\n        msg.ddc2.Update.Status = \"Updating\"\n        msg.ddc2.Update.FirstRun = false\n        msg.ddc2.Update.Finished = false\n    } else {\n        msg.ddc2.Update.Status = \"Done\"\n        msg.ddc2.Update.FirstRun = false\n        msg.ddc2.Update.Finished = true\n    }\n}\nif(msg.PS.DCS.IsActive) {msg.ddc2.Update.Finished = true}\nif(msg.PS.SRS.IsActive) {msg.ddc2.Update.Finished = true}\n\nif(msg.PS.LOT_Updater.IsActive) {\n    msg.ddc2.Update.LOT_Upd = \"Updating to current \"+DDC2.ServerInfo.LotBuild+\" Build\"\n}\nif(msg.PS.SRS_Updater.IsActive) {\n    msg.ddc2.Update.LOT_Upd = \"Update Complete (\"+DDC2.ServerInfo.LotBuild+\")\"\n    msg.ddc2.Update.SRS_Upd = \"Updating to current \"+DDC2.ServerInfo.SRSBuild+\" Build\"\n}\nif(msg.PS.DCS_Updater.IsActive) {\n    msg.ddc2.Update.LOT_Upd = \"Update Complete (\"+DDC2.ServerInfo.LotBuild+\")\"\n    msg.ddc2.Update.SRS_Upd = \"Update Complete (\"+DDC2.ServerInfo.SRSBuild+\")\"\n    msg.ddc2.Update.DCS_Upd = \"Updating to current \"+DDC2.ServerInfo.DCSBuild+\" Build\"\n}\nif(msg.ddc2.Update.DCS_Upd == \"Updating\") {\n    if (msg.PS.DCS_Updater.Offline) {\n        msg.ddc2.Update.DCS_Upd = \"Update Complete (\"+DDC2.ServerInfo.DCSBuild+\")\"\n    }\n}\nif(DDC2.AppConfig.DCS.Version != msg.PS.DCS.Version) {\n    flow.set('DDC2.AppConfig.DCS.Version', msg.PS.DCS.Lot_Version)\n}\nif(DDC2.AppConfig.LotATC.Version != msg.PS.DCS.Lot_Version) {\n    flow.set('DDC2.AppConfig.LotATC.Version', msg.PS.DCS.Lot_Version)\n}\nif(DDC2.AppConfig.SRS.Version != msg.PS.SRS.Version) {\n    flow.set('DDC2.AppConfig.SRS.Version', msg.PS.SRS.Version)\n}\nmsg.ddc2.payload = `-Status`\nmsg.payload = msg.ddc2.payload;\n\n//If you want interval reporting on Update status uncomment the line below.\n//if(msg.ddc2.Update.Finished) {return [msg,null]} else {return [msg,msg]}\n////////////////////////////////////////////////////////////////////////////////////////////////////\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1210,
        "y": 240,
        "wires": [
            [
                "8ade3110a619efbd"
            ],
            [
                "c74cbf340b96f60c"
            ]
        ],
        "inputLabels": [
            "Post-Whitelist-Check"
        ],
        "outputLabels": [
            "MsgOut",
            "Loop"
        ],
        "icon": "node-red/inject.svg"
    },
    {
        "id": "d6d37b9a5ea9ea86",
        "type": "function",
        "z": "ef6fcb72f5ddd39c",
        "name": "Access Post-Processing",
        "func": "////Initialize Variables\nvar Func = flow.get('Func');\nvar DDC2 = flow.get('DDC2');\n\n////////////////////////////////////////////////////////////////////////////////////////////////////\nvar ttc = Func.DaysBetween((new Date(msg.data.createdTimestamp)), new Date());\nmsg.ddc2.TTC = ttc\nmsg.ddc2.comment = \"Request Actioned\"\n\n\nif(msg.ddc2.requesttype == 'secure') {\n//Second and Further Time through\n    msg.ddc2.access.FirstLoop = false\n    if(msg.PS.ExitLoop) {\n        msg.ddc2.payload = \"ExitLoop\"\n    } else {\n        if (DDC2.ServerInfo.VNCEnabled) {\n            msg.ddc2.payload = `-secure -IP `+msg.ddc2.access.IPAddr+` -USER `+msg.member.displayName+` -ID `+msg.member.userID+' -VNC'; //Shows the next message to be sent to the script\n        } else {\n            msg.ddc2.payload = `-secure -IP `+msg.ddc2.access.IPAddr+` -USER `+msg.member.displayName+` -ID `+msg.member.userID; //Shows the next message to be sent to the script\n        }    \n    }\n}\n\nif(msg.ddc2.requesttype == 'access') {\n//First Time through\n    msg.delay = (DDC2.ServerInfo.AccessLoop * 1000)\n    msg.ddc2.requesttype = 'secure'\n    msg.ddc2.commentLog = 'Firewall rule created for '+msg.ddc2.User+`(DiscordID: `+msg.ddc2.DiscordID+`)`\n    if (DDC2.ServerInfo.VNCEnabled) {\n        msg.ddc2.payload = `-secure -IP `+msg.ddc2.access.IPAddr+` -USER `+msg.member.displayName+` -ID `+msg.member.userID+' -VNC'; //Shows the next message to be sent to the script\n    } else {\n        msg.ddc2.payload = `-secure -IP `+msg.ddc2.access.IPAddr+` -USER `+msg.member.displayName+` -ID `+msg.member.userID; //Shows the next message to be sent to the script\n    }\n}    \nmsg.payload = msg.ddc2.payload;\nif(msg.PS.ExitLoop) {return [msg,null]} else {return [msg,msg]}\n\n\n\n//msg.ddc2.Notification = DDC2.ServerInfo.ServerID+ ` has `+(Func.Capitalize(msg.ddc2.requesttype))+extraP+`ed the the server. The task took `+msg.ddc2.TTC+` to complete.`\n////////////////////////////////////////////////////////////////////////////////////////////////////\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 280,
        "wires": [
            [
                "27a503a17a85ea06"
            ],
            [
                "c74cbf340b96f60c"
            ]
        ],
        "inputLabels": [
            "Post-Whitelist-Check"
        ],
        "outputLabels": [
            "Notifications / Log",
            "Loop"
        ],
        "icon": "node-red/inject.svg"
    },
    {
        "id": "12598829f6f41b8b",
        "type": "link in",
        "z": "ef6fcb72f5ddd39c",
        "name": "NOTIFICATION ONLY",
        "links": [
            "007fec8be047e1a2"
        ],
        "x": 51,
        "y": 260,
        "wires": [
            [
                "9780be32e8f054d4"
            ]
        ]
    },
    {
        "id": "c74cbf340b96f60c",
        "type": "delay",
        "z": "ef6fcb72f5ddd39c",
        "name": "delay 'n'",
        "pauseType": "delayv",
        "timeout": "60",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 1540,
        "y": 360,
        "wires": [
            [
                "06d43204b6bbaf6f"
            ]
        ]
    },
    {
        "id": "06d43204b6bbaf6f",
        "type": "link out",
        "z": "ef6fcb72f5ddd39c",
        "name": "Powershell Loop",
        "links": [
            "91edae5067fc2fa6"
        ],
        "x": 1695,
        "y": 360,
        "wires": []
    },
    {
        "id": "011457100c4b40e3",
        "type": "template",
        "z": "ef6fcb72f5ddd39c",
        "name": "Status Formatting",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{#ddc2.access.FirstLoop}}```\n{{{member.displayName}}}, your request to access {{flow.DDC2.ServerInfo.ServerID}} has been granted. Connection Details are:\n            \n      Console Connection Type : {{{flow.DDC2.ServerInfo.ConsoleType}}}\n    Console Connection String : {{{flow.DDC2.ServerInfo.ConnectionAdrr}}}:{{{flow.DDC2.ServerInfo.ConsolePort}}}    \n       Firewall Authorized IP : {{{ddc2.access.IPAddr}}}\n\nYou have {{{flow.DDC2.ServerInfo.AccessLoop}}} seconds to connect to the server before the firewall is closed.\n```\nRequest completed in {{ddc2.TTC}}\n{{/ddc2.access.FirstLoop}}\n\n{{#PS.Connected}}```\nConnection detected to {{flow.DDC2.ServerInfo.ServerID}} from {{{ddc2.access.IPAddr}}} for {{{member.displayName}}}. Time since request is {{ddc2.TTC}}\n```{{/PS.Connected}}\n{{#PS.ExitLoop}}```\nConnection not detected, firewall rule removed for server {{flow.DDC2.ServerInfo.ServerID}}. Total time elapsed since initial request is {{ddc2.TTC}}\n```{{/PS.ExitLoop}}\n",
        "output": "str",
        "x": 1535,
        "y": 320,
        "wires": [
            [
                "9bbfa74c597067d3"
            ]
        ],
        "l": false
    },
    {
        "id": "9bbfa74c597067d3",
        "type": "link out",
        "z": "ef6fcb72f5ddd39c",
        "name": "To Discord SEND",
        "links": [
            "bbed42bd9246a46b"
        ],
        "x": 1695,
        "y": 320,
        "wires": []
    },
    {
        "id": "171fd89ac834f41f",
        "type": "link out",
        "z": "ef6fcb72f5ddd39c",
        "name": "To LOG",
        "links": [
            "1eec40505b266e42"
        ],
        "x": 1695,
        "y": 280,
        "wires": []
    },
    {
        "id": "605520efe80639b7",
        "type": "function",
        "z": "ef6fcb72f5ddd39c",
        "name": "Stop .............................",
        "func": "////Initialize Variables\nvar Func = flow.get('Func');\nvar DDC2 = flow.get('DDC2');\n////////////////////////////////////////////////////////////////////////////////////////////////////\nvar ttc = Func.DaysBetween((new Date(msg.data.createdTimestamp)), new Date());\nmsg.ddc2.TTC = ttc\nmsg.ddc2.comment = \"Request Actioned\"\nvar extraP = 'p'\nif(msg.ddc2.requesttype != 'stop') {extraP = ''}\n\nmsg.ddc2.Notification = \"This message should never be seen and if it is seen it means someone has broken the stop command logic, bummer...\"\n\nif(msg.ddc2.Stop.Game) {\n    msg.ddc2.Notification = DDC2.ServerInfo.ServerID+ ` has `+(Func.Capitalize(msg.ddc2.requesttype))+extraP+`ed the DCS and SRS server processes. The task took `+msg.ddc2.TTC+` to complete.`\n}\nif(msg.ddc2.Stop.All) {\n    msg.ddc2.Notification = DDC2.ServerInfo.ServerID+ ` has `+(Func.Capitalize(msg.ddc2.requesttype))+extraP+`ed all Game and Update server processes. The task took `+msg.ddc2.TTC+` to complete.`\n}\nif(msg.ddc2.Stop.DCS) {\n    msg.ddc2.Notification = DDC2.ServerInfo.ServerID+ ` has `+(Func.Capitalize(msg.ddc2.requesttype))+extraP+`ed the DCS server process. The task took `+msg.ddc2.TTC+` to complete.`\n}\nif(msg.ddc2.Stop.SRS) {\n    msg.ddc2.Notification = DDC2.ServerInfo.ServerID+ ` has `+(Func.Capitalize(msg.ddc2.requesttype))+extraP+`ed the SRS server process. The task took `+msg.ddc2.TTC+` to complete.`\n}\nif(msg.ddc2.Stop.Update) {\n    msg.ddc2.Notification = DDC2.ServerInfo.ServerID+ ` has `+(Func.Capitalize(msg.ddc2.requesttype))+extraP+`ed the servers DCS, LotATC and SRS update processes. The task took `+msg.ddc2.TTC+` to complete.`\n}\n////////////////////////////////////////////////////////////////////////////////////////////////////\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1210,
        "y": 160,
        "wires": [
            [
                "21ca69177a14da42"
            ]
        ],
        "inputLabels": [
            "Post-Whitelist-Check"
        ],
        "outputLabels": [
            "To Powershell"
        ],
        "icon": "node-red/inject.svg"
    },
    {
        "id": "8132fc3dbf95b4e8",
        "type": "link out",
        "z": "ef6fcb72f5ddd39c",
        "name": "Send to Autostart",
        "links": [
            "3113e095693176f6",
            "87b43297e2e97688"
        ],
        "x": 575,
        "y": 220,
        "wires": []
    },
    {
        "id": "3113e095693176f6",
        "type": "link in",
        "z": "ef6fcb72f5ddd39c",
        "name": "AutoStart",
        "links": [
            "8132fc3dbf95b4e8"
        ],
        "x": 655,
        "y": 480,
        "wires": [
            [
                "9bab4284f8179346"
            ]
        ]
    },
    {
        "id": "2acac9d6d8835fbc",
        "type": "link out",
        "z": "ef6fcb72f5ddd39c",
        "name": "To Set-Config",
        "links": [
            "9febfad9f862f21f"
        ],
        "x": 1475,
        "y": 440,
        "wires": []
    },
    {
        "id": "8ade3110a619efbd",
        "type": "template",
        "z": "ef6fcb72f5ddd39c",
        "name": "Update Status Formatting",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "```\n               -=:# Server Update Status #:=-\n              DDC2 Server ID : {{{flow.DDC2.ServerInfo.ServerID}}}\n      Update Processing Time : {{ddc2.TTC}}\n      Update Message Inteval : {{{flow.DDC2.ServerInfo.UpdateLoop}}} seconds\n      \n              LotATC Updater : {{#ddc2.Update.LOT_Upd}}{{ddc2.Update.LOT_Upd}}{{/ddc2.Update.LOT_Upd}}{{#PS.LOT_Updater.Offline}} [{{PS.DCS.Lot_Version}}]{{/PS.LOT_Updater.Offline}}{{#PS.LOT_Updater.IsActive}}\n                       Ticks : {{PS.LOT_Updater.RunTime.Ticks}}\n            Process CPU Load : {{PS.LOT_Updater.CPULoad}} %\n         Process Memory Load : {{PS.LOT_Updater.MemGB}} GB\n             Process Threads : {{PS.LOT_Updater.Threads}}\n             Process Handles : {{PS.LOT_Updater.Threads}}{{/PS.LOT_Updater.IsActive}}\n             \n\t\t\t\t SRS Updater : {{#ddc2.Update.SRS_Upd}}{{ddc2.Update.SRS_Upd}}{{/ddc2.Update.SRS_Upd}}{{#PS.SRS_Updater.Offline}} [{{PS.SRS.Version}}]{{/PS.SRS_Updater.Offline}}{{#PS.SRS_Updater.IsActive}}\n                       Ticks : {{PS.SRS_Updater.RunTime.Ticks}}\n            Process CPU Load : {{PS.SRS_Updater.CPULoad}} %\n         Process Memory Load : {{PS.SRS_Updater.MemGB}} GB\n             Process Threads : {{PS.SRS_Updater.Threads}}\n             Process Handles : {{PS.SRS_Updater.Threads}}{{/PS.SRS_Updater.IsActive}}\n             \n                 DCS Updater : {{#ddc2.Update.DCS_Upd}}{{ddc2.Update.DCS_Upd}}{{/ddc2.Update.DCS_Upd}}{{#PS.DCS_Updater.Offline}} [{{PS.DCS.Version}}]{{/PS.DCS_Updater.Offline}}{{#PS.DCS_Updater.IsActive}}\n                       Ticks : {{PS.DCS_Updater.RunTime.Ticks}}\n            Process CPU Load : {{PS.DCS_Updater.CPULoad}} %\n         Process Memory Load : {{PS.DCS_Updater.MemGB}} GB\n             Process Threads : {{PS.DCS_Updater.Threads}}\n             Process Handles : {{PS.DCS_Updater.Threads}}{{/PS.DCS_Updater.IsActive}}\n```\n{{#PS.Updating}}\n{{/PS.Updating}}",
        "output": "str",
        "x": 1595,
        "y": 240,
        "wires": [
            [
                "18a377639c43dbe3"
            ]
        ],
        "l": false
    },
    {
        "id": "8bb1acf564135cb3",
        "type": "link out",
        "z": "ef6fcb72f5ddd39c",
        "name": "To LOG",
        "links": [
            "1eec40505b266e42"
        ],
        "x": 1475,
        "y": 480,
        "wires": []
    },
    {
        "id": "9bab4284f8179346",
        "type": "delay",
        "z": "ef6fcb72f5ddd39c",
        "name": "",
        "pauseType": "delayv",
        "timeout": "10",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 705,
        "y": 480,
        "wires": [
            [
                "60a338c477371fe6"
            ]
        ],
        "l": false
    },
    {
        "id": "4164c9e8b336f140",
        "type": "function",
        "z": "ef6fcb72f5ddd39c",
        "name": "Stop Pre-Processing....",
        "func": "/*\nStop Command\nusage\n\n!stop <serverID> //DEFAULT ACTION: Stops DCS and SRS processes (Same as -Game)\n\n!stop <serverID> -All  //Stops All DCS and Update processes\n\n!stop <serverID> -Game //Stops DCS and SRS processes\n\n!stop <serverID> -DCS //Stops DCS process\n\n!stop <serverID> -SRS //Stops SRS process\n\n!stop <serverID> -Update //Stops Update process\n\nOptions for Default are \n\n-StopAll\n-StopGame\n-StopDCS\n-StopSRS\n-StopUpdate\n\n*/\n////Initialize Variables\nvar Func = flow.get('Func');\nvar DDC2 = flow.get('DDC2');\n////////////////////////////////////////////////////////////////////////////////////////////////////\nvar MsgSent = context.get('MsgSent') || 1;\nnode.status({fill:\"green\",shape:\"ring\",text: \"Airbrakes Deployed : \"+MsgSent});\ncontext.set('MsgSent', (MsgSent + 1));\n////////////////////////////////////////////////////////////////////////////////////////////////////\nmsg.ddc2.Stop = {\n         \"Game\" : false,\n          \"All\" : false,\n          \"DCS\" : false,\n          \"SRS\" : false,\n       \"Update\" : false\n    }\n////////////////////////////////////////////////////////////////////////////////////////////////////\nmsg.ddc2.valid = true;\nvar msglow = msg.ddc2.raw.toLowerCase();\n////////////////////////////////////////////////////////////////////////////////////////////////////\n//DEFAULT ACTION (will be executed is no other switches are detected during message analysis)\nvar DefaultNote = msg.ddc2.Notification = DDC2.ServerInfo.ServerID+ ` has recieved a `+(Func.Capitalize(msg.ddc2.requesttype))+ ` command request from `+msg.author.username+ `. Please wait while this task is processed....`\nvar DefaultPayload = '-'+msg.ddc2.requesttype+\" -StopGame\" //DEFAULT SETTING IS -StopGame\n////////////////////////////////////////////////////////////////////////////////////////////////////\n\nvar StopAll = msglow.indexOf('-all')\nvar doStopAll = \"\"\nif(StopAll != -1) {\n    doStopAll = \"-StopAll\"\n    msg.ddc2.Stop.All = true\n    msg.ddc2.Notification = DDC2.ServerInfo.ServerID+ ` has recieved a `+(Func.Capitalize(msg.ddc2.requesttype))+ ` -all command request from `+msg.author.username+ `. Please wait while this task is processed....`\n    msg.payload = '-'+msg.ddc2.requesttype+\" \"+doStopAll\n    return msg\n}\n////////////////////////////////////////////////////////////////////////////////////////////////////\nvar StopGame = msglow.indexOf('-game')\nvar doStopGame = \"\"\nif(StopGame != -1) {\n    doStopGame = \"-StopGame\"\n    msg.ddc2.Stop.Game = true\n    msg.ddc2.Notification = DDC2.ServerInfo.ServerID+ ` has recieved a `+(Func.Capitalize(msg.ddc2.requesttype))+ ` -Game command request from `+msg.author.username+ `. Please wait while this task is processed....`\n    msg.payload = '-'+msg.ddc2.requesttype+\" \"+doStopGame\n    return msg\n}\n////////////////////////////////////////////////////////////////////////////////////////////////////\nvar StopUpdate = msglow.indexOf('-update')\nvar doStopUpdate = \"\"\nif(StopUpdate != -1) {\n    doStopUpdate = \"-StopUpdate\"\n    msg.ddc2.Stop.Update = true\n    msg.ddc2.Notification = DDC2.ServerInfo.ServerID+ ` has recieved a `+(Func.Capitalize(msg.ddc2.requesttype))+ ` -Update command request from `+msg.author.username+ `. Please wait while this task is processed....`\n    msg.payload = '-'+msg.ddc2.requesttype+\" \"+doStopUpdate\n    return msg\n}\n////////////////////////////////////////////////////////////////////////////////////////////////////\nvar StopDCS = msglow.indexOf('-dcs')\nvar doStopDCS = \"\"\nif(StopDCS != -1) {\n    doStopDCS = \"-StopDCS\"\n    msg.ddc2.Stop.DCS = true\n    msg.ddc2.Notification = DDC2.ServerInfo.ServerID+ ` has recieved a `+(Func.Capitalize(msg.ddc2.requesttype))+ ` -DCS command request from `+msg.author.username+ `. Please wait while this task is processed....`\n    msg.payload = '-'+msg.ddc2.requesttype+\" \"+doStopDCS\n    return msg\n}\n////////////////////////////////////////////////////////////////////////////////////////////////////\nvar StopSRS = msglow.indexOf('-srs')\nvar doStopSRS = \"\"\nif(StopSRS != -1) {\n    doStopSRS = \"-StopSRS\"\n    msg.ddc2.Stop.SRS = true\n    msg.ddc2.Notification = DDC2.ServerInfo.ServerID+ ` has recieved a `+(Func.Capitalize(msg.ddc2.requesttype))+ ` -SRS command request from `+msg.author.username+ `. Please wait while this task is processed....`\n    msg.payload = '-'+msg.ddc2.requesttype+\" \"+doStopSRS\n    return msg\n}\n////////////////////////////////////////////////////////////////////////////////////////////////////\n//Execution of Default Stop Message\nmsg.ddc2.Notification = DefaultNote\nmsg.ddc2.Stop.Game = true\nmsg.payload = DefaultPayload\nreturn msg\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1210,
        "y": 580,
        "wires": [
            [
                "386b275656409728",
                "3ee76f85c91e7444"
            ]
        ],
        "inputLabels": [
            "Post-Whitelist-Check"
        ],
        "outputLabels": [
            "To Powershell"
        ],
        "icon": "node-red/inject.svg"
    },
    {
        "id": "913331e05f9777a8",
        "type": "delay",
        "z": "ef6fcb72f5ddd39c",
        "name": "",
        "pauseType": "delayv",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 1475,
        "y": 160,
        "wires": [
            [
                "c41ecf52059cd163"
            ]
        ],
        "l": false
    },
    {
        "id": "202e698cc2e168d5",
        "type": "function",
        "z": "ef6fcb72f5ddd39c",
        "name": "DDC2 Version",
        "func": "//DO NOT MODIFY THIS DATA!! ALL DATA IS PULLED FROM THE DDC2_CONFIG.ps1 FILE, MODIFY THE DATA THERE!!!!\nflow.set('DDC2.ServerInfo.DDC2_FLOW', \"v2.2 Hotel\")\nvar DDC2 = flow.get('DDC2');\nvar StatusString = \"PS:\"+DDC2.ServerInfo.DDC2_PSCore+\" CFG:\"+DDC2.ServerInfo.DDC2_PSConfig+\" NRF:\"+DDC2.ServerInfo.DDC2_FLOW\nnode.status({fill:\"green\",shape:\"dot\",text:StatusString});\n\n",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 100,
        "wires": [],
        "icon": "font-awesome/fa-id-card-o"
    },
    {
        "id": "4213f91759589455",
        "type": "json",
        "z": "ef6fcb72f5ddd39c",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 1355,
        "y": 40,
        "wires": [
            [
                "7491914b7ca499c4",
                "41807eb86c74d032"
            ]
        ],
        "l": false
    },
    {
        "id": "046135a94a52429f",
        "type": "link out",
        "z": "ef6fcb72f5ddd39c",
        "name": "To Discord SEND",
        "links": [
            "bbed42bd9246a46b"
        ],
        "x": 945,
        "y": 1060,
        "wires": []
    },
    {
        "id": "86b068578ef0eafa",
        "type": "template",
        "z": "ef6fcb72f5ddd39c",
        "name": "Event_Notification",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{#notifications.friendly_fire}}<@{{flow.DDC2.ServerInfo.Support.SupportContactID}}> ALERT Team Kill!! ALERT Team Kill!! ```{{payload.dataPayload.killerInfo.name}} killed {{payload.dataPayload.victimInfo.name}} with a {{payload.dataPayload.weaponName}} on '{{flow.DDC2.AppConfig.DCS.name}}' ```{{/notifications.friendly_fire}} \n{{#notifications.mission_end}}```{{flow.DCS.currentMission.missionName}} mission operation window on '{{flow.DDC2.AppConfig.DCS.name}}' has closed; Thanks for playing. ```{{/notifications.mission_end}}\n{{#notifications.mission_load_end}}```'{{flow.DDC2.AppConfig.DCS.name}}' has just loaded {{payload.dataPayload.missionName}} mission. Operation Window is now Open; ```{{/notifications.mission_load_end}}\n{{#notifications.kill}}``` {{payload.dataPayload.killerInfo.name}} killed a {{payload.dataPayload.victimUnitType}} with a {{payload.dataPayload.weaponName}} on '{{flow.DDC2.AppConfig.DCS.name}}' ```{{/notifications.kill}}\n{{#notifications.self_kill}}```{{payload.dataPayload.playerInfo.name}} has died on '{{flow.DDC2.AppConfig.DCS.name}}' ```{{/notifications.self_kill}}\n{{#notifications.change_slot}}```{{payload.dataPayload.playerInfo.name}} has switched to {{payload.dataPayload.playerInfo.sideSTR}} on '{{flow.DDC2.AppConfig.DCS.name}}' ```{{/notifications.change_slot}}\n{{#notifications.connect}}```{{payload.dataPayload.playerInfo.name}} has connected to server '{{flow.DDC2.AppConfig.DCS.name}}' ```{{/notifications.connect}}\n{{#notifications.disconnect}}```{{payload.dataPayload.name}} has disconnected from server '{{flow.DDC2.AppConfig.DCS.name}}' ```{{/notifications.disconnect}}\n{{#notifications.crash}}```{{payload.dataPayload.playerInfo.name}} has crashed their {{payload.dataPayload.unitType}} on '{{flow.DDC2.AppConfig.DCS.name}}' ```{{/notifications.crash}}\n{{#notifications.eject}}```{{payload.dataPayload.playerInfo.name}} has ejected from their {{payload.dataPayload.unitType}} on '{{flow.DDC2.AppConfig.DCS.name}}' ```{{/notifications.eject}}\n{{#notifications.takeoff}}```{{payload.dataPayload.playerInfo.name}} has taken off in their {{payload.dataPayload.unitType}} from {{payload.dataPayload.airdromeName}} on '{{flow.DDC2.AppConfig.DCS.name}}' ```{{/notifications.takeoff}}\n{{#notifications.landing}}```{{payload.dataPayload.playerInfo.name}} has landed their {{payload.dataPayload.unitType}} at {{payload.dataPayload.airdromeName}} on '{{flow.DDC2.AppConfig.DCS.name}}' ```{{/notifications.landing}}\n{{#notifications.pilot_death}}```{{payload.dataPayload.playerInfo.name}} {{payload.deathnotice}}, their {{payload.dataPayload.unitType}} {{payload.wrecknotice}} ```{{/notifications.pilot_death}}",
        "output": "str",
        "x": 810,
        "y": 1120,
        "wires": [
            [
                "046135a94a52429f"
            ]
        ]
    },
    {
        "id": "8c9c16b48c66c4b3",
        "type": "template",
        "z": "ef6fcb72f5ddd39c",
        "name": "Status Message",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Data from {{{flow.DDC2.ServerInfo.ServerID}}}\n```\n                  Server Name : {{{flow.DCS.config.name}}}\n                       Uptime : {{DCSUpTime}}\n                  DCS Version : {{{flow.DDC2.AppConfig.DCS.Version}}}\n{{#flow.DDC2.AppConfig.SRS.Installed}}                  SRS Version : {{{flow.DDC2.AppConfig.SRS.Version}}}{{/flow.DDC2.AppConfig.SRS.Installed}}\n                 Mission Name : {{{flow.DCS.currentMission.missionName}}}\n                      Weather : {{{flow.DCS.currentMission.missionWeather.season.temperature}}}°C, {{{flow.DCS.WeatherName}}} (QNH:{{{flow.DCS.currentMission.missionWeather.qnh}}})\n                          Map : {{{flow.DCS.currentMission.theater}}}\n             Mission Duration : {{{flow.DCS.missionFRT}}}\n                    Game Time : {{{flow.DCS.missionRealTime}}}\n{{#flow.DCS.currentMission.isPilotControlVehicles}} Pilot Ground Vehicle Control : ENABLED\n{{/flow.DCS.currentMission.isPilotControlVehicles}}            Player Population : {{{flow.DCS.playersCount}}} / {{{flow.DCS.config.maxPlayers}}}\n                        \n{{#flow.DDC2.AppConfig.DCS.Installed}}                        DCS Active Users\n{{#flow.DCS.playerDetails.1.name}}                                - {{{flow.DCS.playerDetails.1.name}}} : {{{flow.DCS.playerDetails.1.ping}}}ms{{/flow.DCS.playerDetails.1.name}}\n{{#flow.DCS.playerDetails.2.name}}                                - {{{flow.DCS.playerDetails.2.name}}} : {{{flow.DCS.playerDetails.2.ping}}}ms{{/flow.DCS.playerDetails.2.name}}\n{{#flow.DCS.playerDetails.3.name}}                                - {{{flow.DCS.playerDetails.3.name}}} : {{{flow.DCS.playerDetails.3.ping}}}ms{{/flow.DCS.playerDetails.3.name}}\n{{#flow.DCS.playerDetails.4.name}}                                - {{{flow.DCS.playerDetails.4.name}}} : {{{flow.DCS.playerDetails.4.ping}}}ms{{/flow.DCS.playerDetails.4.name}}\n{{#flow.DCS.playerDetails.5.name}}                                - {{{flow.DCS.playerDetails.5.name}}} : {{{flow.DCS.playerDetails.5.ping}}}ms{{/flow.DCS.playerDetails.5.name}}\n{{#flow.DCS.playerDetails.6.name}}                                - {{{flow.DCS.playerDetails.6.name}}} : {{{flow.DCS.playerDetails.6.ping}}}ms{{/flow.DCS.playerDetails.6.name}}\n{{#flow.DCS.playerDetails.7.name}}                                - {{{flow.DCS.playerDetails.7.name}}} : {{{flow.DCS.playerDetails.7.ping}}}ms{{/flow.DCS.playerDetails.7.name}}\n{{#flow.DCS.playerDetails.8.name}}                                - {{{flow.DCS.playerDetails.8.name}}} : {{{flow.DCS.playerDetails.8.ping}}}ms{{/flow.DCS.playerDetails.8.name}}\n{{#flow.DCS.playerDetails.9.name}}                                - {{{flow.DCS.playerDetails.9.name}}} : {{{flow.DCS.playerDetails.9.ping}}}ms{{/flow.DCS.playerDetails.9.name}}\n{{#flow.DCS.playerDetails.10.name}}                                - {{{flow.DCS.playerDetails.10.name}}} : {{{flow.DCS.playerDetails.10.ping}}}ms{{/flow.DCS.playerDetails.10.name}}{{/flow.DDC2.AppConfig.DCS.Installed}}```\nStatus accurate as of {{FormattedTimeStamp}} ({{{flow.DDC2.ServerInfo.TZSN}}})",
        "output": "str",
        "x": 630,
        "y": 1000,
        "wires": [
            [
                "821a44afa1540974"
            ]
        ]
    },
    {
        "id": "87b43297e2e97688",
        "type": "link in",
        "z": "ef6fcb72f5ddd39c",
        "name": "AutoStart",
        "links": [
            "8132fc3dbf95b4e8"
        ],
        "x": 1115,
        "y": 40,
        "wires": [
            [
                "9786d6730463e8f5"
            ]
        ]
    },
    {
        "id": "0433f1a5bda1d61e",
        "type": "inject",
        "z": "ef6fcb72f5ddd39c",
        "name": "Setup Server Status Message",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "0.1",
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 700,
        "y": 40,
        "wires": [
            [
                "6d5aae295e037079"
            ]
        ],
        "info": "This will send a message from the Bot to the Server Status channel configured in ddc2_config.ps1. Copy the messageID and put it into the ddc2_config.ps1 file under $Server_Status_Panel"
    },
    {
        "id": "6d5aae295e037079",
        "type": "function",
        "z": "ef6fcb72f5ddd39c",
        "name": "",
        "func": "var DDC2 = flow.get('DDC2');\nmsg.channel = DDC2.Channel.ServerStatus\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 855,
        "y": 40,
        "wires": [
            [
                "05326912730880ce"
            ]
        ],
        "icon": "node-red/alert.svg",
        "l": false
    },
    {
        "id": "2478b8801eab2c19",
        "type": "link out",
        "z": "ef6fcb72f5ddd39c",
        "name": "Setup Server Status Message",
        "links": [
            "bbed42bd9246a46b"
        ],
        "x": 995,
        "y": 40,
        "wires": []
    },
    {
        "id": "d20154d89acdf6d1",
        "type": "function",
        "z": "ef6fcb72f5ddd39c",
        "name": "STATUS PREP",
        "func": "var Func = flow.get('Func');\nvar DDC2 = flow.get('DDC2');\nvar DCS = flow.get('DCS');\nif((msg.payload.dataType == \"STATUS\") || (msg.payload.dataType == \"INIT\")) {\n    flow.set('DCS.missionRT', Func.FormatTime(msg.payload.dataPayload.missionRT))\n    flow.set('DCS.missionFRT', Func.FormatTime(msg.payload.dataPayload.missionRT))\n    flow.set('DCS.serverFPS', msg.payload.dataPayload.serverFPS)\n    flow.set('DCS.missionRealTime', Func.TimeOfDay(msg.payload.dataPayload.mission.missionStartTime + msg.payload.dataPayload.missionRT))\n    flow.set('DCS.playersCount', msg.payload.dataPayload.playersCount)\n    flow.set('DCS.status', msg.payload.dataPayload.status)\n    flow.set('DCS.config', msg.payload.dataPayload.config)\n    flow.set('DCS.playerDetails', msg.payload.dataPayload.playerDetails)\n    flow.set('DCS.currentMission', msg.payload.dataPayload.mission)\n    flow.set('DCS.WeatherName', Func.GetWeatherName(DCS.currentMission.missionWeather.clouds.preset))\n    }\nif(msg.payload.dataType == \"PILOT_TABLE\") {\n    flow.set('DCS.playerDetails', msg.payload.dataPayload.playerDetails)\n    flow.set('DCS.playersCount', msg.payload.dataPayload.playersCount)\n}\nif(msg.payload.dataType == \"HEARTBEAT\") {\n    flow.set('DCS.missionRT',msg.payload.dataPayload.missionRT)\n    flow.set('DCS.missionFRT', Func.FormatTime(msg.payload.dataPayload.missionRT))\n    flow.set('DCS.serverFPS', msg.payload.dataPayload.serverFPS)\n    if(typeof DCS.currentMission === 'undefined') {\n        flow.set('DCS.missionRealTime', 'UNKNOWN')\n        flow.set('DCS.WeatherName', 'UNKNOWN')\n    } else {\n        flow.set('DCS.missionRealTime', Func.TimeOfDay(DCS.currentMission.missionStartTime + msg.payload.dataPayload.missionRT))\n        flow.set('DCS.WeatherName', Func.GetWeatherName(DCS.currentMission.missionWeather.clouds.preset))\n        }    \n    }\nif(DDC2.Status.DCS.Offline) {\n    msg.ddc2 = {\n        'requesttype' : 'status',\n        'silent' : true\n        }\n    msg.data = {\n        'createdTimestamp' : new Date()\n        }\n    msg.payload = '-status'\n    return [msg,null]\n} else {\n    msg.action = 'edit'\n    msg.channel = {\n        'id' : DDC2.Channel.ServerStatus\n        }\n    msg.message = {\n        'id' : DDC2.Channel.ServerStatusMessage\n        }\n        \n    \n    var DCS_StartTime = new Date(DDC2.Status.DCS.StartTime.Year,(DDC2.Status.DCS.StartTime.Month - 1),DDC2.Status.DCS.StartTime.Day,DDC2.Status.DCS.StartTime.Hour,DDC2.Status.DCS.StartTime.Minute,DDC2.Status.DCS.StartTime.Second);\n    var DCS_Uptime = Func.TimeDelta((DCS_StartTime), new Date(),true, false);\n    msg.DCSUpTime = DCS_Uptime\n    if (DDC2.AppConfig.SRS.Installed == true) {\n        var SRS_StartTime = new Date(DDC2.Status.SRS.StartTime.Year, (DDC2.Status.SRS.StartTime.Month - 1), DDC2.Status.SRS.StartTime.Day, DDC2.Status.SRS.StartTime.Hour, DDC2.Status.SRS.StartTime.Minute, DDC2.Status.SRS.StartTime.Second);\n        var SRS_Uptime = Func.TimeDelta((SRS_StartTime), new Date(), true, false);\n        msg.SRSUpTime = SRS_Uptime\n    }\n    //var FormattedTimeStamp = Func.FormatDateTime(msg.payload.timeStamp, 'en')\n    //msg.FormattedTimeStamp = FormattedTimeStamp\n    msg.FormattedTimeStamp = Func.FormatDateTime(msg.payload.timeStamp, 'en')\n    node.status({ fill: \"green\", shape: \"ring\", text: \"As at \" +  msg.FormattedTimeStamp});\n    return [null,msg]\n}",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 920,
        "wires": [
            [
                "d44b10d3aaedeb3e"
            ],
            [
                "8c9c16b48c66c4b3",
                "cf252ff75d1ecef2"
            ]
        ],
        "icon": "font-awesome/fa-question"
    },
    {
        "id": "9786d6730463e8f5",
        "type": "tcp-server",
        "z": "ef6fcb72f5ddd39c",
        "action": "Listen",
        "actionType": "str",
        "port": "DDC2.ServerInfo.DDC2_Port",
        "portType": "flow",
        "datamode": "stream",
        "datatype": "utf8",
        "newline": "\\n",
        "xmlAttrkey": "$",
        "xmlCharkey": "_",
        "xmlStrip": false,
        "xmlArray": false,
        "xmlNormalizeTags": false,
        "xmlNormalize": false,
        "write": "",
        "writeType": "str",
        "writeHost": "",
        "writeHostType": "str",
        "writePort": "DDC2.ServerInfo.DDC2_Port",
        "writePortType": "flow",
        "closeHost": "",
        "closeHostType": "str",
        "closePort": "",
        "closePortType": "str",
        "topic": "",
        "name": "DDC2 Comms Port",
        "x": 1230,
        "y": 40,
        "wires": [
            [
                "4213f91759589455"
            ]
        ]
    },
    {
        "id": "05d8db1621723f6b",
        "type": "switch",
        "z": "ef6fcb72f5ddd39c",
        "name": "Pre-Processing Filter",
        "property": "payload.dataType",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "INIT",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "BAN_LIST",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ACCESS_CONTROL",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "STATUS",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "PILOT_TABLE",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "HEARTBEAT",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "CHAT",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "NOTIFICATION",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "COMMAND",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 9,
        "x": 215,
        "y": 1020,
        "wires": [
            [
                "d20154d89acdf6d1"
            ],
            [],
            [],
            [
                "d20154d89acdf6d1"
            ],
            [
                "d20154d89acdf6d1"
            ],
            [
                "d20154d89acdf6d1"
            ],
            [
                "410279f3149ec3e4"
            ],
            [
                "1ef167e2eb45981e",
                "88dae98fc4f54d5e",
                "4566240869549a63"
            ],
            [
                "2bbf48401065bf95"
            ]
        ],
        "inputLabels": [
            "DCS TCP Message"
        ],
        "outputLabels": [
            "",
            "",
            null,
            "STATUS",
            "PILOT_TABLE",
            "",
            "",
            "NOTIFICATION",
            ""
        ],
        "icon": "node-red/arrow-in.svg",
        "l": false
    },
    {
        "id": "a0a68dd84ed276e7",
        "type": "link out",
        "z": "ef6fcb72f5ddd39c",
        "name": "To PowerShell",
        "links": [
            "91edae5067fc2fa6"
        ],
        "x": 945,
        "y": 920,
        "wires": []
    },
    {
        "id": "d44b10d3aaedeb3e",
        "type": "rbe",
        "z": "ef6fcb72f5ddd39c",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "x": 565,
        "y": 920,
        "wires": [
            [
                "a0a68dd84ed276e7"
            ]
        ],
        "l": false
    },
    {
        "id": "1ef167e2eb45981e",
        "type": "function",
        "z": "ef6fcb72f5ddd39c",
        "name": "Notifications",
        "func": "// @ts-nocheck\nvar Func = flow.get('Func');\nvar DDC2 = flow.get('DDC2');\nvar DCS = flow.get('DCS');\n//////////////////////////////////////////////////////////////////////////////////////////////////\nif(DDC2.Notifications.enabled) {\n    //NOTIFICATIONS\n    msg.channel = DDC2.Channel.ServerNotifications\n    msg.notifications = {\n        'friendly_fire' : false,\n          'mission_end' : false,\n     'mission_load_end' : false,\n                 'kill' : false,\n            'self_kill' : false,\n          'change_slot' : false, \n              'connect' : false,\n           'disconnect' : false,\n                'crash' : false,\n                'eject' : false,\n              'takeoff' : false,\n              'landing' : false,\n          'pilot_death' : false\n    }\n    \n//////////////////////////////////////////////////////////////////////////////////////////////////\n    if(DDC2.Notifications.friendly_fire & (msg.payload.dataPayload.eventType == \"friendly_fire\")) {\n        msg.notifications.friendly_fire = true\n        node.status({fill:\"green\",shape:\"dot\",text:\"friendly_fire\"});\n        return msg\n    }\n    \n    if (DDC2.Notifications.mission_load_end & (msg.payload.dataPayload.eventType == \"mission_load_end\")) {\n        msg.notifications.mission_load_end = true\n        node.status({ fill: \"green\", shape: \"dot\", text: \"mission_load_end\" });\n        return msg\n    }\n\n    if(DDC2.Notifications.mission_end & (msg.payload.dataPayload.eventType == \"mission_end\")) {\n        msg.notifications.mission_end = true\n        node.status({fill:\"green\",shape:\"dot\",text:\"mission_end\"});\n        return msg\n    }\n\n    if(DDC2.Notifications.kill & (msg.payload.dataPayload.eventType == \"kill\")) {\n        msg.notifications.kill = true\n        if (msg.payload.dataPayload.killerInfo.name == \"\") {\n            if (msg.payload.dataPayload.killerSide == 0) {msg.payload.dataPayload.killerInfo.name = \"Neutral Forces\"}\n            if (msg.payload.dataPayload.killerSide == 1) {msg.payload.dataPayload.killerInfo.name = \"Red Forces\"}\n            if (msg.payload.dataPayload.killerSide == 2) {msg.payload.dataPayload.killerInfo.name = \"Blue Forces\"}\n        }\n        msg.payload.dataPayload.killerUnitType = Func.GetAircraftName(msg.payload.dataPayload.killerUnitType)\n        if (msg.payload.dataPayload.victimUnitType == \"\") {\n            msg.payload.dataPayload.victimUnitType = \"Target\"\n        } else {\n            msg.payload.dataPayload.victimUnitType = Func.GetAircraftName(msg.payload.dataPayload.victimUnitType)\n        }\n        if (msg.payload.dataPayload.weaponName == \"\") {\n            if (DDC2.Notifications.RandomWeapon) {\n                msg.payload.dataPayload.weaponName = Func.MagicalWeaponNameGenerator()\n            } else {\n                msg.payload.dataPayload.weaponName = 'weapon of some kind'\n            }\n        }\n        node.status({fill:\"green\",shape:\"dot\",text:\"kill\"});\n        return msg\n    }\n\n    if(DDC2.Notifications.self_kill & (msg.payload.dataPayload.eventType == \"self_kill\")) {\n        msg.notifications.self_kill = true\n        node.status({fill:\"green\",shape:\"dot\",text:\"self_kill\"});\n        return msg\n    }\n\n    if(DDC2.Notifications.change_slot & (msg.payload.dataPayload.eventType == \"change_slot\")) {\n        if(typeof msg.payload.dataPayload.playerInfo != \"undefined\") {\n            if(msg.payload.dataPayload.playerInfo.side != msg.payload.dataPayload.prevSide) {\n                msg.payload.dataPayload.playerInfo.sideSTR = Func.GetCoalition(msg.payload.dataPayload.playerInfo.side)\n                msg.notifications.change_slot = true\n                node.status({fill:\"green\",shape:\"dot\",text:\"change_slot\"});            \n                return msg\n            }\n        }\n    }\n\n    if(DDC2.Notifications.connect & (msg.payload.dataPayload.eventType == \"connect\")) {\n        msg.notifications.connect = true\n        node.status({fill:\"green\",shape:\"dot\",text:\"connect\"});\n        return msg\n    }\n\n    if(DDC2.Notifications.disconnect & (msg.payload.dataPayload.eventType == \"disconnect\")) {\n        msg.notifications.disconnect = true\n        node.status({fill:\"green\",shape:\"dot\",text:\"disconnect\"});\n        return msg\n    }\n\n    if(DDC2.Notifications.crash & (msg.payload.dataPayload.eventType == \"crash\")) {\n        msg.notifications.crash = true\n        msg.payload.dataPayload.unitType = Func.GetAircraftName(msg.payload.dataPayload.unitType)\n        node.status({fill:\"green\",shape:\"dot\",text:\"crash\"});\n        return msg\n    }\n\n    if(DDC2.Notifications.eject & (msg.payload.dataPayload.eventType == \"eject\")) {\n        msg.notifications.eject = true\n        msg.payload.dataPayload.unitType = Func.GetAircraftName(msg.payload.dataPayload.unitType)\n        node.status({fill:\"green\",shape:\"dot\",text:\"eject\"});\n        return msg\n    }\n\n    if(DDC2.Notifications.takeoff & (msg.payload.dataPayload.eventType == \"takeoff\")) {\n        msg.notifications.takeoff = true\n        msg.payload.dataPayload.unitType = Func.GetAircraftName(msg.payload.dataPayload.unitType)\n        node.status({fill:\"green\",shape:\"dot\",text:\"takeoff\"});\n        return msg\n    }\n\n\n    if(DDC2.Notifications.landing & (msg.payload.dataPayload.eventType == \"landing\")) {\n        msg.notifications.landing = true\n        msg.payload.dataPayload.unitType = Func.GetAircraftName(msg.payload.dataPayload.unitType)\n        node.status({fill:\"green\",shape:\"dot\",text:\"landing\"});\n        return msg\n    }\n\n    if(DDC2.Notifications.pilot_death & (msg.payload.dataPayload.eventType == \"pilot_death\")) {\n        msg.notifications.pilot_death = true\n        if(DDC2.Notifications.RandomDeath) {\n            msg.payload.deathnotice = Func.DeathNotice()\n            msg.payload.wrecknotice = Func.WreckNotice()\n        } else {\n            msg.payload.deathnotice = 'is dead'\n            msg.payload.wrecknotice = 'is a smoldering wreck. Rest in peace.'\n        }\n        msg.payload.dataPayload.unitType = Func.GetAircraftName(msg.payload.dataPayload.unitType)\n        node.status({fill:\"green\",shape:\"dot\",text:\"pilot_death\"});\n        return msg\n    }\n} else {\n    node.status({fill:\"red\",shape:\"dot\",text:\"Notifications not Enabled\"});\n}\n\n//Tactical cmdr == artillery_commander\n//JTAC/Operator == forward_observer\n//Game master == instructor\n//Observer == observer\n//\"\" == Spectator",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 1120,
        "wires": [
            [
                "86b068578ef0eafa"
            ]
        ],
        "icon": "font-awesome/fa-question"
    },
    {
        "id": "a338184190297f99",
        "type": "template",
        "z": "ef6fcb72f5ddd39c",
        "name": "Chat",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "**{{payload.dataPayload.chatName}}:** {{payload.dataPayload.chatMessage}}",
        "output": "str",
        "x": 600,
        "y": 1060,
        "wires": [
            [
                "046135a94a52429f"
            ]
        ]
    },
    {
        "id": "2d8f0b3e7c96b2ce",
        "type": "function",
        "z": "ef6fcb72f5ddd39c",
        "name": "Chat",
        "func": "var Func = flow.get('Func');\nvar DDC2 = flow.get('DDC2');\nvar DCS = flow.get('DCS');\nif (msg.payload.substr(0,1) != DDC2.ServerInfo.CommandPrefix) {\n    msg.host = '127.0.0.1'\n    msg.port = DDC2.ServerInfo.DCS_Port\n    var channel = ''    \n    msg.ddc2 = {\n       \"RequestChannel\" : msg.channel.name,\n     \"RequestChannelID\" : msg.channel.id,\n          \"requesttype\" : 'chat',\n                  \"raw\" : msg.payload\n        }\n    if(msg.channel.id == DDC2.Channel.ServerChatChannel) {\n        //Send to Globabl Chat\n        channel = -1\n        }\n    else if (msg.channel.id == DDC2.Channel.Red) {\n        //Send to Red Chat\n        channel = 1;\n        }\n    else if (msg.channel.id == DDC2.Channel.Blue) {\n        //Send to Blue Chat\n        channel = 2;   \n        }\n    var dataPayload = {\n         'chatName' : msg.author.username,\n      'chatMessage' : msg.payload,\n          'channel' : channel\n        }\n    var StructuredData = {\n        'initiator' : \"DDC2\",\n         'serverID' : DDC2.ServerInfo.ServerID,\n         'dataType' : 'CHAT',\n           'dataID' : msg._msgid,\n      'dataPayload' : dataPayload,\n        'timeStamp' : msg.data.createdTimestamp\n        }\n    msg.payload = StructuredData\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 780,
        "wires": [
            [
                "74e5fd8b292d6511"
            ]
        ],
        "inputLabels": [
            "Get Message"
        ],
        "outputLabels": [
            "Process Request"
        ],
        "icon": "node-red/bridge.svg"
    },
    {
        "id": "410279f3149ec3e4",
        "type": "function",
        "z": "ef6fcb72f5ddd39c",
        "name": "Chat",
        "func": "var Func = flow.get('Func');\nvar DDC2 = flow.get('DDC2');\nvar DCS = flow.get('DCS');\nvar channel = '';\nif(msg.payload.dataType == \"CHAT\") {\n    if(msg.payload.dataPayload.channel == -1) {\n    //Send to GLOBAL Chat\n    channel = DDC2.Channel.ServerChatChannel\n    }\n    else if (msg.payload.dataPayload.channel == 0) {\n    //Send to GLOBAL Chat\n    channel = DDC2.Channel.ServerChatChannel;\n    }\n    else if (msg.payload.dataPayload.channel == 1) {\n    //Send to Red Chat\n    channel = DDC2.Channel.Red;      \n    }\n    else if (msg.payload.dataPayload.channel == 2) {\n    //Send to Blue Chat\n    channel = DDC2.Channel.Blue;   \n    }\n}\nmsg.channel = {\n    'id' : channel\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 1060,
        "wires": [
            [
                "a338184190297f99"
            ]
        ],
        "icon": "font-awesome/fa-question"
    },
    {
        "id": "54475636810ad346",
        "type": "json",
        "z": "ef6fcb72f5ddd39c",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 1115,
        "y": 1420,
        "wires": [
            [
                "4398d2d623f81389"
            ]
        ],
        "l": false
    },
    {
        "id": "4398d2d623f81389",
        "type": "function",
        "z": "ef6fcb72f5ddd39c",
        "name": "DCS-SEND",
        "func": "msg.payload = msg.payload + \"\\n\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1250,
        "y": 1420,
        "wires": [
            [
                "c9c008fd7110f17c"
            ]
        ],
        "icon": "node-red/inject.svg"
    },
    {
        "id": "7491914b7ca499c4",
        "type": "function",
        "z": "ef6fcb72f5ddd39c",
        "name": "DCS Connection",
        "func": "var Func = flow.get('Func');\nvar DDC2 = flow.get('DDC2');\nvar DCS = flow.get('DCS');\nif (typeof DCS != 'undefined' && msg.payload == \"TIMEOUT\") {\n    node.status({fill:\"blue\",shape:\"dot\",text:\"DCS Connection Timeout!\"});\n    // edited lines 4,5,6,13 & 39 and made the \"if\" an \"else if\" on line 7\n} else if (msg.payload.dataType == 'ERROR') {\n\tnode.status({fill:\"red\",shape:\"dot\",text:\"ERROR: Check Node-Red Console\"});\n\tconsole.log(msg.payload.datapayload.errorMsg)\n} else {\n\tif (typeof DCS === 'undefined' || msg.payload.dataType == \"INIT\") { // or dcs init\n\t    if (msg.payload.dataType == 'INIT' && msg.payload.initiator == \"DDC2\") {\n\t        //node.status({fill:\"green\",shape:\"dot\",text:\"DCS Connected\"});\n\t        return [msg,null]   \n\t    } else {\n\t        node.status({fill:\"red\",shape:\"dot\",text:\"DDC2 Not Initialized\"});\n            msg.host = '127.0.0.1'\n    \t\tmsg.port = DDC2.ServerInfo.DCS_Port\n    \t\tvar dataPayload = {\n    \t\t\t'rxPort' : DDC2.ServerInfo.DCS_Port,\n    \t\t\t'txPort' : DDC2.ServerInfo.DDC2_Port,\n    \t\t  'serverID' : DDC2.ServerInfo.ServerID,\n    \t\t  'commandPrefix' : DDC2.ServerInfo.CommandPrefix,\n    \t   'profilePath' : DDC2.AppConfig.DCS.ProfileDIR\n\t    \t}\n    \t\tvar StructuredData = {\n    \t\t   'initiator' : \"DDC2\",\n    \t\t\t'serverID' : 'UNINITIALIZED',\n    \t\t\t'dataType' : \"INIT\",\n    \t\t\t  'dataID' : msg._msgid,\n    \t\t 'dataPayload' : dataPayload,\n    \t\t   'timestamp' : new Date()\n\t\t    }\n\t        msg.payload = StructuredData\n\t        node.status({fill:\"yellow\",shape:\"dot\",text:\"Requesting DCS Initialization\"});\n\t        return [null,msg]\n\t    }\n    } else {\n        // added status for normal connection\n        node.status({fill:\"green\",shape:\"dot\",text:\"DCS Connected\"});\n        return [msg,null]\n    }\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nnode.status({fill:\"grey\",shape:\"dot\",text:\"Await DCS connection...\"});",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 40,
        "wires": [
            [
                "db60319adedc4ca5"
            ],
            [
                "1a447b0ab132d21e"
            ]
        ],
        "outputLabels": [
            "Pass Data through to dataType Splitter",
            "Request Status from DCS"
        ],
        "icon": "font-awesome/fa-question"
    },
    {
        "id": "9e06136f1a0926bc",
        "type": "link in",
        "z": "ef6fcb72f5ddd39c",
        "name": "",
        "links": [
            "1a447b0ab132d21e",
            "03ebb046e3069aae",
            "49d54c557e921805"
        ],
        "x": 1055,
        "y": 1420,
        "wires": [
            [
                "54475636810ad346"
            ]
        ]
    },
    {
        "id": "1a447b0ab132d21e",
        "type": "link out",
        "z": "ef6fcb72f5ddd39c",
        "name": "",
        "links": [
            "9e06136f1a0926bc"
        ],
        "x": 1775,
        "y": 60,
        "wires": []
    },
    {
        "id": "db60319adedc4ca5",
        "type": "link out",
        "z": "ef6fcb72f5ddd39c",
        "name": "",
        "links": [
            "0839f90c38a81d21"
        ],
        "x": 1775,
        "y": 20,
        "wires": []
    },
    {
        "id": "0839f90c38a81d21",
        "type": "link in",
        "z": "ef6fcb72f5ddd39c",
        "name": "",
        "links": [
            "db60319adedc4ca5"
        ],
        "x": 155,
        "y": 1020,
        "wires": [
            [
                "05d8db1621723f6b"
            ]
        ]
    },
    {
        "id": "c9c008fd7110f17c",
        "type": "tcp request",
        "z": "ef6fcb72f5ddd39c",
        "name": "Send Data to DCS",
        "server": "",
        "port": "",
        "out": "immed",
        "ret": "buffer",
        "splitc": " ",
        "newline": "",
        "trim": false,
        "tls": "",
        "x": 1470,
        "y": 1420,
        "wires": [
            []
        ]
    },
    {
        "id": "41807eb86c74d032",
        "type": "trigger",
        "z": "ef6fcb72f5ddd39c",
        "name": "TOT",
        "op1": "",
        "op2": "TIMEOUT",
        "op1type": "nul",
        "op2type": "str",
        "duration": "6",
        "extend": true,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 1450,
        "y": 60,
        "wires": [
            [
                "7491914b7ca499c4"
            ]
        ]
    },
    {
        "id": "f516e1b2dbf65fb3",
        "type": "discordMessage",
        "z": "ef6fcb72f5ddd39c",
        "name": "DDC2 In",
        "channelIdFilter": "",
        "token": "",
        "x": 420,
        "y": 720,
        "wires": [
            [
                "2d8f0b3e7c96b2ce",
                "381319264edfeeaa"
            ]
        ]
    },
    {
        "id": "dac986fcca69bc61",
        "type": "discordMessageManager",
        "z": "ef6fcb72f5ddd39c",
        "name": "DDC2 Out",
        "channel": "",
        "token": "",
        "x": 425,
        "y": 320,
        "wires": [
            [
                "f50b8b0d395b942d"
            ]
        ]
    },
    {
        "id": "381319264edfeeaa",
        "type": "function",
        "z": "ef6fcb72f5ddd39c",
        "name": "Svr Check",
        "func": "var MsgSent = context.get('MsgSent') || 1;\nvar Func = flow.get('Func'); //Loads Flow Functions into memory\nvar DDC2 = flow.get('DDC2'); //Loads DDC2 Configuration Data and sets it as a Variable DDC2\n\n//Check if message first character \nif (msg.channel.type != \"dm\") {\n    if (msg.payload.substr(0,1) == DDC2.ServerInfo.CommandPrefix) {\n        var msglow = msg.payload.toLowerCase();\n        var splitmsg = msglow.split(\" \",3);\n        var command = splitmsg[0];\n        var server = splitmsg[1];\n        var requesttype = command.replace(DDC2.ServerInfo.CommandPrefix,'')\n        var Permissions = flow.get('DDC2.Permissions.'+requesttype)\n        var tmstmp = msg.data.createdTimestamp;\n        var localdatetime = (new Date(tmstmp)).toLocaleString();\n        var access = \"NOTSET\";\n        msg.ddc2 = {\n                  \"request\" : command,\n            \"FormattedTime\" : localdatetime,\n           \"RequestChannel\" : msg.channel.name,\n         \"RequestChannelID\" : msg.channel.id,\n              \"requesttype\" : requesttype,\n                   \"access\" : access,\n               \"authorized\" : false,\n                    \"valid\" : false,\n                    'silent' : false,\n                  \"comment\" : \"\",\n             \"Notification\" : \"\",\n                      \"TTC\" : \"\", //Time To Completion, This measures the time the system recieved the request through to the time the request was completed. This item is used in further down in the flow\n                      \"raw\" : msg.payload\n        }\n        if (requesttype == \"test\") { //All Servers should respond to a test command\n            msg.ddc2.valid = true;\n            if (Func.GrantAccess(Permissions,msg.member.roles)) {\n                msg.ddc2.authorized = true;\n                msg.ddc2.access = \"GRANTED\"\n                msg.ddc2.Notification = DDC2.ServerInfo.ServerID+\" successfully recieved a \"+(Func.Capitalize(msg.ddc2.requesttype))+\" message request from \"+msg.author.username+ \" in the \"+msg.ddc2.RequestChannel+\" channel on the \" +msg.ddc2.FormattedTime;\n                } \n            return msg;\n            }\n        if (DDC2.ServerInfo.ENABLE_HELP) {\n            if (requesttype == \"help\") {\n                if (Func.GrantAccess(Permissions,msg.member.roles)) {\n                msg.ddc2.authorized = true;\n                msg.ddc2.access = \"GRANTED\"\n                msg.ddc2.Notification = \"\"\n                return msg;        \n                }\n            } \n        }\n        if (requesttype == \"acclink\") {\n            if ((server != null && server == DDC2.ServerInfo.ServerID) || (DDC2.ServerInfo.LINK_MASTER && server == null)) {\n                if (Func.GrantAccess(Permissions,msg.member.roles)) {\n                    msg.ddc2.authorized = true;\n                    msg.ddc2.access = \"GRANTED\"\n                    msg.ddc2.Notification = \"\"\n                    return msg;\n                }\n            }\n        } \n        if(server == DDC2.ServerInfo.ServerID.toLowerCase()) {return msg} //use this line if you have multiple servers operating from a single channel\n        //return msg //use this line if you have one server and you do not wish to have to define the server name to interact with you server.\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 720,
        "wires": [
            [
                "99889f9d46bd9c75"
            ]
        ],
        "icon": "node-red/alert.svg"
    },
    {
        "id": "1d36b4e74fe844ce",
        "type": "function",
        "z": "ef6fcb72f5ddd39c",
        "name": "!acclink Pre-Processing",
        "func": "var MsgSent = context.get('MsgSent') || 1;\nvar Func = flow.get('Func'); //Needed for Notification\nvar DDC2 = flow.get('DDC2'); //Needed for Notification\n\nvar command = \"!otp\"\nvar requesttype = \"otp\"\nmsg.data = {\n    \"createdTimestamp\" : new Date()\n}\n//var tmstmp = msg.data.createdTimestamp;\nvar localdatetime = (new Date(msg.data.createdTimestamp)).toLocaleString();\nmsg.ddc2.comments = \"Request Actioned\"\nmsg.ddc2.Notification = DDC2.ServerInfo.ServerID+\" successfully recieved your Account Link request.\\nI have just sent you a Private Message with your One Time Code and instructions on how to use it.\"\nmsg.ddc2.comment = \"Cached Response\"\nmsg.database = DDC2.ServerInfo.DB_File;\n//msg.mode = \"generate\";\n//msg.discordID = msg.author.id;\n//msg.commandPrefix = ;\n\n\nmsg.ddc2.acclink = {\n    'discordID' : msg.author.id,\n    'commandPrefix' : DDC2.ServerInfo.CommandPrefix\n}\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 1360,
        "wires": [
            [
                "3ee76f85c91e7444"
            ]
        ],
        "icon": "node-red/alert.svg"
    },
    {
        "id": "d6fad1fb0f8c96a8",
        "type": "link out",
        "z": "ef6fcb72f5ddd39c",
        "name": "",
        "links": [
            "bbed42bd9246a46b",
            "1eec40505b266e42"
        ],
        "x": 1895,
        "y": 1340,
        "wires": []
    },
    {
        "id": "f096c48e2ea26ae6",
        "type": "function",
        "z": "ef6fcb72f5ddd39c",
        "name": "OTP Discord Post Processing",
        "func": "var Func = flow.get('Func'); //Needed for Notification\nvar DDC2 = flow.get('DDC2'); //Needed for Notification\nvar MsgSent = context.get('MsgSent') || 1;\nvar ttc = Func.DaysBetween((new Date(msg.data.createdTimestamp)), new Date());\nmsg.ddc2.TTC = ttc\nmsg.ddc2.comment = \"Request Actioned\"\n//var ttc = 0;\n//msg.ddc2.TTC = ttc\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1730,
        "y": 1340,
        "wires": [
            [
                "d6fad1fb0f8c96a8"
            ]
        ],
        "icon": "node-red/alert.svg"
    },
    {
        "id": "2bbf48401065bf95",
        "type": "switch",
        "z": "ef6fcb72f5ddd39c",
        "name": "Command Switch",
        "property": "payload.dataPayload.type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "ACCLINK",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 5,
        "x": 345,
        "y": 1360,
        "wires": [
            [
                "dbd9e2f3db751d78"
            ],
            [],
            [],
            [],
            []
        ],
        "inputLabels": [
            "DCS TCP Message"
        ],
        "icon": "node-red/comment.svg",
        "l": false
    },
    {
        "id": "f6f88cba1ed504f0",
        "type": "link in",
        "z": "ef6fcb72f5ddd39c",
        "name": "",
        "links": [
            "c116e2ac0d575c6f"
        ],
        "x": 1395,
        "y": 1380,
        "wires": [
            []
        ]
    },
    {
        "id": "dbd9e2f3db751d78",
        "type": "function",
        "z": "ef6fcb72f5ddd39c",
        "name": "!acclink Pre-Processing",
        "func": "var MsgSent = context.get('MsgSent') || 1;\nvar Func = flow.get('Func'); //Needed for Notification\nvar DDC2 = flow.get('DDC2'); //Needed for Notification\nvar command = \"!otp\"\nvar requesttype = \"otp\"\nmsg.data = {\n    \"createdTimestamp\" : new Date()\n}\n//var tmstmp = msg.data.createdTimestamp;\nvar localdatetime = (new Date(msg.data.createdTimestamp)).toLocaleString();\nmsg.ddc2 = {\n                  \"request\" : command,\n            \"FormattedTime\" : localdatetime,\n           \"RequestChannel\" : \"DCS Server -\"+DDC2.ServerInfo.ServerID,\n         \"RequestChannelID\" : \"DCS Server -\"+DDC2.ServerInfo.ServerID,\n              \"requesttype\" : requesttype,\n                   \"access\" : \"GRANTED\",\n               \"authorized\" : true,\n                    \"valid\" : true,\n                    'silent' : false,\n                  \"comment\" : \"\",\n             \"Notification\" : \"\",\n                      \"TTC\" : \"\", //Time To Completion, This measures the time the system recieved the request through to the time the request was completed. This item is used in further down in the flow\n                      \"raw\" : msg.payload.dataPayload.raw\n        }\nmsg.ddc2.acclink = {\n                'ucid' : msg.payload.dataPayload.playerUCID,\n                 'otp' : msg.payload.dataPayload.otp\n               //'IPAddr' : msg.payload.dataPayload.ipaddr\n    }\nmsg.database = DDC2.ServerInfo.DB_File;\nreturn msg;\n\n//    database : DDC2.ServerInfo.DB_File,\n//        ucid : msg.payload.dataPayload.playerUCID,\n//         otp : msg.payload.dataPayload.otp,\n// requesttype : \"\"\n     //msg.ddc2.authorized = true;\n//    msg.ddc2.access = \"GRANTED\"\n//}\n\n\n//msg.ucid = msg.payload.dataPayload.playerUCID;\n//msg.otp = \n//msg.mode = \"verify\";",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 1280,
        "wires": [
            [
                "c116e2ac0d575c6f"
            ]
        ],
        "icon": "node-red/alert.svg"
    },
    {
        "id": "c116e2ac0d575c6f",
        "type": "link out",
        "z": "ef6fcb72f5ddd39c",
        "name": "",
        "links": [
            "f6f88cba1ed504f0"
        ],
        "x": 955,
        "y": 1280,
        "wires": []
    },
    {
        "id": "03ebb046e3069aae",
        "type": "link out",
        "z": "ef6fcb72f5ddd39c",
        "name": "",
        "links": [
            "9e06136f1a0926bc"
        ],
        "x": 1875,
        "y": 1380,
        "wires": []
    },
    {
        "id": "0ffc79f2973a4420",
        "type": "function",
        "z": "ef6fcb72f5ddd39c",
        "name": "OTP DCS Post Processing",
        "func": "var Func = flow.get('Func');\nvar DDC2 = flow.get('DDC2');\nvar DCS = flow.get('DCS');\n\nmsg.host = '127.0.0.1'\nmsg.port = DDC2.ServerInfo.DCS_Port\n\nvar StructuredData = {\n   'initiator' : \"DDC2\",\n\t'serverID' : DDC2.ServerInfo.ServerID,\n\t'dataType' : \"PCHAT\",\n\t  'dataID' : msg._msgid,\n 'dataPayload' : msg.dataPayload,\n   'timestamp' : new Date()\n}\nmsg.payload = StructuredData\nmsg.dataPayload = null;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1720,
        "y": 1380,
        "wires": [
            [
                "03ebb046e3069aae"
            ]
        ]
    },
    {
        "id": "88dae98fc4f54d5e",
        "type": "function",
        "z": "ef6fcb72f5ddd39c",
        "name": "Connect Pre-Processing",
        "func": "if (msg.payload.dataPayload.eventType == 'connect') {\n    var DDC2 = flow.get('DDC2'); //Needed for Notification\n    msg.database = DDC2.ServerInfo.DB_File;\n    msg.ipaddr = msg.payload.dataPayload.playerInfo.ipaddr.split(\":\")[0];\n    msg.dataTimeout = 604800;\n    msg.ucid = msg.payload.dataPayload.playerInfo.ucid;\n    msg.playerName = msg.payload.dataPayload.playerInfo.name;\n    msg.mode = \"connect\";\n    return msg\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 1220,
        "wires": [
            []
        ]
    },
    {
        "id": "05d42eaeaec08666",
        "type": "inject",
        "z": "ef6fcb72f5ddd39c",
        "name": "Get Guild ID",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "0.1",
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 750,
        "y": 100,
        "wires": [
            [
                "54447c42696aeb7c"
            ]
        ],
        "info": "This will send a message from the Bot to the Server Status channel configured in ddc2_config.ps1. Copy the messageID and put it into the ddc2_config.ps1 file under $Server_Status_Panel"
    },
    {
        "id": "54447c42696aeb7c",
        "type": "function",
        "z": "ef6fcb72f5ddd39c",
        "name": "",
        "func": "var DDC2 = flow.get('DDC2');\nmsg.channel = DDC2.Channel.Admin\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 855,
        "y": 100,
        "wires": [
            [
                "8fc0d031cf0f2809"
            ]
        ],
        "icon": "node-red/alert.svg",
        "l": false
    },
    {
        "id": "f50b8b0d395b942d",
        "type": "function",
        "z": "ef6fcb72f5ddd39c",
        "name": "",
        "func": "//For Get Guild Button\nvar DDC2 = flow.get('DDC2');\nif (typeof DDC2 === 'undefined') {} else {\n    var GID = DDC2.TMP.GuildIDPwd\n    var SSM = DDC2.TMP.SrvStatusPwd\n    if (msg.payload.content == GID) {\n        msg.GID = true\n        msg.action = 'edit'\n        msg.message = msg.payload.id\n        msg.channel = DDC2.Channel.Admin\n        msg.user = msg.payload.authorId\n        msg.guild = msg.payload.guildId\n        return msg\n    }\n    \n    //For Server Status Message\n    if (msg.payload.content == SSM) {\n        msg.SSM = true\n        msg.action = 'edit'\n        msg.message = msg.payload.id\n        msg.channel = msg.payload.channelId\n        msg.user = msg.payload.authorId\n        msg.guild = msg.payload.guildId    \n        return msg    \n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 320,
        "wires": [
            [
                "fb68814207de9c04"
            ]
        ],
        "icon": "node-red/alert.svg",
        "l": false
    },
    {
        "id": "fb68814207de9c04",
        "type": "template",
        "z": "ef6fcb72f5ddd39c",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{#GID}}\n```\nThe following ID should be put into your ddc2_config.ps1 file as the GuildID variable.\ne.g. $GuildID = \"{{{message}}}\"\n```\nYour Discord Servers Guild ID is _**{{{guild}}}**_\n\n```\nThis message can be deleted once your GuildID is set in your ddc2_config.ps1 and you have run the !refresh command\n```\n{{/GID}}{{#SSM}}\n_**DO NOT DELETE THIS MESSAGE!!**_\n\n```\nPut the message ID into your ddc2_config.ps1 file as the Server Status variable.\ne.g. $ServerStatusMessage = \"{{{message}}}\"\n```\nThis messages ID is _**{{{message}}}**_\n\n_**NOTE:** This is the Server Status Message for DDC2 ServerID {{{flow.DDC2.ServerInfo.ServerID}}}_\n```Once set in your ddc2_config.ps1 and you have run the !refresh command```\n_**DO NOT DELETE THIS MESSAGE!!**_\n{{/SSM}}",
        "output": "str",
        "x": 570,
        "y": 320,
        "wires": [
            [
                "04b6f38879e6301a"
            ]
        ],
        "l": false
    },
    {
        "id": "04b6f38879e6301a",
        "type": "link out",
        "z": "ef6fcb72f5ddd39c",
        "name": "Setup Server Status Message",
        "links": [
            "bbed42bd9246a46b"
        ],
        "x": 610,
        "y": 320,
        "wires": []
    },
    {
        "id": "05326912730880ce",
        "type": "template",
        "z": "ef6fcb72f5ddd39c",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{{flow.DDC2.TMP.SrvStatusPwd}}}",
        "output": "str",
        "x": 915,
        "y": 40,
        "wires": [
            [
                "2478b8801eab2c19"
            ]
        ],
        "l": false
    },
    {
        "id": "8fc0d031cf0f2809",
        "type": "template",
        "z": "ef6fcb72f5ddd39c",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{{flow.DDC2.TMP.GuildIDPwd}}}",
        "output": "str",
        "x": 915,
        "y": 100,
        "wires": [
            [
                "2478b8801eab2c19"
            ]
        ],
        "l": false
    },
    {
        "id": "cd81780492d1575a",
        "type": "link out",
        "z": "ef6fcb72f5ddd39c",
        "name": "To Discord SEND",
        "links": [
            "bbed42bd9246a46b"
        ],
        "x": 945,
        "y": 1000,
        "wires": []
    },
    {
        "id": "821a44afa1540974",
        "type": "function",
        "z": "ef6fcb72f5ddd39c",
        "name": "Every 10th Msg",
        "func": "var MsgIn = context.get('MsgIn') || 1;\nvar StatusMsg = context.get('StatusMsg') || 1;\n\ncontext.set('MsgIn', (MsgIn + 1));\n\n//if (Number.isInteger(MsgIn / 10)) {\nif (Number.isInteger(MsgIn / 10)) {\n    context.set('StatusMsg', (StatusMsg + 1));\n    node.status({ fill: \"green\", shape: \"ring\", text: \"Status Msg Sent: \" + StatusMsg + \" times\"});\n    return msg\n    }\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 1000,
        "wires": [
            [
                "cd81780492d1575a"
            ]
        ]
    },
    {
        "id": "60df09502ad93f9d",
        "type": "link out",
        "z": "ef6fcb72f5ddd39c",
        "name": "LINK TO INFLUX",
        "mode": "link",
        "links": [
            "dcb7c8792f440320"
        ],
        "x": 945,
        "y": 960,
        "wires": []
    },
    {
        "id": "cf252ff75d1ecef2",
        "type": "change",
        "z": "ef6fcb72f5ddd39c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload.dataPayload.eventType",
                "pt": "msg",
                "to": "payload.dataType",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 565,
        "y": 960,
        "wires": [
            [
                "60df09502ad93f9d"
            ]
        ],
        "icon": "node-red/arrow-in.svg",
        "l": false
    },
    {
        "id": "dcb7c8792f440320",
        "type": "link in",
        "z": "ef6fcb72f5ddd39c",
        "name": "LINK FROM DDC2 NOTIFICATIONS",
        "links": [
            "60df09502ad93f9d"
        ],
        "x": 1695,
        "y": 560,
        "wires": [
            [
                "2ad5fd3d02848116"
            ]
        ]
    },
    {
        "id": "d7ff129bdfb13ebb",
        "type": "influxdb out",
        "z": "ef6fcb72f5ddd39c",
        "influxdb": "fbe98b58a9cea3b4",
        "name": "DDC2 InfluxDB",
        "measurement": "",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "s",
        "retentionPolicyV18Flux": "",
        "org": "DDC2",
        "bucket": "ddc2",
        "x": 2200,
        "y": 520,
        "wires": []
    },
    {
        "id": "1a899e1f6f30bf53",
        "type": "switch",
        "z": "ef6fcb72f5ddd39c",
        "name": "NOTIFICATION SWITCH",
        "property": "payload.dataPayload.eventType",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "HEARTBEAT",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "friendly_fire",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "connected",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "disconnected",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "mission_end",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 5,
        "x": 1795,
        "y": 560,
        "wires": [
            [
                "55fcf87991c0bfc4"
            ],
            [],
            [],
            [],
            []
        ],
        "inputLabels": [
            "FROM DCS"
        ],
        "outputLabels": [
            "HEARTBEAT",
            "friendly_fire",
            "connected",
            "disconnected",
            "mission_end"
        ],
        "icon": "node-red/arrow-in.svg",
        "l": false
    },
    {
        "id": "2ad5fd3d02848116",
        "type": "function",
        "z": "ef6fcb72f5ddd39c",
        "name": "InfluxDB Enabled Check",
        "func": "////Initialize Variables\nvar DDC2 = flow.get('DDC2');\nif (DDC2.ServerInfo.ENABLE_INFLUXDB) {\n    return msg\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1745,
        "y": 560,
        "wires": [
            [
                "1a899e1f6f30bf53"
            ]
        ],
        "icon": "node-red/alert.svg",
        "l": false
    },
    {
        "id": "55fcf87991c0bfc4",
        "type": "function",
        "z": "ef6fcb72f5ddd39c",
        "name": "InfluxDB Data Prep",
        "func": "var Func = flow.get('Func'); \nvar DDC2 = flow.get('DDC2'); \nvar DCS = flow.get('DCS'); \n\nmsg.influx = {\n         hostname : DDC2.ServerInfo.ComputerName,\n         ddc2Name : DDC2.ServerInfo.ServerID,\n    dcsservername : DCS.config.name,\n       playercount: Math.floor(DCS.playersCount),\n      missionName : DCS.currentMission.missionName,\n   missionTheater : DCS.currentMission.theater,\n      missionTime : DCS.missionRealTime,\n        serverFPS : DCS.serverFPS,\n      weatherName : DCS.WeatherName,\n       maxPlayers : Math.floor(DCS.config.maxPlayers),\n    dcs_processID : DDC2.Status.DCS.Id,\n    srs_processID : DDC2.Status.SRS.Id,\n      dcs_version : DDC2.Status.DCS.ProductVersion,\n      srs_version : DDC2.Status.SRS.ProductVersion\n}\nmsg.measurement = DDC2.ServerInfo.ServerID\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1930,
        "y": 520,
        "wires": [
            [
                "712a599b4c739ab2"
            ]
        ]
    },
    {
        "id": "712a599b4c739ab2",
        "type": "change",
        "z": "ef6fcb72f5ddd39c",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "influx",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2055,
        "y": 520,
        "wires": [
            [
                "d7ff129bdfb13ebb"
            ]
        ],
        "l": false
    },
    {
        "id": "e576ad63de9f1612",
        "type": "subflow:092c6e9c32f04760",
        "z": "ef6fcb72f5ddd39c",
        "name": "",
        "x": 1880,
        "y": 420,
        "wires": [
            [
                "49afa45efcea5006"
            ],
            [
                "64090efd7ac11b01",
                "2dd3b176d7c7d896",
                "7a3371170585fbc4"
            ]
        ]
    },
    {
        "id": "b1e67f28d210db10",
        "type": "link in",
        "z": "ef6fcb72f5ddd39c",
        "name": "link in 1",
        "links": [
            "3e31ab70dd7adad3"
        ],
        "x": 1765,
        "y": 420,
        "wires": [
            [
                "e576ad63de9f1612"
            ]
        ]
    },
    {
        "id": "3e31ab70dd7adad3",
        "type": "link out",
        "z": "ef6fcb72f5ddd39c",
        "name": "link out 1",
        "mode": "link",
        "links": [
            "b1e67f28d210db10"
        ],
        "x": 355,
        "y": 40,
        "wires": []
    },
    {
        "id": "827125c48505845a",
        "type": "function",
        "z": "ef6fcb72f5ddd39c",
        "name": "DDC2 Server ID",
        "func": "//DO NOT MODIFY THIS DATA!! ALL DATA IS PULLED FROM THE DDC2_CONFIG.ps1 FILE, MODIFY THE DATA THERE!!!!\nnode.status({fill:\"green\",shape:\"dot\",text:\"ServerID: \" +flow.get('DDC2.ServerInfo.ServerID')});",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 420,
        "y": 40,
        "wires": [],
        "icon": "font-awesome/fa-id-card-o"
    },
    {
        "id": "64090efd7ac11b01",
        "type": "function",
        "z": "ef6fcb72f5ddd39c",
        "name": "To DCS Chat",
        "func": "var Func = flow.get('Func');\nvar DDC2 = flow.get('DDC2');\nvar DCS = flow.get('DCS');\n\nmsg.host = '127.0.0.1'\nmsg.port = DDC2.ServerInfo.DCS_Port\nmsg.channel = {}\nmsg.channel.id = DDC2.Channel.ServerChatChannel\nvar TS = new Date()\nmsg.timeStamp = new Date(TS).getTime()\nmsg.data = {}\nmsg.data.createdTimestamp = msg.timeStamp\nvar REBOOT_TIME = msg.payload\nvar TASK_REBOOT = ''\n\nif (REBOOT_TIME == '0') { TASK_REBOOT = DDC2.AppConfig.DCS.name + ' server is now going offline for scheduled maintenance, the server should be back online soon. Thanks for your patience.' }\nelse if (REBOOT_TIME == '1') { TASK_REBOOT = DDC2.AppConfig.DCS.name + ' server will be going offline for scheduled maintenance in ' + REBOOT_TIME + ' minute.' }\nelse { TASK_REBOOT = DDC2.AppConfig.DCS.name + ' server will be going offline for scheduled maintenance in ' + REBOOT_TIME + ' minutes.' }\n\nvar channel = -1\nmsg.payload = TASK_REBOOT\nmsg.ddc2 = {}\nvar msg_ddc2 = {\n    \"RequestChannel\" : \"NODE-RED GENERATED\",\n    \"RequestChannelID\": \"NODE-RED GENERATED\",\n        \"requesttype\" : 'chat',\n                \"raw\" : msg.payload\n    }\nmsg.ddc2 = msg_ddc2\nvar dataPayload = {\n    //'chatName': \"SERVER NOTIFICATION\",\n    'chatName': DDC2.ServerInfo.ServerID,\n    'chatMessage' : msg.payload,\n        'channel' : channel\n    }\nvar StructuredData = {\n    'initiator' : \"DDC2\",\n        'serverID' : DDC2.ServerInfo.ServerID,\n        'dataType' : 'CHAT',\n        'dataID' : msg._msgid,\n    'dataPayload' : dataPayload,\n    'timeStamp' : msg.data.createdTimestamp\n    }\nmsg.payload = StructuredData\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2110,
        "y": 300,
        "wires": [
            [
                "49d54c557e921805"
            ]
        ],
        "inputLabels": [
            "Get Message"
        ],
        "outputLabels": [
            "Process Request"
        ],
        "icon": "node-red/bridge.svg"
    },
    {
        "id": "49afa45efcea5006",
        "type": "function",
        "z": "ef6fcb72f5ddd39c",
        "name": "!reboot",
        "func": "////Initialize Variables\nvar Func = flow.get('Func');\nvar DDC2 = flow.get('DDC2');\n////////////////////////////////////////////////////////////////////////////////////////////////////\nmsg.ddc2 = {};\nmsg.ddc2.valid = true;\nmsg.author = {}\nmsg.author.username = DDC2.ServerInfo.ServerID\nmsg.ddc2.requesttype = 'reboot'\nmsg.ddc2.Notification = DDC2.AppConfig.DCS.name + ` server has begun processing a ` + (Func.Capitalize(msg.ddc2.requesttype)) + ` request, please wait as the ` + (Func.Capitalize(msg.ddc2.requesttype)) + ` command can take some time to complete, the Autostart sequence will notify you when the server is coming back online....`\nmsg.payload = '-' + msg.ddc2.requesttype\n////////////////////////////////////////////////////////////////////////////////////////////////////\nvar MsgSent = context.get('MsgSent') || 1;\nnode.status({ fill: \"green\", shape: \"ring\", text: \"Tea's made: \" + MsgSent });\ncontext.set('MsgSent', (MsgSent + 1));\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2100,
        "y": 240,
        "wires": [
            [
                "8e014b1b73adaf60"
            ]
        ],
        "inputLabels": [
            "Get Message"
        ],
        "outputLabels": [
            "Process Request"
        ],
        "icon": "node-red/bridge.svg"
    },
    {
        "id": "49d54c557e921805",
        "type": "link out",
        "z": "ef6fcb72f5ddd39c",
        "name": "",
        "links": [
            "9e06136f1a0926bc"
        ],
        "x": 2295,
        "y": 300,
        "wires": []
    },
    {
        "id": "007fec8be047e1a2",
        "type": "link out",
        "z": "ef6fcb72f5ddd39c",
        "name": "From TASK_REBOOT",
        "mode": "link",
        "links": [
            "12598829f6f41b8b"
        ],
        "x": 2295,
        "y": 420,
        "wires": []
    },
    {
        "id": "2dd3b176d7c7d896",
        "type": "function",
        "z": "ef6fcb72f5ddd39c",
        "name": "To Discord Notifications",
        "func": "var Func = flow.get('Func');\nvar DDC2 = flow.get('DDC2');\nvar DCS = flow.get('DCS');\nvar REBOOT_TIME = msg.payload\nvar TASK_REBOOT = ''\n//////////////////////////////////////////////////////////////////////////////////////////////////\nif (DDC2.Notifications.enabled) {\n    //NOTIFICATIONS\n    msg.channel = DDC2.Channel.ServerNotifications\n    if (REBOOT_TIME == '0') { TASK_REBOOT = DDC2.AppConfig.DCS.name + ' server is now going offline for scheduled maintenance, the server should be back online soon. Thanks for your patience.'}\n    else if (REBOOT_TIME == '1') { TASK_REBOOT = DDC2.AppConfig.DCS.name + ' server will be going offline for scheduled maintenance in ' + REBOOT_TIME + ' minute.'} \n    else { TASK_REBOOT = DDC2.AppConfig.DCS.name + ' server will be going offline for scheduled maintenance in ' + REBOOT_TIME + ' minutes.'}\n    msg.TASK_REBOOT = TASK_REBOOT\n    return msg\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2150,
        "y": 420,
        "wires": [
            [
                "007fec8be047e1a2"
            ]
        ],
        "inputLabels": [
            "Get Message"
        ],
        "outputLabels": [
            "Process Request"
        ],
        "icon": "node-red/bridge.svg"
    },
    {
        "id": "7a3371170585fbc4",
        "type": "function",
        "z": "ef6fcb72f5ddd39c",
        "name": "To DCS Notifications",
        "func": "var Func = flow.get('Func');\nvar DDC2 = flow.get('DDC2');\nvar DCS = flow.get('DCS');\n\nmsg.host = '127.0.0.1'\nmsg.port = DDC2.ServerInfo.DCS_Port\nvar TS = new Date()\nmsg.timeStamp = new Date(TS).getTime()\nvar REBOOT_TIME = msg.payload\nvar TASK_REBOOT = ''\n//////////////////////////////////////////////////////////////////////////////////////////////////\nif (REBOOT_TIME == '0') { TASK_REBOOT = DDC2.AppConfig.DCS.name + ' server is now going offline for scheduled maintenance, the server should be back online soon. Thanks for your patience.' }\nelse if (REBOOT_TIME == '1') { TASK_REBOOT = DDC2.AppConfig.DCS.name + ' server will be going offline for scheduled maintenance in ' + REBOOT_TIME + ' minute.' }\nelse { TASK_REBOOT = DDC2.AppConfig.DCS.name + ' server will be going offline for scheduled maintenance in ' + REBOOT_TIME + ' minutes.' }\n\n/*\n    msg.ddc2 = {\n        \"RequestChannel\": msg.channel.name,\n        \"RequestChannelID\": msg.channel.id,\n        \"requesttype\": 'dialog',\n        \"raw\": msg.payload\n    }\n\n    835e499b91f7110cca8cdc5a334eac60\n*/\nvar dataPayload = {\n    'coalition': -1,\n   // 'playerUCID': '835e499b91f7110cca8cdc5a334eac60',\n    'text': TASK_REBOOT,\n    'displayTime': 15,\n    'clearView': true\n}\nvar StructuredData = {\n    'initiator': \"DDC2\",\n    'serverID': DDC2.ServerInfo.ServerID,\n    'dataType': 'DIALOG',\n    'dataID': msg._msgid,\n    'dataPayload': dataPayload,\n    'timeStamp': msg.timeStamp\n}\nmsg.payload = StructuredData\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2140,
        "y": 360,
        "wires": [
            [
                "49d54c557e921805"
            ]
        ],
        "inputLabels": [
            "Get Message"
        ],
        "outputLabels": [
            "Process Request"
        ],
        "icon": "node-red/bridge.svg"
    },
    {
        "id": "8e014b1b73adaf60",
        "type": "link out",
        "z": "ef6fcb72f5ddd39c",
        "name": "To PowerShell",
        "links": [
            "91edae5067fc2fa6"
        ],
        "x": 2295,
        "y": 240,
        "wires": []
    },
    {
        "id": "4566240869549a63",
        "type": "debug",
        "z": "ef6fcb72f5ddd39c",
        "name": "Notification Messages",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 1160,
        "wires": []
    },
    {
        "id": "6d78bf118aecec80",
        "type": "function",
        "z": "ef6fcb72f5ddd39c",
        "name": "OzDM - Compare BAN LIST",
        "func": "var DDC2 = flow.get('DDC2');\nvar DBTABLES = flow.get(\"DBTABLES\") || false;\nvar SEND = false\nvar dataPayload = {}\nvar notify = \"\"\nvar banList = \"\"\nvar softBanList = \"\"\n\nif (DBTABLES === false) {\n    //Initialize BAN_LIST\n    flow.set(\"DBTABLES\", {\n        banList: msg.payload.banList,\n        softBanList: msg.payload.softBanList\n    })\n    banList = { banList: msg.payload.banList }\n    Object.assign(dataPayload, banList)\n    softBanList = { softBanList: msg.payload.softBanList }\n    Object.assign(dataPayload, softBanList)\n    notify = \"DBTABLES INIT\"\n    SEND = true\n} else {\n    if (!(JSON.stringify(msg.payload.banList) === JSON.stringify(DBTABLES.banList))) {\n        flow.set(\"DBTABLES.banList\", msg.payload.banList)\n        banList = { banList: msg.payload.banList }\n        Object.assign(dataPayload, banList)\n        SEND = true\n        notify = \"DBTABLES.banList SEND\"\n    }\n    if (!(JSON.stringify(msg.payload.softBanList) === JSON.stringify(DBTABLES.softBanList))) {\n        flow.set(\"DBTABLES.softBanList\", msg.payload.softBanList)\n        softBanList = {softBanList: msg.payload.softBanList}\n        Object.assign(dataPayload, softBanList)\n        SEND = true\n        notify = \"DBTABLES.softbanList SEND\"\n    }\n}\n\nif (SEND) {\n    var TS = new Date()\n    //dataPayload.banList = msg.payload\n    msg.host = '127.0.0.1'\n    msg.port = DDC2.ServerInfo.DCS_Port\n    var StructuredData = {\n        'initiator': \"DDC2\",\n        'serverID': DDC2.ServerInfo.ServerID,\n        'dataType': 'DBTABLES',\n        'dataID': msg._msgid,\n        'dataPayload': dataPayload,\n        //'logTable': true,\n        'timeStamp': new Date(TS).getTime()\n    }\n    msg.payload = ''\n    msg.payload = StructuredData\n    node.status({ fill: \"green\", shape: \"ring\", text: notify });\n    return msg;\n} else {\n    node.status({ fill: \"yellow\", shape: \"ring\", text: \"NOTHING SENT\" });\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 1580,
        "wires": [
            [
                "54475636810ad346"
            ]
        ]
    },
    {
        "id": "dd6cd4d33007906e",
        "type": "function",
        "z": "ef6fcb72f5ddd39c",
        "name": "Pre Processing",
        "func": "//THIS IS FOR POPULATING A FLOW TABLE WITH CONNECTING PLAYER ON THE SERVER AND ALL THE INFORMATION WE HAVE FROM THE DB ON THESE PLAYERS\n\nmsg.ucid = msg.payload.ucid\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1645,
        "y": 1660,
        "wires": [
            []
        ],
        "l": false
    },
    {
        "id": "96a22bb1b261c2d8",
        "type": "function",
        "z": "ef6fcb72f5ddd39c",
        "name": "Pre Processing",
        "func": "msg.playername = msg.payload.discordID\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1875,
        "y": 1660,
        "wires": [
            []
        ],
        "l": false
    },
    {
        "id": "93ba0120c9708a36",
        "type": "link out",
        "z": "ef6fcb72f5ddd39c",
        "name": "link out 2",
        "mode": "link",
        "links": [
            "b987b494eea6388e"
        ],
        "x": 955,
        "y": 1220,
        "wires": []
    },
    {
        "id": "b987b494eea6388e",
        "type": "link in",
        "z": "ef6fcb72f5ddd39c",
        "name": "link in 3",
        "links": [
            "93ba0120c9708a36"
        ],
        "x": 1595,
        "y": 1660,
        "wires": [
            [
                "dd6cd4d33007906e"
            ]
        ]
    },
    {
        "id": "be4fb646a16fefa5",
        "type": "inject",
        "z": "ef6fcb72f5ddd39c",
        "name": "",
        "props": [
            {
                "p": "user",
                "v": "183573224565506048",
                "vt": "str"
            },
            {
                "p": "guild",
                "v": "1045621898584805416",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1350,
        "y": 1780,
        "wires": [
            [
                "e85a3f5956236801"
            ]
        ]
    },
    {
        "id": "a52acbdb65d9a7d9",
        "type": "debug",
        "z": "ef6fcb72f5ddd39c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1670,
        "y": 1780,
        "wires": []
    },
    {
        "id": "e85a3f5956236801",
        "type": "discordPermissions",
        "z": "ef6fcb72f5ddd39c",
        "name": "",
        "token": "",
        "x": 1510,
        "y": 1780,
        "wires": [
            [
                "a52acbdb65d9a7d9"
            ]
        ]
    },
    {
        "id": "f388010cda82d9cc",
        "type": "inject",
        "z": "ef6fcb72f5ddd39c",
        "name": "",
        "props": [
            {
                "p": "database",
                "v": "G:\\DDC2\\database.db",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 550,
        "y": 1580,
        "wires": [
            []
        ]
    },
    {
        "id": "237d9e822a507c74",
        "type": "inject",
        "z": "ef6fcb72f5ddd39c",
        "name": "DB-TEST",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.1",
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 140,
        "y": 1460,
        "wires": [
            [
                "f77ccc353867b656"
            ]
        ]
    },
    {
        "id": "f77ccc353867b656",
        "type": "function",
        "z": "ef6fcb72f5ddd39c",
        "name": "function 7",
        "func": "msg.topic = \"SELECT * FROM players\"\nmsg.payload = {}\nvar DB = {\n    host : \"192.168.0.203\",\n    port : 3306,\n    user : \"ddc2_user\",\n    password : \"ddc2_password\",\n    database : \"DDC2\",\n    waitForConnections : true,\n    connectionLimit : 5,\n    queueLimit : 0,\n    connectTimeout : 1000,\n    ssl : false\n}\nmsg.DB = DB\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 1460,
        "wires": [
            []
        ]
    },
    {
        "id": "fbe98b58a9cea3b4",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "DDC2 Influx",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://192.168.0.201:8086",
        "timeout": "",
        "rejectUnauthorized": true
    }
]